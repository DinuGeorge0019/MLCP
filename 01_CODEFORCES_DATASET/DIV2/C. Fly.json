{
    "link": "https://codeforces.com//contest/1011/problem/C",
    "problemId": "201798",
    "problem_idx": "C",
    "shortId": "1011C",
    "contest_number": "1011",
    "problem_submissions": {
        "F": [
            40800201,
            40801277,
            40801569,
            40804449,
            40805451,
            40806381,
            40806507,
            40806310,
            40805970,
            40801054,
            40808416,
            40809060,
            40810276,
            40808095,
            40807771,
            40805521,
            40807827,
            40807284,
            40807855,
            40804155
        ],
        "D": [
            40796440,
            40794546,
            40792902,
            40795417,
            40799478,
            40795262,
            40794405,
            40796227,
            40796647,
            40805819,
            40795341,
            40796956,
            40801974,
            40796562,
            40798015,
            40809194,
            40797770,
            40797730,
            40793882,
            40809940
        ],
        "E": [
            40792792,
            40796201,
            40795409,
            40798197,
            40794994,
            40796957,
            40798403,
            40799143,
            40799952,
            40795325,
            40797016,
            40792367,
            40793560,
            40799595,
            40800280,
            40796773,
            40803072,
            40801776,
            40801515,
            40795493
        ],
        "C": [
            40790603,
            40791320,
            40791211,
            40789571,
            40790418,
            40791673,
            40790329,
            40790847,
            40793263,
            40794440,
            40790415,
            40800020,
            40790652,
            40792667,
            40793177,
            40791559,
            40792533,
            40792592,
            40791239,
            40793128
        ],
        "B": [
            40785822,
            40786932,
            40787686,
            40786118,
            40785902,
            40788647,
            40785329,
            40786729,
            40785415,
            40788241,
            40792014,
            40785807,
            40787536,
            40787785,
            40787832,
            40786142,
            40787154,
            40790376,
            40787972,
            40786283
        ],
        "A": [
            40783703,
            40785050,
            40784061,
            40783967,
            40783664,
            40784798,
            40783422,
            40784073,
            40783746,
            40785817,
            40785710,
            40783675,
            40784732,
            40784635,
            40786064,
            40783474,
            40783765,
            40785159,
            40784090,
            40783568
        ]
    },
    "name": "C. Fly",
    "statement": "Natasha is going to fly on a rocket to Mars and return to Earth. Also,\r\non the way to Mars, she will land on n - 2 intermediate planets.\r\nFormally: we number all the planets from 1 to n. 1 is Earth, n is Mars.\r\nNatasha will make exactly n flights: 1\r\nto 2\r\nto\r\nldots n\r\nto 1.Flight from x to y consists of two phases: take-off from planet x\r\nand landing to planet y. This way, the overall itinerary of the trip\r\nwill be: the 1-st planet\r\nto take-off from the 1-st planet\r\nto landing to the 2-nd planet\r\nto 2-nd planet\r\nto take-off from the 2-nd planet\r\nto\r\nldots\r\nto landing to the n-th planet\r\nto the n-th planet\r\nto take-off from the n-th planet\r\nto landing to the 1-st planet\r\nto the 1-st planet.The mass of the rocket together with all the useful\r\ncargo (but without fuel) is m tons. However, Natasha does not know how\r\nmuch fuel to load into the rocket. Unfortunately, fuel can only be\r\nloaded on Earth, so if the rocket runs out of fuel on some other planet,\r\nNatasha will not be able to return home. Fuel is needed to take-off from\r\neach planet and to land to each planet. It is known that 1 ton of fuel\r\ncan lift off a_i tons of rocket from the i-th planet or to land b_i tons\r\nof rocket onto the i-th planet. For example, if the weight of rocket is\r\n9 tons, weight of fuel is 3 tons and take-off coefficient is 8 (a_i =\r\n8), then 1.5 tons of fuel will be burnt (since 1.5\r\ncdot 8 = 9 + 3). The new weight of fuel after take-off will be 1.5 tons.\r\nPlease note, that it is allowed to burn non-integral amount of fuel\r\nduring take-off or landing, and the amount of initial fuel can be\r\nnon-integral as well.Help Natasha to calculate the minimum mass of fuel\r\nto load into the rocket. Note, that the rocket must spend fuel to carry\r\nboth useful cargo and the fuel itself. However, it doesnâ€™t need to carry\r\nthe fuel which has already been burnt. Assume, that the rocket takes off\r\nand lands instantly.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define eps 1e-8\n\nusing namespace std;\n\nint a[1005],b[1005],c[2005];\n\nbool check(int n,double s,double m) {\n  for(int i=1;i<=2*n;i++) {\n  \tdouble p=(s+m)/c[i];\n  \tif (s<p) return 0;\n  \ts-=p;\n  }\n  return 1;\n}\n\nint main() {\n  int n,m;\n  scanf(\"%d%d\",&n,&m);\n  for(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n  for(int i=1;i<=n;i++) scanf(\"%d\",&b[i]);\n  for(int i=1;i<=n;i++) c[2*i-1]=a[i];\n  for(int i=2;i<=n;i++) c[2*i-2]=b[i];\n  c[2*n]=b[1];\n  double l=0,r=2e9;\n  while (r-l>eps) {\n  \tdouble mid=(l+r)/2;\n  \tif (check(n,mid,m)) r=mid; else l=mid;\n  }\n  if (l<=1.5e9) printf(\"%.10f\\n\",l);\n  else puts(\"-1\");\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Fly.json",
    "editorial_link": "https://codeforces.com/blog/entry/60851",
    "editorial": "First, we learn how to determine if a rocket can fly the entire route.\r\nConsider an element from an array or . We denote it by . If (that is,\r\none ton of fuel can carry only one ton (cargo + fuel)), then fuel can\r\nonly take it to ourselves, and we need to take a rocket and a useful\r\ncargo (the mass of which is positive). That is, if at least for one , it\r\nis necessary to deduce , otherwise, do the following calculations.It is\r\nclear that arrays and will be processed by the computer of the rocket in\r\nthat order: . We will process this sequence from the end. Let at the\r\ncurrent iteration the mass of the payload (including fuel that will not\r\nbe used at this iteration) is tons, the current element from the array\r\nor is , the mass of fuel that will be used at this iteration (it must be\r\nfound), is . We assign before the iterations . We form the\r\nequation:total mass = mass that all fuel can transportBy this formula,\r\nyou can find fuel in this iteration. For the next iteration to the\r\npayload weight, you need to add mass of fuel (since this fuel needs to\r\nbe brought to this iteration), that is, perform the assignment . In the\r\nend, it is necessary to deduce .Complexity: .Bonus. In fact, it does not\r\nmatter in which order to process arrays and (from the beginning, from\r\nthe end or in general mixed): the answer from this will not change. Try\r\nto prove it by yourself.\r\n",
    "hint": []
}