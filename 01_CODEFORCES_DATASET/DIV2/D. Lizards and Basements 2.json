{"link": "https://codeforces.com//contest/6/problem/D", "problemId": "25", "problem_idx": "D", "shortId": "6D", "contest_number": "6", "problem_submissions": {"E": [26175, 26385, 26342, 26418, 26467, 26465, 26505, 26312, 26410, 26503, 26782, 26628, 26550, 26677, 26607, 26539, 26533, 26735, 26936], "C": [25891, 25921, 25930, 25897, 25978, 25997, 26089, 26070, 26100, 26052, 25937, 26061, 25992, 26173, 26244, 25966, 26354, 25996], "B": [25826, 25819, 25838, 25999, 25888, 25890, 25968, 25955, 25976, 25834, 25830, 25878, 25825, 25998, 26069, 25874, 25975, 26190], "A": [25745, 25746, 25756, 25758, 25781, 25768, 25956, 25861, 25763, 25747, 25767, 25761, 25753, 25813, 25837, 25764, 25755, 25792], "D": [2822667, 27721, 2820593, 28387]}, "name": "D. Lizards and Basements 2", "statement": "Polycarp likes to play computer role-playing game Lizards and Basements\r\n. At the moment he is playing it as a magician. At one of the last\r\nlevels he has to fight the line of archers. The only spell with which he\r\ncan damage them is a fire ball. If Polycarp hits the -th archer with his\r\nfire ball (they are numbered from left to right), the archer loses\r\nhealth points. At the same time the spell damages the archers adjacent\r\nto the -th (if any) they lose () health points each.As the extreme\r\narchers (i.e. archers numbered 1 and ) are very far, the fire ball\r\ncannot reach them. Polycarp can hit any other archer with his fire\r\nball.The amount of health points for each archer is known. An archer\r\nwill be killed when this amount is less than 0. What is the minimum\r\namount of spells Polycarp can use to kill all the enemies?Polycarp can\r\nthrow his fire ball into an archer if the latter is already killed.\r\n", "solutions": ["#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<map>\n#include<set>\n#include<algorithm>\n#include<cmath>\n#include<sstream>\n#include<deque>\n#include<queue>\n#include<stack>\n#include<string>\n#include<cstring>\n#include<climits>\n#include<list>\n#include<complex>\n#ifdef _MSC_VER\n#include <hash_set>\n#include <hash_map>\nusing namespace stdext;\n#else\n#if __GNUC__ > 2\n#include <ext/hash_set>\n#include <ext/hash_map>\nusing namespace __gnu_cxx;\n#else\n#include <hash_set>\n#include <hash_map>\n#endif\n#endif\n\nusing namespace std;\n\n#define eps 1e-12\n#define oo (int)1e9\n#define foreach(i,c) for(__typeof((c).begin()) i = (c).begin() ; i != (c).end() ; i++)\n\ntypedef unsigned long long ull;\ntypedef long long ll;\n\nint dp[11][20][20][20];\nint n, a, b;\nint archer[11];\n\nint calc(int ind, int left, int mid, int right) {\n    if (ind == n - 1)\n        return max((left + a - 1) / a, (mid + b - 1) / b);\n\n    int& x = dp[ind][left][mid][right];\n\n    if (x != -1)\n        return x;\n\n    x = 1000000;\n\n    int cnt = (left + b - 1) / b;\n\n    for (int xx = cnt; xx <= 16; xx++) {\n        int nleft = max(0, mid - xx * a);\n        int nmid = max(0, right - xx * b);\n        int nright = archer[ind + 2];\n        x = min(calc(ind + 1, nleft, nmid, nright) + xx, x);\n    }\n\n    return x;\n}\n\nvector<int> v;\n\nvoid build(int ind, int left, int mid, int right) {\n    int c;\n\n    if (ind == n - 1) {\n        c = max((left + a - 1) / a, (mid + b - 1) / b);\n\n        for (int i = 0; i < c; i++)\n            v.push_back(ind);\n\n        return;\n    }\n\n    int cnt = (left + b - 1) / b;\n\n    for (int xx = cnt; xx <= 16; xx++) {\n        int nleft = max(0, mid - xx * a);\n        int nmid = max(0, right - xx * b);\n        int nright = archer[ind + 2];\n\n        if (calc(ind + 1, nleft, nmid, nright) + xx == calc(ind, left, mid, right)) {\n            for (int i = 0; i < xx; i++)\n                v.push_back(ind + 1);\n\n            build(ind + 1, nleft, nmid, nright);\n            return;\n        }\n    }\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.in\", \"rt\", stdin);\n#endif\n\n    while (scanf(\"%d%d%d\", &n, &a, &b) != EOF) {\n        for (int i = 0; i < n; i++) {\n            scanf(\"%d\", archer + i);\n            archer[i]++;\n        }\n\n        memset(dp, -1, sizeof(dp));\n        v.clear();\n        build(1, archer[0], archer[1], archer[2]);\n\n        printf(\"%d\\n\", v.size());\n\n        for (int i = 0; i < v.size(); i++) {\n            if (i)\n                printf(\" \");\n\n            printf(\"%d\", v[i]);\n        }\n\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["brute force", "dp"], "dificulty": "2600", "interactive": false}