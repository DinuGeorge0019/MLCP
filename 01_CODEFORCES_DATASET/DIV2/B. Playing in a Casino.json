{
    "link": "https://codeforces.com//contest/1808/problem/B",
    "problemId": "1854691",
    "problem_idx": "B",
    "shortId": "1808B",
    "contest_number": "1808",
    "problem_submissions": {
        "D": [
            199663586,
            199652295,
            199649543,
            199658153,
            199660313,
            199664555,
            199663522,
            199658681,
            199662131,
            199663211,
            199665809,
            199666904,
            199686788,
            200680943,
            199672659,
            199667818,
            199670491,
            199654888,
            199672673
        ],
        "E3": [
            199660988,
            199675708,
            199684437,
            199678631,
            199683096,
            201130452,
            199666847,
            199711014
        ],
        "E2": [
            199660914,
            199675587,
            199684591,
            199669150,
            199671171,
            199672422,
            199667417,
            199667886,
            199667544,
            199677124,
            199673172,
            199673912,
            199667116,
            200681161,
            200681118,
            199662837,
            199681512,
            199697948,
            199682318
        ],
        "E1": [
            199660827,
            199647476,
            199655105,
            199665173,
            199671231,
            199655192,
            199650032,
            199667518,
            199667485,
            199670735,
            199673329,
            199674123,
            199667097,
            200681014,
            199659398,
            199681451,
            199697918,
            199676180,
            199669612,
            199661602
        ],
        "C": [
            199660389,
            199669471,
            199646653,
            199653605,
            199654568,
            199648568,
            199646672,
            199649651,
            199653794,
            199654418,
            199657068,
            199657978,
            199676868,
            200680878,
            200680798,
            199678734,
            199656497,
            199658569,
            199658535,
            199649977
        ],
        "A": [
            199643949,
            199642214,
            199639989,
            199639150,
            199640540,
            199639256,
            199639177,
            199639048,
            199640380,
            199639173,
            199640678,
            199639746,
            199643343,
            200680660,
            199641247,
            199641300,
            199640545,
            199639604,
            199639018
        ],
        "B": [
            199639404,
            199640164,
            199644601,
            199640956,
            199642784,
            199641076,
            199640175,
            199641302,
            199643530,
            199641294,
            199644684,
            199643246,
            199643095,
            200680723,
            199647537,
            199644556,
            199644782,
            199642649,
            199640242
        ]
    },
    "name": "B. Playing in a Casino",
    "statement": "Galaxy Luck, a well-known casino in the entire solar system, introduces\r\na new card game.In this game, there is a deck that consists of n cards.\r\nEach card has m numbers written on it. Each of the n players receives\r\nexactly one card from the deck.Then all players play with each other in\r\npairs, and each pair of players plays exactly once. Thus, if there are,\r\nfor example, four players in total, then six games are played: the first\r\nagainst the second, the first against the third, the first against the\r\nfourth, the second against the third, the second against the fourth and\r\nthe third against the fourth.Each of these games determines the winner\r\nin some way, but the rules are quite complicated, so we will not\r\ndescribe them here. All that matters is how many chips are paid out to\r\nthe winner. Let the first player’s card have the numbers a_1, a_2,\r\ndots, a_m, and the second player’s card b_1, b_2,\r\ndots, b_m. Then the winner of the game gets |a_1 - b_1| + |a_2 - b_2| +\r\ndots + |a_m - b_m| chips from the total pot, where |x| denotes the\r\nabsolute value of x.To determine the size of the total pot, it is\r\nnecessary to calculate the winners’ total winnings for all games. Since\r\nthere can be many cards in a deck and many players, you have been\r\nassigned to write a program that does all the necessary calculations.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <array>\n#include <bitset>\n#include <cassert>\n#include <cctype>\n#include <chrono>\n#include <cmath>\n#include <csetjmp>\n#include <csignal>\n#include <cstddef>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <forward_list>\n#include <fstream>\n#include <functional>\n#include <initializer_list>\n#include <iomanip>\n#include <iostream>\n#include <iterator>\n#include <limits>\n#include <list>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <random>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <string>\n#include <tuple>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\nusing namespace std;\n#define pr pair<int,int>\n#define mp make_pair\n#define _(x,y) x=(x+y)%mod\n#define ll long long\n\t#define int long long\ninline int read() {\n  char ch = getchar();\n  int x = 0, f = 1;\n  while (ch < '0' || ch > '9') {\n    if (ch == '-') f = -1;\n    ch = getchar();\n  }\n  while (ch >= '0' && ch <= '9') {\n    x = x * 10 + ch - '0';\n    ch = getchar();\n  }\n  return x * f;\n}\n\nchar s[1000000];\n//int a[1000000];\nint n,T,k,ans,m;\n\nvector<int>a[1000000];\nvector<int>e;\n\nsigned main(){\n\t\n\tint T=read();while(T--){\n\t\t\n\t\tn=read(),m=read(),ans=0;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\ta[i].resize(m+10);\n\t\t\tfor(int j=1;j<=m;j++)a[i][j]=read();\n\t\t}\n\t\t\n\t\tfor(int i=1;i<=m;i++){\n\t\t\te.clear();\n\t\t\tfor(int j=1;j<=n;j++)e.push_back(a[j][i]);\n\t\t\tsort(e.begin(),e.end());\n\t\t\tint sum=0,num=0;\n\t\t\tfor(int j=0;j<e.size();j++){\n\t\t\t\tans+=e[j]*num-sum;\n\t\t\t\tnum++,sum+=e[j];\n\t\t\t}\n\t\t}\n\t\tcout<<ans<<\"\\n\";\n\t} \n\t\n\t\n\t\n\t\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Playing in a Casino.json",
    "editorial_link": "https://codeforces.com//blog/entry/114523",
    "editorial": "You may notice that the problem can be solved independently for each\r\ncolumn of the input matrix. The answer is then the sum , where array\r\nrepresenting a column.Letâs try to calculate this sum for each column.\r\nLetâs sort all elements of the current column. Letâs calculate the\r\nanswer for some element in the sorted list. The answer for it will be ,\r\nwhere is the sum on the prefix. Why is this so? Because we say that this\r\nnumber is larger than the others and the modulus will then decompose as\r\n, and this is already easy to count.\r\n",
    "hint": []
}