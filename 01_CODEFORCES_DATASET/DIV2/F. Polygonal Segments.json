{
    "link": "https://codeforces.com//contest/1990/problem/F",
    "problemId": "2766782",
    "problem_idx": "F",
    "shortId": "1990F",
    "contest_number": "1990",
    "problem_submissions": {
        "E2": [
            271608671,
            271607138,
            271614388,
            271623848,
            271611159,
            271612390,
            271624654,
            271606284,
            271618767,
            271968367,
            271632009,
            271670295,
            271670041,
            271669953,
            271631571,
            271628300,
            271628735,
            271594502,
            271625522,
            271630429,
            271657508,
            271657312,
            271656848,
            271656620,
            271656329,
            271656057,
            271655884,
            271651026,
            271650811,
            271629403,
            271633667
        ],
        "E1": [
            271608290,
            271606824,
            271613580,
            271620803,
            271612480,
            271607245,
            271626074,
            271605565,
            271618674,
            271617329,
            271631880,
            271630922,
            271628223,
            271626847,
            271593184,
            271625989,
            271629147,
            271621610,
            271633499
        ],
        "D": [
            271584964,
            271585839,
            271588228,
            271580018,
            271775642,
            271574070,
            271621395,
            271597835,
            276025328,
            271618139,
            271579386,
            271580161,
            271592306,
            271593113,
            271583094,
            271588957,
            271599530,
            271586840,
            271606900,
            271582390,
            271597556,
            271601916
        ],
        "C": [
            271573202,
            271574801,
            271573394,
            271562726,
            271563640,
            271558919,
            271563245,
            276025316,
            271572711,
            271573247,
            271567920,
            271567517,
            271556748,
            271561905,
            271578677,
            271614383,
            271580098,
            271585887,
            271628007,
            271582340,
            271582612
        ],
        "B": [
            271544838,
            271560423,
            271562782,
            271545814,
            271553448,
            271544083,
            271550614,
            271557693,
            271552078,
            271550946,
            271576591,
            271554451,
            271552855,
            271607828,
            271555492,
            271573754,
            271547063,
            271567926,
            271553335
        ],
        "A": [
            271536644,
            271538330,
            271540486,
            271536626,
            271537675,
            271536719,
            271540682,
            271537637,
            271536282,
            271542554,
            271544093,
            271538945,
            271539444,
            271610786,
            271544740,
            271545994,
            271537196,
            271539275,
            271540687
        ],
        "F": [
            271738112,
            271736701,
            271736437,
            271736279,
            271732364,
            271623141
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131716",
    "editorial": "solution1Consider using a segment tree to solve this problem. We need to\r\nmerge the information of two intervals. First, we take the maximum value\r\nof the answers in the two intervals, and then calculate the polygon\r\nsegment spanning the two intervals.We notice that a local maximal\r\npolygon segment must satisfy (or ,). Define the suffix of the interval\r\nas a special suffix if and only if . The same principle applies to\r\nspecial prefixes. We can observe that there are at most special\r\nsuffixes, because the sum of one special suffix is at least twice the\r\nsum of the previous special suffix. Therefore, we can merge the special\r\nsuffixes of the left interval and the special prefixes of the right\r\ninterval (using the two-pointer algorithm) to obtain the answer spanning\r\nthe two intervals.Number of queries:\r\n",
    "name": "F. Polygonal Segments",
    "statement": "You are given an array a of size n.A segment [l, r](1\r\nle l < r\r\nle n) is called a segment only if the following conditions hold: (r-l+1)\r\ngeq 3; Considering a_l, a_{l+1},\r\nldots, a_r as side lengths, these sides can form a polygon with (r-l+1)\r\nsides. Process q queries of two types: \"\": find the length of the\r\nlongest segment among all segments [l_0,r_0] satisfying l\r\nle l_0\r\nle r_0\r\nle r. If there is no such segment, output -1 instead; \"\": assign a_i :=\r\nx.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#include<array>using namespace std;#define int long long//#define ull unsigned long long#define endl \"\\n\"#define PII pair<int,int>#define fi first#define y1 disf#define se secondconst int mod = 998244353;const int N = 810;int aa[200010];int tot, n;map<pair<int, int>, pair<int, int>>o;struct p{\tint sum;\tpair<int, int>ok;\tint sjc;}tr[800010];p operator+(const p& a, const p& b) {\treturn { a.sum + b.sum, max(a.ok,b.ok),max(a.sjc, b.sjc) };}void build(int id, int l, int r){\tif (l == r)\t{\t\ttr[id] = { aa[l],{aa[l],l},0 };\t\treturn;\t}\tint mid = l + r >> 1;\tbuild(id * 2, l, mid);\tbuild(id * 2 + 1, mid + 1, r);\ttr[id] = tr[id * 2] + tr[id * 2 + 1];}p cx(int id, int l, int r, int l1, int r1){\tif (l == l1 && r == r1)\t\treturn tr[id];\tint mid = l + r >> 1;\tif (mid >= r1)\t\treturn cx(id * 2, l, mid, l1, r1);\telse if (mid < l1)\t\treturn cx(id * 2 + 1, mid + 1, r, l1, r1);\telse\t\treturn cx(id * 2, l, mid, l1, mid) + cx(id * 2 + 1, mid + 1, r, mid + 1, r1);}void change(int id, int l, int r, int wz, int z){\tif (l == r)\t{\t\ttr[id] = { z,{z,l},tot };\t\treturn;\t}\tint mid = l + r >> 1;\tif (mid >= wz)\t\tchange(id * 2, l, mid, wz, z);\telse\t\tchange(id * 2 + 1, mid + 1, r, wz, z);\ttr[id] = tr[id * 2] + tr[id * 2 + 1];}\u00a0int ss(int l, int r){\tif (r - l + 1 <= 2) {\t\treturn -1;\t}\tp k = cx(1, 1, n, l, r);\tif (o.count({ l,r }) && o[{l, r}].second >= k.sjc)\t{\t\treturn o[{l, r}].first;\t}\tauto [sum, mx1, mx2] = k;\tif (mx1.first * 2 < sum) {\t\to[{l, r}] = { r - l + 1,tot };\t\treturn r - l + 1;\t}\tint ans = max(ss(l, mx1.second - 1), ss(mx1.second + 1, r));\to[{l, r}] = { ans, tot };\treturn ans;}void solve(){\tint q;\ttot = 0;\tcin >> n >> q;\tfor (int i = 1; i <= n; i++)\t\tcin >> aa[i];\tbuild(1, 1, n);\to.clear();\twhile (q--)\t{\t\tint z;\t\tcin >> z;\t\tif (z == 1)\t\t{\t\t\tint l, r;\t\t\tcin >> l >> r;\t\t\tcout << ss(l, r) << endl;\t\t}\t\telse\t\t{\t\t\ttot++;\t\t\tint x;\t\t\tint y;\t\t\tcin >> x >> y;\t\t\tchange(1, 1, n, x, y);\t\t}\t}}signed main(){\tios::sync_with_stdio(0);\tcin.tie(0);\tcout.tie(0);\tint T = 1;\tcin >> T;\twhile (T--)\t\tsolve();}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "data structures",
        "divide and conquer",
        "dp",
        "greedy",
        "two pointers"
    ],
    "dificulty": "2800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Polygonal Segments.json"
}