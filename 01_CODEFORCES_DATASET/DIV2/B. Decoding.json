{
    "link": "https://codeforces.com//contest/746/problem/B",
    "problemId": "85370",
    "problem_idx": "B",
    "shortId": "746B",
    "contest_number": "746",
    "problem_submissions": {
        "F": [
            23098160,
            23101734,
            23098656,
            23102651,
            23103415,
            23107961,
            23097485,
            23103112,
            23103543,
            23134726,
            23104852,
            23131476
        ],
        "G": [
            23093374,
            23095345,
            23096484,
            23099554,
            23094331,
            23098793,
            32644514,
            23097257,
            23097589,
            23088737,
            23098418,
            23099935,
            23101255,
            23098493,
            23095437,
            23098070,
            23097715,
            23102940,
            23099714,
            23102329,
            23100307
        ],
        "E": [
            23090983,
            23091838,
            23090400,
            23090385,
            23091224,
            23095595,
            23092637,
            23090974,
            23092694,
            23093218,
            23092131,
            23090847,
            23094473,
            23098598,
            23094014,
            23142601,
            23096689,
            23092749,
            23095909,
            23093965,
            23096216
        ],
        "C": [
            23089009,
            23086489,
            23093136,
            23087647,
            23090881,
            23086795,
            23086617,
            23094723,
            23086814,
            23087320,
            23089539,
            23108446,
            23092756,
            23088603,
            23090345,
            23087808,
            23091627
        ],
        "D": [
            23086805,
            23088293,
            23086244,
            23094627,
            23088889,
            23093685,
            23088867,
            23088313,
            23096227,
            23088723,
            23089318,
            23104824,
            23090867,
            23090879,
            23091937,
            23088754,
            23089647,
            23091296,
            23088886,
            23089358
        ],
        "B": [
            23084224,
            23084449,
            23084370,
            23084955,
            23085227,
            23087278,
            23084159,
            23084283,
            23090451,
            23083745,
            23084649,
            23085347,
            23084771,
            23089523,
            23085956,
            23085476,
            23085206,
            23084905,
            23085967
        ],
        "A": [
            23082169,
            23082385,
            23081947,
            23082691,
            23082163,
            23085385,
            23081965,
            23082429,
            23082420,
            23082009,
            23082118,
            23082810,
            23086953,
            23088467,
            23082662,
            23082884,
            23082308,
            23082652,
            23082888
        ]
    },
    "name": "B. Decoding",
    "statement": "Polycarp is mad about coding, that is why he writes Sveta encoded\r\nmessages. He calls the in a word the letter which is in the middle of\r\nthe word. If the word\u2019s length is even, the median letter is the left of\r\nthe two middle letters. In the following examples, the median letter is\r\nhighlighted: , . If the word consists of single letter, then according\r\nto above definition this letter is the median letter. Polycarp encodes\r\neach word in the following way: he writes down the median letter of the\r\nword, then deletes it and repeats the process until there are no letters\r\nleft. For example, he encodes the word as .You are given an encoding of\r\nsome word, your task is to decode it.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define ld long double\n#define N ((ll)301*1000)\n#define INF ((ll)2e9)\n#define MOD ((ll)1e9+7)\nll tavan(ll x,ll y){ll res=1;while(y){res*=y%2?x:1;res%=MOD;x*=x;x%=MOD;y/=2;}return res;}\n\nll n;\nstring s;\nchar ans[N];\n\nint main()\n{\n    ios_base::sync_with_stdio(0);cin.tie(0);\n    cin>>n>>s;\n    ll k=n;\n    for(int i=0;i<n;i++)ans[i]='.';\n    for(int i=0;i<s.size();i++)\n    {\n    \tll x=(k-1)/2;\n    \tfor(int j=0;j<n;j++)\n    \t{\n    \t\tif(x==0 && ans[j]=='.'){ans[j]=s[i];break;}\n    \t\tif(ans[j]=='.')x--;\n\t\t}\n    \tk--;\n\t}\n\tfor(int i=0;i<n;i++)cout<<ans[i];\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Decoding.json",
    "editorial_link": "https://codeforces.com//blog/entry/49160",
    "editorial": "To find the answer we can iterate through the given string from the left\r\nto the right and add each letter in the answer string one letter to the\r\nbegin, next letter to the end, next letter to begin and so on. If is\r\neven than the first letter must be added to the begin and the second\r\nletter to the end. In the other case, the first letter to the end,\r\nsecond to the begin. We need to make it until we do not add all letters\r\nfrom the given string.\r\n"
}