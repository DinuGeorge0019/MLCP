{
    "link": "https://codeforces.com//contest/1195/problem/C",
    "problemId": "373878",
    "problem_idx": "C",
    "shortId": "1195C",
    "contest_number": "1195",
    "problem_submissions": {
        "F": [
            57231940,
            57228583,
            57230665,
            57230760,
            57233707,
            57236452,
            57231972,
            57234436,
            57234600,
            57238063,
            57234775,
            57310298,
            57228874,
            57290272,
            57225125
        ],
        "E": [
            57221608,
            57223793,
            57222513,
            57225684,
            57222906,
            57215919,
            57226202,
            57226594,
            57228678,
            57225929,
            57227306,
            57224920,
            57217658,
            57221326,
            57221813,
            57226168,
            57222930,
            57258569,
            57224143
        ],
        "D1": [
            57217173,
            57217670,
            57213566,
            57216495,
            57217668,
            57218460,
            57220879,
            57217890,
            57215569,
            57210215,
            57222516,
            57213030,
            57213769,
            57209778,
            57215844,
            57218863,
            57212403,
            57215924,
            57215516,
            57217529
        ],
        "D2": [
            57216895,
            57217496,
            57213368,
            57216364,
            57217535,
            57229402,
            57220576,
            57217862,
            57215401,
            57216742,
            57222653,
            57217606,
            57213863,
            57214793,
            57215958,
            57218634,
            57215884,
            57216070,
            57229811,
            57216866
        ],
        "C": [
            57208411,
            57206363,
            57208350,
            57208286,
            57212089,
            57204975,
            57209742,
            57209624,
            57207426,
            57206667,
            57209966,
            57209554,
            57208702,
            57205876,
            57208547,
            57209651,
            57208031,
            57210123,
            57210767,
            57209324
        ],
        "B": [
            57206484,
            57204728,
            57206113,
            57205986,
            57206681,
            57203895,
            57206510,
            57205624,
            57205603,
            57204561,
            57207235,
            57206451,
            57206143,
            57204517,
            57206504,
            57207159,
            57205738,
            57206747,
            57207265
        ],
        "A": [
            57203812,
            57203699,
            57205723,
            57203885,
            57204288,
            57203645,
            57204262,
            57204010,
            57204256,
            57203704,
            57203968,
            57204725,
            57203853,
            57203719,
            57204238,
            57204466,
            57203857,
            57203680,
            57204939,
            57203939
        ]
    },
    "name": "C. Basketball Exercise",
    "statement": "Finally, a basketball court has been opened in SIS, so Demid has decided\r\nto hold a basketball exercise session. 2\r\ncdot n students have come to Demid’s exercise session, and he lined up\r\nthem into two rows of the same size (there are exactly n people in each\r\nrow). Students are numbered from 1 to n in each row in order from left\r\nto right. Now Demid wants to choose a team to play basketball. He will\r\nchoose players from left to right, and the index of each chosen player\r\n(excluding the first one ) will be strictly greater than the index of\r\nthe previously chosen player. To avoid giving preference to one of the\r\nrows, Demid chooses students in such a way that no consecutive chosen\r\nstudents belong to the same row. The first student can be chosen among\r\nall 2n students (there are no additional constraints), and a team can\r\nconsist of any number of students. Demid thinks, that in order to\r\ncompose a perfect team, he should choose students in such a way, that\r\nthe total height of all chosen students is maximum possible. Help Demid\r\nto find the maximum possible total height of players in a team he can\r\nchoose.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N = 100005;\n\nint a[2][N];\nLL f[2][N];\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) scanf(\"%d\", a[0]+i);\n    for (int i = 1; i <= n; i++) scanf(\"%d\", a[1]+i);\n    f[0][0] = f[1][0] = 0;\n    for (int i = 1; i <= n; i++) {\n        for (int j = 0; j <= 1; j++) {\n            int k = j ^ 1;\n            f[j][i] = max(f[j][i-1], f[k][i-1] + a[j][i]);\n        }\n    }\n    printf(\"%lld\\n\", max(f[0][n], f[1][n]));\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Basketball Exercise.json",
    "editorial_link": "https://codeforces.com/blog/entry/68471",
    "editorial": "This is pretty standard dynamic programming problem. Let be the maximum\r\ntotal height of team members if the last student taken has the position\r\n, is the same but the last student taken has the position and the same\r\nbut we didnât take any student from position . Transitions are pretty\r\neasy: ; ; . This dynamic programming can be calculated almost without\r\nusing memory because we need only the -th row to calculate the -th row\r\nof this dp. Moreover, we donât actually need if we will add transitions\r\nand . These transition will change our dp a bit. Now is the maximum\r\ntotal height of the team members if the last student taken has the\r\nposition or less. The same with . The answer is .Time complexity: .\r\n",
    "hint": []
}