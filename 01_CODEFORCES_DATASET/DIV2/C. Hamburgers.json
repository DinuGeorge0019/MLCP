{"link": "https://codeforces.com//contest/371/problem/C", "problemId": "4153", "problem_idx": "C", "shortId": "371C", "contest_number": "371", "problem_submissions": {"E": [5386691, 5385652, 5387391, 5387322, 5390985, 5387784, 5383050, 5388200, 5387733, 5386214, 5386292, 5388053, 5385063, 5389504, 5394788, 5402945], "D": [5385132, 5387024, 5385113, 5383557, 5389960, 5384908, 5386335, 5385491, 5385734, 5387644, 5385157, 5390842, 5385613, 5388772, 5383171, 5383787, 5383978, 5383957], "C": [5383277, 5383807, 5383992, 5381888, 5382446, 5383936, 5383664, 5385279, 5384741, 5383042, 5382860, 5382943, 5382483, 5383152, 5382630, 5382839], "B": [5381953, 5382093, 5382443, 5385168, 5381736, 5388764, 5382596, 5382957, 5382638, 5388559, 5381967, 5382051, 5381711, 5381795, 5381475, 5381931], "A": [5381375, 5381309, 5381281, 5382547, 5381148, 5381302, 5382094, 5382203, 5381364, 5381179, 5388604, 5381203, 5381211, 5381180, 5381177, 5381327]}, "name": "C. Hamburgers", "statement": "Polycarpus loves hamburgers very much. He especially adores the\r\nhamburgers he makes with his own hands. Polycarpus thinks that there are\r\nonly three decent ingredients to make hamburgers from: a bread, sausage\r\nand cheese. He writes down the recipe of his favorite \"Le Hamburger de\r\nPolycarpus\" as a string of letters \u201d (bread), \u201d (sausage) \u201d (cheese).\r\nThe ingredients in the recipe go from bottom to top, for example, recipe\r\n\"\" represents the hamburger where the ingredients go from bottom to top\r\nas bread, sausage, cheese, bread and sausage again.Polycarpus has pieces\r\nof bread, pieces of sausage and pieces of cheese in the kitchen.\r\nBesides, the shop nearby has all three ingredients, the prices are\r\nrubles for a piece of bread, for a piece of sausage and for a piece of\r\ncheese.Polycarpus has rubles and he is ready to shop on them. What\r\nmaximum number of hamburgers can he cook? You can assume that Polycarpus\r\ncannot break or slice any of the pieces of bread, sausage or cheese.\r\nBesides, the shop has an unlimited number of pieces of each ingredient.\r\n", "solutions": ["#include <iostream>\n#include <fstream>\n#include <cstdio>\n#include <cassert>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <stack>\n#include <set>\n#include <string>\n#include <utility>\n#include <cstdlib>\n#include <algorithm>\n#include <cstring>\n#include <ctime>\n#include <vector>                              \nusing namespace std;\n#define fname \"\"\n#define ull unsigned long long\n#define ll long long\n#define INF 1000*1000*1000\n#define f first\n#define s second\n#define mp make_pair\n#define pb push_back\n#define sz size()\nconst int N = 1000;\nll ps, pc, pb, nb, nc, ns, ans = 0, price, needs, needb, needc;\nstring s;\nbool ok (ll x) {\n\tll tb = x * needb;\n\tll ts = x * needs;\n\tll tc = x * needc;\n\ttb = max(0ll, tb - nb);\n\tts = max(0ll, ts - ns);\n\ttc = max(0ll, tc - nc);\n\tif (price >= tb * pb + ts * ps + tc * pc) return 1;\n\treturn 0;\n}\nint main ()\n{\t\n\t#ifndef ONLINE_JUDGE\n\tfreopen (fname\"in\",\"r\",stdin);\n\tfreopen (fname\"out\",\"w\",stdout);\n\t#endif\n\n\tcin >> s;\n\n\tfor (int i = 0; i < s.size(); i ++ ) {\n\t\tif (s[i] == 'B') ++needb;\n\t\telse if (s[i] == 'S') ++ needs;\n\t\telse ++ needc;\n\t}\n\t\n\tcin >> nb >> ns >> nc;\n\tcin >> pb >> ps >> pc >> price;\n\n\tll l = 0, r = 1000000000000000ll;\n\n\twhile (l <= r) {\n\t\tll mid = (l + r) >> 1;\n\t\tif (ok(mid)) {\n\t\t\tans = max(ans, mid);\n\t\t\tl = mid + 1;\n\t\t}\n\t\telse r = mid - 1;\n\t}\n\n\tcout << ans;\n\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["binary search", "brute force"], "dificulty": "1600", "interactive": false}