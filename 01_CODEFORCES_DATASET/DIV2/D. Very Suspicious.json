{
    "link": "https://codeforces.com//contest/1670/problem/D",
    "problemId": "1390324",
    "problem_idx": "D",
    "shortId": "1670D",
    "contest_number": "1670",
    "problem_submissions": {
        "E": [
            156100998,
            156104485,
            156108916,
            156107756,
            156100648,
            156100656,
            156115463,
            156115332,
            156106434,
            156105992,
            156106756,
            156102783,
            156095228,
            156095823,
            156107708,
            156123887
        ],
        "D": [
            156095484,
            156091337,
            156102106,
            156097049,
            156094743,
            156093318,
            156097826,
            156112660,
            156093899,
            156099166,
            156101898,
            156095357,
            156101001,
            156110723,
            156092669,
            156094972,
            156093548,
            156098200
        ],
        "B": [
            156093818,
            156081627,
            156082334,
            156089012,
            156085695,
            156086167,
            156087956,
            156081931,
            156124817,
            156088947,
            156092504,
            156086895,
            156084557,
            156119888,
            156124153,
            156082723,
            156086168,
            156084111,
            156087742
        ],
        "F": [
            156092264,
            156098593,
            156099277,
            156103760,
            156113156,
            156116884,
            156103788,
            156096373,
            156116972,
            156112838,
            156904481,
            156114948,
            156119689,
            156110847,
            156129976,
            156106292,
            156119874,
            156103026,
            156115147,
            156111724,
            156108733
        ],
        "C": [
            156085904,
            156084420,
            156090953,
            156093920,
            156089470,
            156090841,
            156091539,
            156092125,
            156083813,
            156094804,
            156089625,
            156091655,
            156117087,
            156087179,
            156096140,
            156089472,
            156123873,
            156087762,
            156092456
        ],
        "A": [
            156079702,
            156080088,
            156079627,
            156079602,
            158677746,
            156079680,
            156081873,
            156080010,
            156079669,
            156079762,
            156080064,
            156079483,
            156080211,
            156085709,
            156079540,
            156080023,
            156096396,
            156080412,
            156082179
        ]
    },
    "name": "D. Very Suspicious",
    "statement": "Sehr Sus is an infinite hexagonal grid as pictured below, controlled by\r\nMennaFadali, ZerooCool and Hosssam.They love equilateral triangles and\r\nwant to create n equilateral triangles on the grid by adding some\r\nstraight lines. The triangles must all be empty from the inside (in\r\nother words, no straight line or hexagon edge should pass through any of\r\nthe triangles).You are allowed to add straight lines parallel to the\r\nedges of the hexagons. Given n, what is the minimum number of lines you\r\nneed to add to create at least n equilateral triangles as described?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\ninline int cal(int x)\n{\n\tint a=x/3,b=x/3,c=x/3;\n\tif(a+b+c<x) ++a;\n\tif(a+b+c<x) ++b;\n\tif(a+b+c<x) ++c;\n\treturn (a*b+b*c+c*a)*2;\n}\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tint T;\n\tcin >> T;\n\twhile(T--)\n\t{\n\t\tint n;\n\t\tcin >> n;\n\t\tint x=0,y=0,z=0,flag=0;\n\t\tint l=0,r=1e5,ans=0;\n\t\twhile(l<=r)\n\t\t{\n\t\t\tint mid=(l+r)/2;\n\t\t\tif(cal(mid)>=n) ans=mid,r=mid-1;\n\t\t\telse l=mid+1;\n\t\t}\n\t\tcout << ans << \"\\n\";\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "geometry",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Very Suspicious.json",
    "editorial_link": "https://codeforces.com//blog/entry/102579",
    "editorial": "We can notice that there are different slopes in which we can draw a\r\nline, and we can also notice that drawing the lines exactly on the edges\r\nof the hexagons will result in the creation of equilateral triangles at\r\neach intersection of lines, so we can say that:Now we only need to find\r\na way to draw the lines such that it maximizes the number of\r\nintersections. The best way to do that is to keep the number of lines on\r\nall slopes as close as possible (the proof will be explained at the\r\nbottom). One way to do so is to add the lines once at each slope then\r\nrepeat.Let\u00e2\u0080\u0099s say that slopes are numbered , , and , so we will add the\r\nlines as follows and so on. The increase in the intersection will be the\r\nnumber of lines in the other two slopes added together. It will be as\r\nfollows : If we separate that into groups of 3 we will get The sum of\r\nthe groups is To get the sum of the first groups it will be . So, to get\r\nthe number of intersections using lines we will first find the number of\r\ncomplete groups which is and then loop over the last group to find the\r\ntotal number of intersections.Now that we have a way to find the number\r\nof equilateral triangles created by lines we can find the number of\r\nlines needed to get equilateral triangles by using binary search. that\r\nthe best way to maximize the number of intersections is to keep the\r\nnumber of lines on all slopes as close as possible:Imagine a case in\r\nwhich the difference between the lines in two slops is more than lines,\r\nnow we can see that if we moved one line from the larger group to the\r\nsmaller we will obtain more intersections because after moving, the\r\nintersections with the -rd line will be the same and will not be\r\naffected and the intersection between the slopes will decrease by the\r\nsize of the smaller group and increased by the size of the larger group\r\nminus so overall the intersections will increase by at least so that\r\nproves that we can\u00e2\u0080\u0099t have any difference more than and the groups must\r\nbe as close as possible.\r\n"
}