{
    "link": "https://codeforces.com//contest/864/problem/B",
    "problemId": "124134",
    "problem_idx": "B",
    "shortId": "864B",
    "contest_number": "864",
    "problem_submissions": {
        "F": [
            30716015,
            30722402,
            30723225,
            30725964,
            30739740
        ],
        "E": [
            30710484,
            30714856,
            30715154,
            30723143,
            30713586,
            30730131,
            30715426,
            30713107,
            30711368,
            30718758,
            30718806,
            30718477,
            30714033,
            30714286,
            30715582,
            30713724,
            30713502,
            30738356,
            30717401,
            30713777,
            30716171,
            30715998
        ],
        "D": [
            30707520,
            30709478,
            30708092,
            30709303,
            30709255,
            30703697,
            30709397,
            30707026,
            30712505,
            30709061,
            30711433,
            30710302,
            30710827,
            30707816,
            30706829,
            30708611,
            30705451,
            30707869,
            30706715,
            30708055
        ],
        "C": [
            30705528,
            30707197,
            30704462,
            30712744,
            30706231,
            30710658,
            30706244,
            30713235,
            30708256,
            30705517,
            30708760,
            30706819,
            30708546,
            30705215,
            30711574,
            30711162,
            30709362,
            30710824,
            30709705,
            30706376
        ],
        "B": [
            30703070,
            30703231,
            30706404,
            30704293,
            30702498,
            30701721,
            30702746,
            30704552,
            30702131,
            30702339,
            30704226,
            30703770,
            30702687,
            30701947,
            30704004,
            30702177,
            30703567,
            30708307,
            30703521,
            30704217
        ],
        "A": [
            30701411,
            30701464,
            30701236,
            30703640,
            30701582,
            30701091,
            30701629,
            30704524,
            30701158,
            30701293,
            30701284,
            30701912,
            30701498,
            30701066,
            30701818,
            30701174,
            30701687,
            30701585,
            30701750,
            30701329
        ]
    },
    "name": "B. Polycarp and Letters",
    "statement": "Polycarp loves lowercase letters and dislikes uppercase ones. Once he\r\ngot a string consisting only of lowercase and uppercase Latin\r\nletters.Let be a set of positions in the string. Let\u2019s call it if\r\nfollowing conditions are met: letters on positions from in the string\r\nare all distinct and lowercase; there are no uppercase letters in the\r\nstring which are situated between positions from (i.e. there is no such\r\nthat is an uppercase letter, and for some and from ). Write a program\r\nthat will determine the maximum number of elements in a set of\r\npositions.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cstdlib>\n#include<ctime>\n#include<utility>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> pii;\nchar s[1010];\nint c[27];\nint main()\n{\n\tint n;\n\tscanf(\"%d%s\",&n,s+1);\n\tint i;\n\tint ans=0;\n\tint j=0;\n\tint k;\n\tfor(i=1;i<=n;i++)\n\t\tif(s[i]>='A'&&s[i]<='Z')\n\t\t{\n\t\t\tmemset(c,0,sizeof c);\n\t\t\tint res=0;\n\t\t\tfor(k=j+1;k<=i-1;k++)\n\t\t\t{\n\t\t\t\tif(!c[s[k]-'a'+1])\n\t\t\t\t\tres++;\n\t\t\t\tc[s[k]-'a'+1]++;\n\t\t\t}\n\t\t\tans=max(ans,res);\n\t\t\tj=i;\n\t\t}\n\tmemset(c,0,sizeof c);\n\tint res=0;\n\tfor(k=j+1;k<=n;k++)\n\t{\n\t\tif(!c[s[k]-'a'+1])\n\t\t\tres++;\n\t\tc[s[k]-'a'+1]++;\n\t}\n\tans=max(ans,res);\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "strings"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Polycarp and Letters.json",
    "editorial_link": "https://codeforces.com//blog/entry/54765",
    "editorial": "Let\u00e2\u0080\u0099s solve the given problem in the following way. We will iterate\r\nthrough the letters in the string in order from left to right.If we are\r\nin position and the next letter is uppercase we skip it. In the other\r\ncase, we need to create and put letter in it. After that we iterate\r\nthrough string to the right until we do not met uppercase letter or\r\nuntil the string does not ended. We put in each new lowercase letter.\r\nAfter we met uppercase letter (let position of this letter is ), or\r\nstring is ended, we update the answer with the number of elements in ,\r\nand repeat described algorithm starting from position .\r\n"
}