{
    "link": "https://codeforces.com//contest/336/problem/E",
    "problemId": "3390",
    "problem_idx": "E",
    "shortId": "336E",
    "contest_number": "336",
    "problem_submissions": {
        "B": [
            4252446,
            4252041,
            4252175,
            4255383,
            4250433,
            4250826,
            4251128,
            4257354,
            4249500,
            4257697,
            4249279,
            4251826,
            4253179,
            4253015,
            4250519,
            4253007,
            4257525,
            4251753,
            4250638,
            4250520
        ],
        "D": [
            4251068,
            4253042,
            4254798,
            4253278,
            4254794,
            4256123,
            4256029,
            4253747,
            4256423,
            4258039,
            4253197,
            4257068,
            4261819,
            4257260,
            4262308
        ],
        "C": [
            4249560,
            4248916,
            4250118,
            4250374,
            4251654,
            4252453,
            4253538,
            4250581,
            4251537,
            4250614,
            4255076,
            4251620,
            4249815,
            4250761,
            4250492,
            4252198,
            4251350,
            4249415,
            4252572,
            4253045
        ],
        "A": [
            4247902,
            4248269,
            4249017,
            4250360,
            4247866,
            4277601,
            4277596,
            4277589,
            4248086,
            4247723,
            4248114,
            4248490,
            4249405,
            4257844,
            4256193,
            4247759,
            4247857,
            4248505,
            4247955,
            4248126,
            4249141,
            4250100,
            4248707,
            4248271
        ],
        "E": [
            4275638
        ]
    },
    "name": "E. Vasily the Bear and Painting Square",
    "statement": "Vasily the bear has two favorite integers and and a pencil. Besides,\r\nhe\u2019s got jars with different water color paints. All jars are numbered\r\nin some manner from to , inclusive. The jar number contains the paint of\r\nthe -th color. Initially the bear took a pencil and drew four segments\r\non the coordinate plane. All of them end at point . They begin at: , , ,\r\n. Then for each , the bear drew two squares. The first square has the\r\nfollowing vertex coordinates: , , , . The second square has the\r\nfollowing vertex coordinates: , , , . After that, the bear drew another\r\nsquare: , , , . All points mentioned above form the set of points .The\r\nbear decided to paint the resulting picture in moves. The -th move\r\nconsists of the following stages: The bear chooses 3 distinct points in\r\nset so that any pair of the chosen points has a segment on the picture\r\nbetween them. The chosen points and segments mark the area that mustn\u2019t\r\ncontain any previously painted points. The bear paints the area bounded\r\nby the chosen points and segments the -th color. Note that after the -th\r\nmove some parts of the picture can stay unpainted.The bear asked you to\r\ncalculate, how many distinct ways there are to paint his picture. A way\r\nto paint the picture is a sequence of three-element sets of points he\r\nchose on each step. Two sequences are considered distinct if there is\r\nsuch number (, that the -th members of these sequences do not coincide\r\nas sets. As the sought number can be rather large, you only need to\r\ncalculate the remainder after dividing it by number ().\r\n",
    "solutions": [
        "#include <algorithm>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#define int64 long long\n#define mod 1000000007\n#define N 210\n#define For(i,x,y) for (i=x;i<=y;i++)\nusing namespace std;\nconst int p[5]={8,6,4,2,4},h[5]={4,2,1,0,0};\nint i,j,k,n,m;\nint f[N][N][5][3],v[N][N][5][3];\nint64 C[N][N];\ninline void A(int64 &x,int64 y) {\n\tx=(x+y)%mod;\n}\ninline int64 M(int64 x,int64 y) {\n\treturn x*y%mod;\n}\nint64 cal(int n,int k,int cur,int type) {\n\tif (!k) return 1;\n\tif (cur==5) return 0;\n\tif (v[n][k][cur][type]) return f[n][k][cur][type];\n\tv[n][k][cur][type]=1;\n\tint i,j; int64 an=0;\n\tif (type==0) {\n\t\tif (!n) return 0;\n\t\tint x=cur==4?2:4-cur;\n\t\tFor(i,0,min(x,k)) A(an,M(cal(n-1,k-i,cur,2),C[x][i]));\n\t} else if (type==1) {\n\t\tif (!n) return 0;\n\t\tint x=p[cur],y=h[cur];\n\t\tFor(i,0,x)For(j,0,y) if (i+2*j<=x&&i+j<=k)\n\t\t\tA(an,M(cal(n,k-i-j,cur,0),C[y][j]*C[x-2*j][i]%mod));\n\t} else {\n\t\tan=cal(n,k,cur,1);\n\t\tif (cur==0) {\n\t\t\tif (k>0) A(an,cal(n,k-1,1,1)*4+cal(n,k-1,2,1)*4);\n\t\t\tif (k>1) A(an,cal(n,k-2,2,1)*4+cal(n,k-2,4,1)*2+cal(n,k-2,3,1)*8+\n\t\t\t\tcal(n,k-2,5,1)*2);\n\t\t\tif (k>2) A(an,cal(n,k-3,3,1)*4+cal(n,k-3,5,1)*4);\n\t\t\tif (k>3) A(an,cal(n,k-4,5,1));\n\t\t} else if (cur==1) {\n\t\t\tif (k>0) A(an,cal(n,k-1,2,1)*2+cal(n,k-1,3,1)*2+cal(n,k-1,4,1));\n\t\t\tif (k>1) A(an,cal(n,k-2,3,1)*3+cal(n,k-2,5,1)*2);\n\t\t\tif (k>2) A(an,cal(n,k-3,5,1));\n\t\t} else if (cur==2) {\n\t\t\tif (k>0) A(an,cal(n,k-1,3,1)*2+cal(n,k-1,5,1));\n\t\t\tif (k>1) A(an,cal(n,k-2,5,1));\n\t\t} else if (cur==4) {\n\t\t\tif (k>0) A(an,cal(n,k-1,3,1)*2);\n\t\t\tif (k>1) A(an,cal(n,k-2,5,1));\n\t\t} else if (k>0) A(an,cal(n,k-1,5,1));\n\t}\n\tf[n][k][cur][type]=an;\n\treturn an;\n}\nint main() {\n\tscanf(\"%d%d\",&n,&k);\n\tFor(i,0,200) {\n\t\tC[i][0]=1;\n\t\tFor(j,1,i) C[i][j]=(C[i-1][j-1]+C[i-1][j])%mod;\n\t}\n\tint64 an=cal(n,k,0,2);\n\tFor(i,1,k) an=an*i%mod;\n\tprintf(\"%I64d\\n\",an);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "combinatorics",
        "dp",
        "implementation"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Vasily the Bear and Painting Square.json",
    "editorial_link": "https://codeforces.com//blog/entry/8574",
    "editorial": "Pretty tough problem. Consider following DP number of ways to take\r\ntriangles, if we have squares. auxiliary values. Answer will be . means\r\ntype of transitions we make. amount of used quarters ( 2 quarters,\r\nquarters). It is important to distinguish from , because amount of\r\nconsecutive pairs of unused quarters is different. About transitions.\r\nIterate amount of pairs (considering ) of consecutive quarters that we\r\nwill take. It is important for them to have no common quarters. We can\r\nget two pairs only in case . Let\u00e2\u0080\u0099s also take some quarters that are not\r\nin pairs. Calculate number of ways to select corresponding triangles and\r\nadd to the current DP-state value . For better understanding of check my\r\nsolution (). . Now we take triangles at the borders (number of squares\r\nis 2*lvl + 1). \"at the borders\" means marked X, see the picture. Iterate\r\namount of pairs (considering ) of consecutive triangles we take. It is\r\nimportant for pairs to have no common triangles. Let\u00e2\u0080\u0099s also take some\r\ntriangles that are not in pairs. Calculate number of ways to select\r\ncorresponding triangles and add to the current DP-state value . . We\r\ntake triangles at the borders (number of squares is 2*lvl). \"at the\r\nborders\" means marked X, see the picture. Take some triangles, not in\r\npairs. Calculate number of ways to select corresponding triangles and\r\nadd to current DP-state value . Starting values: , , . Author\u00e2\u0080\u0099s solution\r\n"
}