{
    "link": "https://codeforces.com//contest/1079/problem/D",
    "problemId": "257674",
    "problem_idx": "D",
    "shortId": "1079D",
    "contest_number": "1079",
    "problem_submissions": {
        "E": [
            45934267,
            45936636,
            45941806,
            45937565,
            45939333,
            45937199,
            45940743,
            45942158,
            45941402,
            46104036,
            45963146,
            45940904,
            45946313
        ],
        "D": [
            45931502,
            45929943,
            45928202,
            45933972,
            45932585,
            45928454,
            45926585,
            45928651,
            45928898,
            45928856,
            45930400,
            45930743,
            45929548,
            45929551,
            45931333,
            45929717,
            45931175,
            45930151,
            45933096
        ],
        "C": [
            45927571,
            45925544,
            45925366,
            45932689,
            45926037,
            45924078,
            45924314,
            45925482,
            45926594,
            45925976,
            45921399,
            45924312,
            45926518,
            45925797,
            45924767,
            45926026,
            45925780,
            45927583,
            45925054
        ],
        "B": [
            45922164,
            45922160,
            45923256,
            45930687,
            45951085,
            45921961,
            45921919,
            45922366,
            45922028,
            45923115,
            45924050,
            45922108,
            45922170,
            45923305,
            45921946,
            45922922,
            45922642,
            45922803,
            45922288
        ],
        "A": [
            45920252,
            45920257,
            45923913,
            45925594,
            45920970,
            45920420,
            45920504,
            45920483,
            45920269,
            45921357,
            45926632,
            45920349,
            45920289,
            45920409,
            45920196,
            45920480,
            45920373,
            45920574,
            45920303
        ],
        "F": [
            46007936,
            46007802,
            46007752,
            45995791,
            45995576,
            45995489,
            45995039,
            45994859,
            45992076
        ],
        "G": [
            45942230
        ]
    },
    "name": "D. Barcelonian Distance",
    "statement": "In this problem we consider a very simplified model of Barcelona\r\ncity.Barcelona can be represented as a plane with streets of kind x = c\r\nand y = c for every integer c (that is, the rectangular grid). However,\r\nthere is a detail which makes Barcelona different from Manhattan. There\r\nis an avenue called Avinguda Diagonal which can be represented as a the\r\nset of points (x, y) for which ax + by + c = 0.One can walk along\r\nstreets, including the avenue. You are given two integer points A and B\r\nsomewhere in Barcelona. Find the minimal possible distance one needs to\r\ntravel to get to B from A.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define x first\n#define y second\nint main()\n{\n    long long a, b, c;\n    long double x1,x2,y1,y2;\n    cin >> a >> b >> c;\n    cin >>x1 >> y1 >> x2 >> y2;\n    vector<pair<pair<long double,long double>, long double>> v1;\n    vector<pair<pair<long double,long double>, long double>> v2;\n    long double ans = abs(x1 - x2) + abs(y1 - y2);\n    if(b != 0)\n    {\n        long double y3 = (-c - a * x1) * 1.0 / b;\n        v1.push_back({{x1,y3}, abs(y1 - y3)});\n    }\n    else\n    {\n        if(-c == a * x1)\n            v1.push_back({{x1,y1}, 0});\n    }\n    if(b != 0)\n    {\n        long double y3 = (-c - a * x2) * 1.0 / b;\n        v2.push_back({{x2,y3}, abs(y2 - y3)});\n    }\n    else\n    {\n        if(-c == a * x2)\n            v2.push_back({{x2,y2}, 0});\n    }\n\n    if(a != 0)\n    {\n        long double x3 = (-c - b * y1) * 1.0 / a;\n        v1.push_back({{x3, y1}, abs(x1 - x3)});\n    }\n    else\n    {\n        if(-c == b * y1)\n            v1.push_back({{x1,y1}, 0});\n    }\n    if(a != 0)\n    {\n        long double x3 = (-c - b * y2) * 1.0 / a;\n        v2.push_back({{x3, y2}, abs(x2 - x3)});\n    }\n    else\n    {\n        if(-c == b * y2)\n            v2.push_back({{x2,y2}, 0});\n    }\n    for(auto p1 : v1)\n    {\n        for(auto p2 : v2)\n        {\n            long double e = p1.second + p2.second + sqrt((p1.first.first - p2.first.first)*(p1.first.first - p2.first.first) + (p2.first.second - p1.first.second)*(p2.first.second - p1.first.second));\n            //cout << e <<' '<<p1.x.x<<' '<<p1.x.y<<' '<<p2.x.x<<' '<<p2.x.y<< endl;\n            ans = min(ans,e);\n        }\n    }\n    cout.precision(15);\n    cout << fixed<<ans;\n\n\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry",
        "implementation"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Barcelonian Distance.json",
    "editorial_link": "https://codeforces.com//blog/entry/63324",
    "editorial": "One way is to handle some cases: intersect the line with the border of the bounding box of (x1,y1)\n and (x2,y2)\n, and relax answer by some values depending on the mutual location of intersection points, as on the pics below. Another way is to intersect horizontal and vertical lines through (x1,y1)\n and (x2,y2)\n, intersect them with the ax+by+c=0\n line, consider the obtained 6 points as vertices of a graph, add all horizontal and vertical edges in this graph, run Floyd/Ford-Bellman/Dijkstra algorithm.",
    "hint": []
}