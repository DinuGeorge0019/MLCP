{
    "link": "https://codeforces.com//contest/994/problem/E",
    "problemId": "190663",
    "problem_idx": "E",
    "shortId": "994E",
    "contest_number": "994",
    "problem_submissions": {
        "F": [
            39313692,
            39315581,
            95930723,
            39333904
        ],
        "D": [
            39298471,
            39300217,
            39307900,
            39306172,
            39303222,
            39306617,
            39330421,
            39308869,
            39310792,
            39309655,
            39306797,
            39316533,
            39305772,
            39310407,
            39314015,
            39300951,
            39309805,
            39302653,
            39303950,
            39306436
        ],
        "B": [
            39294915,
            39295275,
            39295676,
            39295849,
            39296984,
            39296665,
            39296958,
            39296174,
            39296249,
            39295589,
            39295750,
            39299723,
            39296783,
            39298775,
            39295093,
            39296348,
            39296369,
            39296067,
            39296627
        ],
        "A": [
            39292025,
            39292170,
            39292210,
            39296891,
            39292448,
            39292868,
            39293213,
            39292353,
            39294071,
            39292079,
            39292190,
            39292131,
            39292850,
            39293045,
            39292213,
            39293330,
            39292422,
            39292084
        ],
        "C": [
            39312207,
            39297429,
            39302694,
            39300203,
            39302994,
            39301715,
            39301431,
            39300472,
            39302324,
            39299468,
            39310028,
            39306138,
            39303929,
            39297727,
            39301261,
            39298603,
            39300542
        ],
        "E": [
            39305109,
            39304789,
            39310854,
            39313649,
            39313461,
            39330509,
            39311502,
            39313415,
            39314951,
            39309721,
            39313040,
            39314741,
            39315937,
            39307951
        ]
    },
    "name": "E. Careful Maneuvering",
    "statement": "There are two small spaceship, surrounded by two groups of enemy larger\r\nspaceships. The space is a two-dimensional plane, and one group of the\r\nenemy spaceships is positioned in such a way that they all have integer\r\ny-coordinates, and their x-coordinate is equal to -100, while the second\r\ngroup is positioned in such a way that they all have integer\r\ny-coordinates, and their x-coordinate is equal to 100.Each spaceship in\r\nboth groups will simultaneously shoot two laser shots (infinite ray that\r\ndestroys any spaceship it touches), one towards each of the small\r\nspaceships, all at the same time. The small spaceships will be able to\r\navoid all the laser shots, and now want to position themselves at some\r\nlocations with x=0 (with not necessarily integer y-coordinates), such\r\nthat the rays shot at them would destroy as many of the enemy spaceships\r\nas possible. Find the largest numbers of spaceships that can be\r\ndestroyed this way, assuming that the enemy spaceships can\u2019t avoid laser\r\nshots.\r\n",
    "solutions": [
        "// new day,new strength,new thougts\n#include<bits/stdc++.h>\n#define MP make_pair\n#define PB push_back\n#define PF push_front\n#define POB pop_back\n#define POF pop_front\n#define F first\n#define S second\n#define sz(c) (c).size()\n#define REP(i,n)  for(int i=0;i<n;i++)\n#define REPD(i,n) for(int i=n-1;i>=0;i--)\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define FORD(i,a,b) for(int i=a;i>=b;i--)\n#define all(s) (s).begin(),(s).end()\n#define bit(num,i) ((num>>i)&1)\n\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<ll,ll> pll;\n\nconst ll maxn=70;\n\n#pragma GCC Optimize(\"Ofast\")\n\nmap<ll,set<ll> >mp;\nvector<vector<ll> >vec;\nll a[maxn],b[maxn];\nbool bl[2*maxn];\nll NUM;\nstack<ll>s;\n\nvoid add(ll num){\n\tNUM+=(bl[num]==0);\n\tbl[num]=1;\n\ts.push(num);\n}\n\nvoid CLEAR(){\n\tNUM=0;\n\twhile(sz(s)){\n\t\tbl[s.top()]=0;\n\t\ts.pop();\n\t}\n}\n\nint main(){\n\tll n,m;cin>>n>>m;\n\tREP(i,n)\n\t\tcin>>a[i];\n\tREP(i,m)\n\t\tcin>>b[i];\n\tREP(i,n){\n\t\tREP(j,m){\n\t\t\tmp[a[i]+b[j]].insert(i);\n\t\t\tmp[a[i]+b[j]].insert(j+n);\n\t\t}\n\t}\n\tfor(map<ll,set<ll> >::iterator it=mp.begin();it!=mp.end();it++){\n\t\tvector<ll>v;\n\t\tv.clear();\n\t\tfor(set<ll>::iterator itss=(it->S).begin();itss!=(it->S).end();itss++)\n\t\t\tv.PB(*itss);\n\t\tvec.PB(v);\n\t}\n\t\n\tll ans=0;\n\tREP(i,sz(vec)){\n\t\tREP(j,sz(vec)){\n\t\t\tREP(w,sz(vec[i]))\n\t\t\t\tadd(vec[i][w]);\n\t\t\tREP(w,sz(vec[j]))\n\t\t\t\tadd(vec[j][w]);\n\t\t\tans=max(ans,NUM);\n\t\t\tCLEAR();\n\t\t}\n\t}\n\tcout<<ans;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "data structures"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Careful Maneuvering.json",
    "editorial_link": "https://codeforces.com//blog/entry/60047",
    "editorial": "One way to solve the problem is to fix one spaceship in the left half\r\nand one spaceship in the right half, and assume that they shoot each\r\nother by the means of shooting towards one of the small spaceships. This\r\ngives us a coordinate of one small spaceship. Once we have it, iterate\r\nover all the large spaceships, mark those that are already shot.Now all\r\nthat is left is to find the best place to position the second spaceship.\r\nTo do that, create a map from a coordinate to number of unmarked\r\nspaceships that would be destroyed if the second small spaceship is at\r\nthat coordinate. Iterate over each unique spaceship coordinate on the\r\nleft and each unique spaceship coordinate on the right, and increment\r\nthe value in the map that corresponds to the position of the second\r\nsmall spaceship that would result in those two large spaceships shooting\r\neach other down by the number of large unmarked spaceships at the fixed\r\ncoordinates.Then update the final answer with the largest value in the\r\nmap plus the number of marked spaceships and move to the next pair of\r\nspaceships in the outer loop.This is a solution.\r\n"
}