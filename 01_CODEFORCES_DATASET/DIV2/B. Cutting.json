{"link": "https://codeforces.com//contest/998/problem/B", "problemId": "194446", "problem_idx": "B", "shortId": "998B", "contest_number": "998", "problem_submissions": {"E": [39844279, 39844719, 39842563, 39860454, 39860368], "D": [39839915, 39841332, 39842999, 39838622, 39833588, 39834360, 39835519, 39835358, 39836436, 39839136, 39835483, 39834881, 39832459, 39838234, 39834518, 39836090, 39838820, 39836619], "B": [39829464, 39826160, 39828535, 39827534, 39825326, 39826819, 39826965, 39827064, 39824985, 39826413, 39828466, 39828134, 39827004, 39829078, 39829375, 39828106, 39826996, 39829712], "C": [39826150, 39829299, 39830565, 39832057, 39827518, 39829277, 39828734, 39829936, 39831699, 39829124, 39832064, 39831642, 39829279, 39831274, 39831057, 39831568, 39830502, 39831907], "A": [39824455, 39823644, 39825721, 39823552, 39823494, 39823346, 39825072, 39824102, 39823293, 39823771, 39825353, 39823995, 39824239, 39823343, 39835371, 39823495, 39823392, 39823469]}, "name": "B. Cutting", "statement": "There are a lot of things which could be cut trees, paper, \"the rope\".\r\nIn this problem you are going to cut a sequence of integers.There is a\r\nsequence of integers, which contains the equal number of even and odd\r\nnumbers. Given a limited budget, you need to make maximum possible\r\nnumber of cuts such that each resulting segment will have the same\r\nnumber of odd and even integers.Cuts separate a sequence to continuous\r\n(contiguous) segments. You may think about each cut as a break between\r\ntwo adjacent elements in a sequence. So after cutting each element\r\nbelongs to exactly one segment. Say, [4, 1, 2, 3, 4, 5, 4, 4, 5, 5]\r\nto two cuts\r\nto [4, 1 | 2, 3, 4, 5 | 4, 4, 5, 5]. On each segment the number of even\r\nelements should be equal to the number of odd elements.The cost of the\r\ncut between x and y numbers is |x - y| bitcoins. Find the maximum\r\npossible number of cuts that can be made while spending no more than B\r\nbitcoins.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename A, typename B> inline ostream& operator<<(ostream&os, const pair<A, B> &v) {return os << v.first << ' ' << v.second;}\ntemplate <typename A> inline ostream& operator<<(ostream&os, const vector<A> &v){\n    auto it = v.begin(); os << *it;for (++it; it != v.end(); os << ' ' << *it++); return os;\n}\n#ifdef Wavator\n#define de(...) cout << #__VA_ARGS__ << \" = \", W(__VA_ARGS__)\n#else\n#define de(...) 42\n#define cerr if (false) cout\n#endif\nvoid W(){cout<<endl;}\ntemplate <typename H, typename...T> inline void W(H head, T... tail){\n    cout << head << ' ';\n    W(tail...);\n}\n#define rep(i, a, b) for (int i = (a), i##_end_ = (b); i < i##_end_; ++i)\n#define per(i, a, b) for (int i = (b) - 1, i##_end_ = (a); i >= i##_end_; --i)\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#define SZ(x) ((int)(x).size())\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef double db;\ntypedef unsigned long long ull;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\nconst db eps = 1e-9, PI = acos(-1);\nconst ll mod = (ll)1e9 + 7;\nconst int oo = 0x3f3f3f3f;\nmt19937 rnd((ull)time(0));\nll pow_mod(ll a, ll b) {\n    assert(b >= 0); ll res = 1;\n    for (a %= mod; b; b >>= 1, a = a * a % mod) if (b & 1)res = res * a % mod;\n    return res;\n}\n/////////////////////////////////////////////////////////////////////////\nvoid solve();\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    solve();\n    return 0;\n}\n\nvoid solve() {\n    int n, b;\n    cin >> n >> b;\n    vi a(n),e(n,0),o(n,0);\n    rep(i, 0, n) {\n        cin >> a[i];\n    }\n    int ee = 0, oo = 0;\n    int ptr=0;\n    for (int &x: a) {\n        if (x & 1)\n            ee++;\n        else\n            oo++;\n        e[ptr]=ee;\n        o[ptr++]=oo;\n    }\n    int ans = 0,m = b;\n    vi qu;\n    rep(i, 1, n) {\n        if (e[i] == o[i])\n            qu.push_back(abs(a[i + 1] - a[i]));\n    }\n    sort(all(qu));\n    for (auto &t: qu ) {\n        if (m >= t) {\n            ans++;\n            m -= t;\n        }\n        else break;\n    }\n    printf(\"%d\\n\", ans);\n\n    return;\n}"], "input": "", "output": "", "tags": ["dp", "greedy", "sortings"], "dificulty": "1200", "interactive": false}