{
    "link": "https://codeforces.com//contest/554/problem/B",
    "problemId": "30333",
    "problem_idx": "B",
    "shortId": "554B",
    "contest_number": "554",
    "problem_submissions": {
        "E": [
            11746850,
            13764219,
            11830271,
            11766455,
            11747742,
            11764575,
            11774480,
            11758934
        ],
        "D": [
            11744247,
            11746031,
            11746127,
            11746736,
            11747437,
            11747976,
            11748267,
            11748288,
            11748030,
            11747975,
            11748807,
            11748413,
            11748580,
            11748828,
            11748890,
            11748381,
            11749085
        ],
        "C": [
            11742733,
            13059738,
            11743053,
            11742819,
            11744097,
            11744323,
            11744579,
            11743917,
            11744372,
            11744426,
            11744294,
            11742165,
            11745064,
            11744621,
            11745770,
            11745295,
            11745901,
            11746169,
            11746135
        ],
        "B": [
            11739897,
            11739637,
            11740204,
            11741151,
            11741795,
            11740995,
            11741073,
            11742270,
            11742529,
            11741366,
            11746029,
            11742271,
            11745027,
            11741791,
            11743493,
            11742926,
            11741663,
            11742603,
            11739370
        ],
        "A": [
            11739226,
            11738997,
            11739151,
            11739277,
            11740303,
            11739365,
            11739663,
            11740298,
            11740792,
            11739964,
            11739524,
            11740207,
            11741321,
            11739802,
            11762460,
            11740503,
            11740511,
            11739943,
            11741469,
            11738906
        ]
    },
    "name": "B. Ohana Cleans Up",
    "statement": "Ohana Matsumae is trying to clean a room, which is divided up into an by\r\ngrid of squares. Each square is initially either clean or dirty. Ohana\r\ncan sweep her broom over columns of the grid. Her broom is very strange:\r\nif she sweeps over a clean square, it will become dirty, and if she\r\nsweeps over a dirty square, it will become clean. She wants to sweep\r\nsome columns of the room to maximize the number of rows that are\r\ncompletely clean. It is not allowed to sweep over the part of the\r\ncolumn, Ohana can only sweep the whole column.Return the maximum number\r\nof rows that she can make completely clean.\r\n",
    "solutions": [
        "#pragma comment (linker, \"/STACK:1000000000\")\n\n#include <cstdio>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#include <set>\n#include <cstring>\n#include <queue>\n#include <vector>\n#include <map>\n#include <string>\n\nusing namespace std;\n\nconst int maxn = 110;\n\nstring s[maxn];\n\nmap <string, int> m;\n\nint main() {\n\tint n;\n\n\tscanf(\"%d\", &n);\n\n\tfor (int i = 0; i < n; i++) {\n\t\tcin >> s[i];\n\t\tm[s[i]]++;\n\t}\n\n\tmap <string, int>::iterator  it;\n\n\tint ans = 0;\n\n\tfor (it = m.begin(); it != m.end(); it++) {\n\t\tans = max(ans, it->second);\n\t}\n\n\tcout << ans << endl;\n\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "strings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Ohana Cleans Up.json",
    "editorial_link": "https://codeforces.com//blog/entry/18842",
    "editorial": "For each row, there is only one set of columns we can sweep so it\r\nbecomes completely clean. So, there are only configurations of sweeping\r\ncolumns to look at. Checking a configuration takes time to count the\r\nnumber of rows that are completely clean. There are configurations in\r\nall, so this takes time total. Alternatively, another way of solving\r\nthis problem is finding the maximum number of rows that are all the\r\nsame. Example code:\r\nhttp://codeforces.com/contest/554/submission/11767576\r\n"
}