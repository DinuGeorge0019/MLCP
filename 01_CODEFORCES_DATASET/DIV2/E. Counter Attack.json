{
    "link": "https://codeforces.com//contest/190/problem/E",
    "problemId": "1333",
    "problem_idx": "E",
    "shortId": "190E",
    "contest_number": "190",
    "problem_submissions": {
        "E": [
            1695983,
            1695624,
            1697050,
            1695708,
            1695790
        ],
        "D": [
            1695462,
            1695449,
            1695835,
            1695364,
            1695377,
            1695368,
            1695946,
            1696839,
            1695863,
            1695763,
            1694579,
            1694803,
            1694964,
            1696526,
            1694501,
            1695160
        ],
        "C": [
            1694760,
            1694875,
            1695279,
            1694796,
            1694088,
            1695233,
            1696929,
            1695405,
            1695351
        ],
        "B": [
            1692770,
            1693945,
            1696858,
            1693150,
            1695603,
            1696081,
            1696565
        ],
        "A": [
            1691163,
            1691408,
            1691387,
            1691381,
            1691523,
            1691170,
            1691984,
            1691301,
            1691155,
            1691192,
            1691038,
            1690947,
            1691166,
            1691782,
            1695491,
            1691072
        ]
    },
    "name": "E. Counter Attack",
    "statement": "Berland has managed to repel the flatlanders\u2019 attack and is now starting\r\nthe counter attack.Flatland has cities, numbered from to , and some\r\npairs of them are connected by bidirectional roads. The Flatlandian maps\r\nshow roads between cities if and only if there is in fact no road\r\nbetween this pair of cities (we do not know whether is it a clever\r\nspy-proof strategy or just saving ink). In other words, if two cities\r\nare connected by a road on a flatland map, then there is in fact no road\r\nbetween them. The opposite situation is also true: if two cities are not\r\nconnected by a road on a flatland map, then in fact, there is a road\r\nbetween them.The berlanders got hold of a flatland map. Now Vasya the\r\nCorporal is commissioned by General Touristov to find all such groups of\r\nflatland cities, that in each group of cities you can get from any city\r\nto any other one, moving along the roads. Also the cities from different\r\ngroups are unreachable from each other, moving along the roads. Indeed,\r\ndestroying such groups one by one is much easier than surrounding all\r\nFlatland at once!Help the corporal complete this task and finally become\r\na sergeant! Don\u2019t forget that a flatland map shows a road between cities\r\nif and only if there is in fact no road between them.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <string.h>\n#include <set>\n#include <vector>\n#include <queue>\nusing namespace std;\nset <int> ss1;\nset <int> :: iterator pos;\nvector <int> g[500010];\nqueue <int> q;\nstruct Edge\n{\n    int v,pre;\n};\nEdge e[2000010];\nint use[500010];\nint ecnt,hh[500010],p[500010];\nvoid addEdge(int u,int v)\n{\n    e[ecnt].v=v;\n    e[ecnt].pre=hh[u];\n    hh[u]=ecnt++;\n}\nint main()\n{\n    int n,m;\n    while (scanf(\"%d%d\",&n,&m)==2)\n    {\n        ss1.clear();\n        for (int i=1; i<=n; i++)\n            ss1.insert(i);\n        memset(hh,-1,sizeof(hh));\n        memset(use,0,sizeof(use));\n        ecnt=0;\n        for (int i=0; i<m; i++)\n        {\n            int u,v;\n            scanf(\"%d%d\",&u,&v);\n            addEdge(u,v);\n            addEdge(v,u);\n        }\n        int cnts=0,anss=0,now=0;\n        while (cnts!=n)\n        {\n            int num=*ss1.begin(),cnt=0;\n            while (!q.empty()) q.pop();\n            q.push(num);\n            ss1.erase(num);\n            g[anss].clear();\n            while (!q.empty())\n            {\n                now++;\n                int cnt=0;\n                int num=q.front();\n                g[anss].push_back(num);\n                cnts++;\n                q.pop();\n                for (int i=hh[num]; i!=-1; i=e[i].pre)\n                {\n                    int v=e[i].v;\n                    use[v]=now;\n                }\n                pos=ss1.begin();\n                while (pos!=ss1.end())\n                {\n                    if (use[*pos]!=now)\n                    {\n                        q.push(*pos);\n                        p[cnt++]=*pos;\n                    }\n                    pos++;\n                }\n                for (int i=0;i<cnt;i++)\n                    ss1.erase(p[i]);\n            }\n            anss++;\n        }\n        printf(\"%d\\n\",anss);\n        for (int i=0; i<anss; i++)\n        {\n            int len=g[i].size();\n            printf(\"%d\",len);\n            for (int j=0; j<len; j++)\n                printf(\" %d\",g[i][j]);\n            puts(\"\");\n        }\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dsu",
        "graphs",
        "hashing",
        "sortings"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Counter Attack.json",
    "editorial_link": "https://codeforces.com//blog/entry/4556",
    "editorial": "This problem has several different solutions. Anyway, we should consider\r\ntowns as the vertices of the graph, roads as its edges. Now we are to\r\nfind the connected components of the complementary graph (CG) of the\r\ngiven graph. Let\u00e2\u0080\u0099s take the vertex with the minimal degree : . We call\r\nthe set of the vertices who are connected with , that are not connected\r\n. All vertices which don\u00e2\u0080\u0099t connect with will be in the same connected\r\ncomponent of the CG. Let\u00e2\u0080\u0099s build the complemented graph to the subgraph\r\nincluding and set there are vertices and edges.Let\u00e2\u0080\u0099s build DSU for the\r\nvertices of given graph and merge components which we have found using\r\nthe new-built graph. All that we should do after it is to consider\r\nvertices from : now we look to the vertex . We put in the same component\r\nas if has edges not to all vertices of (we do it using DSU too). The\r\ncomplexity of this solution is or . Another solution: we keep , which\r\ncontains vertices, which haven\u00e2\u0080\u0099t been visited yet. Let\u00e2\u0080\u0099s run series of\r\nbfs to find the components of CG. If we are working now with the vertex\r\n, pass through . Consider is the element of . If edge isn\u00e2\u0080\u0099t in the given\r\ngraph, than is in the same component of CG as , so, we can erase it from\r\nand add to queue. Otherwise, we do nothing.What is the complexity of\r\nthis solution? To understand that, we must know how many times whe\r\nconsider fixed vertex in the . remains int when we run to them from\r\nvertex edge is in the given graph. So, every vertex remains in no more\r\nthan its degree. So, the complexity of this algorithm is (log n because\r\nof binsearch we need use it to know, is in the graph). If we use , we\u00e2\u0080\u0099ll\r\nget .\r\n"
}