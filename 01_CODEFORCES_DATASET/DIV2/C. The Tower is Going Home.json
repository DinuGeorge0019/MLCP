{
    "link": "https://codeforces.com//contest/1075/problem/C",
    "problemId": "249094",
    "problem_idx": "C",
    "shortId": "1075C",
    "contest_number": "1075",
    "problem_submissions": {
        "E": [
            45299888,
            45297843,
            45298056,
            45296633,
            45301081,
            45300957,
            45302422,
            45302929,
            45304409,
            45302659,
            45300790,
            45303365,
            45303877,
            45302733
        ],
        "F": [
            45298415,
            45299656,
            45299363,
            45302076,
            45302275,
            45461749,
            45308311
        ],
        "D": [
            45294336,
            45295894,
            45295657,
            45296846,
            45300767,
            45296827,
            45297943,
            45298533,
            45298945,
            45296351,
            45298646,
            45300089,
            45299323,
            45303594,
            45300962,
            45300486,
            45300898
        ],
        "C": [
            45292132,
            45292865,
            45293959,
            45292758,
            45292492,
            45294033,
            45294912,
            45294846,
            45293224,
            45293567,
            45294312,
            45292544,
            45295364,
            45296384,
            45295997,
            45298611,
            45297798
        ],
        "B": [
            45290077,
            45290576,
            45289458,
            45290287,
            45290460,
            106466381,
            45291592,
            45291593,
            45291426,
            45290169,
            45291447,
            45291908,
            45290506,
            45291957,
            45290127,
            45292064,
            45294213,
            45290472
        ],
        "A": [
            45288469,
            45288515,
            45288420,
            45288453,
            45288440,
            45288973,
            45289044,
            45288964,
            45288524,
            45289234,
            45289586,
            45288591,
            45289499,
            45288557,
            45289581,
            45288705,
            45288541
        ]
    },
    "name": "C. The Tower is Going Home",
    "statement": "On a chessboard with a width of 10^9 and a height of 10^9, the rows are\r\nnumbered from bottom to top from 1 to 10^9, and the columns are numbered\r\nfrom left to right from 1 to 10^9. Therefore, for each cell of the\r\nchessboard you can assign the coordinates (x,y), where x is the column\r\nnumber and y is the row number.Every day there are fights between black\r\nand white pieces on this board. Today, the black ones won, but at what\r\nprice? Only the rook survived, and it was driven into the lower left\r\ncorner a cell with coordinates (1,1). But it is still happy, because the\r\nvictory has been won and it’s time to celebrate it! In order to do this,\r\nthe rook needs to go home, namely on the of the field (that is, in any\r\ncell that is in the row with number 10^9).Everything would have been\r\nfine, but the treacherous white figures put spells on some places of the\r\nfield before the end of the game. There are two types of spells:\r\nVertical. Each of these is defined by one number x. Such spells create\r\nan infinite between the columns x and x+1. Horizontal. Each of these is\r\ndefined by three numbers x_1, x_2, y. Such spells create a that passes\r\nthrough the top side of the cells, which are in the row y and in columns\r\nfrom x_1 to x_2 inclusive. The peculiarity of these spells is that it is\r\nfor a certain pair of such spells to have a common point. Note that\r\nhorizontal spells can have common points with vertical spells. Let’s\r\nrecall that the rook is a chess piece that in one move can move to any\r\npoint that is in the same row or column with its initial position. In\r\nour task, the rook can move from the cell (r_0,c_0) into the cell\r\n(r_1,c_1) only under the condition that r_1 = r_0 or c_1 = c_0 and there\r\nis no or between these cells (For better understanding, look at the\r\nsamples).Fortunately, the rook can remove spells, but for this it has to\r\nput tremendous efforts, therefore, it wants to remove the minimum\r\npossible number of spells in such way, that after this it can return\r\nhome. Find this number!\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define szv(V) ((int)(V).size())\n#define allv(V) (V).begin(), (V).end()\n#define sortv(V) sort(allv(V))\n#define uniquev(V) (V).erase(unique(allv(V)), (V).end())\n#define compv(V) sortv(V), uniquev(V)\n#define fs first\n#define se second\n#define pb push_back\n#define eb emplace_back\n\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\nconst int mod = 1e9 + 7;\nconst ll inf = 4e18 + 5;\n\nll gcd(ll x, ll y) { while (y) x %= y, swap(x, y); return x; }\npll operator+(pll a, pll b) { return pll(a.fs + b.fs, a.se + b.se); }\npll operator-(pll a, pll b) { return pll(a.fs - b.fs, a.se - b.se); }\nll operator*(pll a, pll b) { return a.fs * b.se - a.se * b.fs; }\ntemplate <class T> int sign(T x) { return x < 0 ? -1 : x > 0 ? 1 : 0; }\nint ccw(pll a, pll b, pll c) { return sign((b - a) * (c - b)); }\ntemplate <class T> void setmin(T &x, T y) { if (x > y) x = y; }\ntemplate <class T> void setmax(T &x, T y) { if (x < y) x = y; }\ntemplate <class T> void addval(T &x, T y) { x += y; x %= mod; }\n\nint n, m;\nvector<int> vs;\nvector<pii> hs;\nconst int mx = 1e9;\nint main() {\n    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n    cin >> n >> m;\n    for (int i = 0; i < n; i++) {\n        int x;\n        cin >> x;\n        vs.pb(x);\n    }\n    sortv(vs);\n    vs.push_back(mx);\n    for (int i = 0; i < m; i++) {\n        int x1, x2, y;\n        cin >> x1 >> x2 >> y;\n        if (x1 > 1) continue;\n        hs.eb(x2, y);\n    }\n    sortv(hs);\n    int hi = 0, ans = n + m;\n    for (int vi = 0; vi < szv(vs); vi++) {\n        while (hi < szv(hs) && hs[hi].fs < vs[vi]) hi++;\n        setmin(ans, vi + szv(hs) - hi);\n    }\n    cout << ans;\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "two pointers"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. The Tower is Going Home.json",
    "editorial_link": "https://codeforces.com/blog/entry/62985",
    "editorial": "Observation 1. If we remove all the horizontal spells, than the rook can move straightforward up to the upper side of the field. So the only purpose of removing the vertical spells is to reduce the number of horizontal spells to be removed.\n\nObservation 2. If we want to remove the i\n-th vertical spell, then we should also remove all such vertical spells j\n, that xj<xi\n. It is obvious, because when we delete a vertical spell, we suppose that the rook would be able to outflank some horizontal spells by getting at rows that have greater number than xi\n. If there remains at least one vertical spell j\n, such that xj<xi\n, than we will never be able to move to the rows with number greater than xj\n, including xi\n.\n\nLet's find some observations about the horizontal spells:\n\nLet's assume that we deleted i\n vertical spells. It means, that the rook can move freely left and right at columns between 1\n and xi+1\n inclusive. Let's say that our rook is on the row y\n. If there is at least one cell which is located at row y\n at any column between 1\n and xi+1\n, that there is no blocking segment on the top of it, then the rook can move to this cell and move upwards into the row y+1\n. It means that if there is at least one gap in the blocking segments in row y\n and in columns between 1\n and xi+1\n incluse, then there is no need to remove any of horizontal spells in the row.\n\nObservation 3. We care only about such horizontal spells, in which x1=1\n. We have already proved, that we only care about such rows, that there are no gaps in blocking segments in them. If there is no such horizontal spell with x1=1\n, it means that there is a gap in the row at column 1\n. If there is such horizontal spell, then if there are more spells in that row, there would be a gap between any pair of neighbouring segments.\n\nSince we only care only about segments with x1=1\n and it is guaranteed that no horizontal segments share a common point, it means that we might not care about the y\n of any horizontal spell, because there is no such pair of segments that both x1\n and y\n of these are equal.\n\nSo now while reading the descriptions of the horizontal spells, if the x1\n of i\n-th horizontal spell is not equal to 1\n, we can ignore it. Otherwise, we add x2\n to some array.\n\nNow we can sort the array of x2\n-s, and solve the task using the two-pointer technique.\n\nHere is the final algorithm:\n\nAdd fake vertical spell with x=109\n.\n\nSort all the vertical spells in ascending order.\n\nWhile reading the descriptions of the horizontal spells, we ignore ones with x1\n not equal to 1\n. In other case, we add x2\n to the array.\n\nSort the array of x2\n-s in ascending order. Now we use the two pointer technique in the following way: we iterate i\n from 0 to n  the number of vertical spells to be deleted and on each step we advance the pointer while the x2\n at which the pointer points is less then x\n of the (i+1)\n-th vertical spell. Let's denote the position of the pointer as p\n. The number of horizontal spells, that we need to remove with i\n vertical spells removed is m?p+1\n. Let's define the position of the pointer at i\n-th step as pi\n.\n\nThe answer to the problem in minival value of i+m?pi+1\n among all i\n from 0\n to n\n.\n\nOverall complexity O(nlogn+mlogm)",
    "hint": []
}