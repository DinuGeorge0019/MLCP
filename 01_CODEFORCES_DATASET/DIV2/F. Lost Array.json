{
    "link": "https://codeforces.com//contest/1713/problem/F",
    "problemId": "1496889",
    "problem_idx": "F",
    "shortId": "1713F",
    "contest_number": "1713",
    "problem_submissions": {
        "E": [
            167272157,
            167275947,
            167255255,
            167280552,
            167277532,
            167281915,
            167286271,
            167295534,
            167291747,
            167285691,
            167290110,
            167289826,
            167289470,
            167288114,
            167295399,
            167293392,
            167292517,
            167288991,
            167292413,
            167295616
        ],
        "D": [
            167262934,
            167264444,
            167275938,
            167266127,
            167264903,
            167407463,
            167265717,
            167269013,
            167270800,
            167270098,
            167276487,
            167270258,
            167267741,
            167270166,
            167269509,
            167261936,
            167272225,
            167242557,
            167276667,
            167276744,
            167278772
        ],
        "C": [
            167243257,
            167245150,
            167266251,
            167242115,
            167251589,
            167255369,
            167252792,
            167244013,
            167251870,
            167263156,
            167253225,
            167255260,
            167254692,
            167249536,
            167241452,
            167251627,
            167255063,
            167259927,
            167257077,
            167247512
        ],
        "B": [
            167234078,
            167234734,
            167230438,
            167233192,
            167236986,
            167243546,
            167240561,
            167234594,
            167236064,
            167235869,
            167233392,
            167241862,
            167238018,
            167234909,
            167233503,
            167237613,
            167277571,
            167236123,
            167238131,
            167235652
        ],
        "A": [
            167230129,
            167230356,
            167231376,
            167230475,
            167230244,
            167239741,
            167232628,
            167231141,
            167231690,
            167230947,
            167230261,
            167230810,
            167230984,
            167230721,
            167230524,
            167233664,
            167273402,
            167231481,
            167232153,
            167230801
        ],
        "F": [
            167345887,
            167645094,
            167481610
        ]
    },
    "name": "F. Lost Array",
    "statement": "Spyofgame, founder of Orzlim religionA long time ago, Spyofgame invented\r\nthe famous array a (1-indexed) of length n that contains information\r\nabout the world and life. After that, he decided to convert it into the\r\nmatrix b (0-indexed) of size (n + 1)\r\ntimes (n + 1) which contains information about the world, life and\r\nbeyond.Spyofgame converted a into b with the following rules. b_{i,0} =\r\n0 if 0\r\nleq i\r\nleq n; b_{0,i} = a_{i} if 1\r\nleq i\r\nleq n; b_{i,j} = b_{i,j-1}\r\noplus b_{i-1,j} if 1\r\nleq i, j\r\nleq n. Here\r\noplus denotes the bitwise XOR operation.Today, archaeologists have\r\ndiscovered the famous matrix b. However, many elements of the matrix has\r\nbeen lost. They only know the values of b_{i,n} for 1\r\nleq i\r\nleq n (note that these are some elements of the last , not the last\r\n).The archaeologists want to know what a possible array of a is. Can you\r\nhelp them reconstruct any array that could be a?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define Maxn 2000007\nint n,a[Maxn];\nint main()\n{\n    scanf(\"%d\",&n);\n    for (int i=0;i<n;i++)\n        scanf(\"%d\",&a[i]);\n    int k=0;\n    while ((1<<k)<n) ++k;\n    for (int id=0;id<k;id++)\n        for (int i=0;i<n;i++)\n            if (i&(1<<id)) a[i]^=a[i^(1<<id)];\n    for (int id=0;id<k;id++)\n        for (int i=0;i<n;i++)\n            if (i&(1<<id)) a[i^(1<<id)]^=a[i];\n    for (int i=n-1;i;i--)\n        printf(\"%d \",a[i]);\n    printf(\"%d\\n\",a[0]);\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "combinatorics",
        "constructive algorithms",
        "dp",
        "math"
    ],
    "dificulty": "2900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Lost Array.json",
    "editorial_link": "https://codeforces.com//blog/entry/105419",
    "editorial": "First, we can see that contribute times to , which can calculate similar\r\nto Pascalâs Triangle. Itâs easy to see that the value that contribute to\r\nequal to when is odd, otherwise. Letâs solve the inverse problem: Given\r\narray . Construct for all . By Lucas Theorem, is odd when is a submask\r\nof (with is inverse mask of ). Let define with smallest satisfy . Set\r\nand then is the Zeta transform of . So we could apply Mobius transform\r\nin to get . Since the operation is xor, mobius transform is as same as\r\nzeta transform. But unlike the inverse problem, there are some\r\ndifferences. We donât know the value of for in . Let be the sum over\r\nsupermasks array of (with is supermasks of when , then set for in .\r\nAfter that, do another sum over supermasks on to get original value of .\r\nNow we can find from and from . Complexity: Solution\r\n",
    "hint": [
        "Hint 0 Is there any case that the answer doesn't exist? If exist, are there multiple?",
        "Hint 1 How many times does contribute to ? Hint 1.1 Pascal's Triangle Calculate value that contribute to . Hint 1.2 Sierpiński triangle",
        "Hint 1.1 Pascal's Triangle",
        "Hint 1.2 Sierpiński triangle",
        "Hint 2 Consider the inverse problem: Given array . Construct for all . How can you solve this problem?",
        "Hint 3 Consider easier problem: Let construct matrix of size same way as matrix . Given , please reconstruct . How can you solve this problem?"
    ]
}