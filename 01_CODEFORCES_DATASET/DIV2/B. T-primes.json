{
    "link": "https://codeforces.com//contest/230/problem/B",
    "problemId": "1886",
    "problem_idx": "B",
    "shortId": "230B",
    "contest_number": "230",
    "problem_submissions": {
        "E": [
            2281369,
            2283553,
            2285030,
            2285047,
            2275013,
            2277312,
            2281959,
            2280926,
            2282812,
            2282942,
            2289756,
            2303849,
            2284350,
            2284110
        ],
        "D": [
            2279019,
            2282259,
            2281806,
            2284336,
            2468189,
            2293544,
            2293533,
            2293531,
            2292779,
            2280034,
            2280797,
            2282637,
            2281762,
            2282078,
            2282947
        ],
        "C": [
            2276837,
            2279164,
            2278509,
            2280041,
            2280782,
            2279772,
            2278719,
            2276895,
            2277991,
            2280210,
            2277389,
            2280622,
            2278662,
            2279358,
            2278439,
            2277863,
            2279847,
            2279222
        ],
        "B": [
            2275270,
            2276827,
            2276000,
            2275039,
            2278453,
            2275508,
            2275984,
            2274908,
            2281260,
            2276330,
            2275784,
            2276800,
            2275571,
            2275505,
            2276144,
            2275193,
            2276949,
            2275915
        ],
        "A": [
            2273678,
            2274800,
            2273664,
            2274083,
            2276565,
            2273916,
            2274258,
            2273731,
            2273800,
            2274208,
            2273713,
            2274806,
            2273983,
            2273830,
            2274358,
            2274055,
            2274259,
            2273895
        ]
    },
    "name": "B. T-primes",
    "statement": "We know that prime numbers are positive integers that have exactly two\r\ndistinct positive divisors. Similarly, we\u2019ll call a positive integer ,\r\nif has exactly three distinct positive divisors.You are given an array\r\nof positive integers. For each of them determine whether it is -prime or\r\nnot.\r\n",
    "solutions": [
        "#include <cstdio>\n\nlong long num[1000010];\nint notPrime[1000010], cnt;\n\nbool find(long long obj){\n\n    int l = 0, r = cnt;\n    while(l != r){\n        \n        int m = (l + r) / 2;\n        if(obj <= num[m]) r = m;\n        else l = m + 1;\n\n    }\n\n    return l < cnt && num[l] == obj;\n\n}\n\nint main(){\n\n    for(int i = 2; i * i <= 1000000; i++){\n\n        if(notPrime[i]) continue;\n\n        for(int j = i * i; j <= 1000000; j += i){\n            notPrime[j] = 1;\n        }\n\n    }\n\n    for(int i = 2; i <= 1000000; i++){\n        if(!notPrime[i]) num[cnt++] = (long long)i * i;\n    }\n\n    int n;\n    scanf(\"%d\" ,&n);\n\n    while(n--){\n\n        long long obj;\n        scanf(\"%I64d\" ,&obj);\n\n        puts(find(obj)? \"YES\": \"NO\");\n\n    }\n\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation",
        "math",
        "number theory"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. T-primes.json",
    "editorial_link": "https://codeforces.com//blog/entry/5437",
    "editorial": "It can be shown that only squares of prime numbers are T-primes, and\r\nthat there are not too many of them as many as there are prime numbers\r\nnot greater than . Precompute these numbers (using, for example, the\r\nsieve of Eratosthenes) and store them in an array or an std::set, then\r\nwe can answer each query by simply checking whether the number in\r\nquestion is amongst the precomputed numbers. The complexity of the\r\nsolution is linear in relation to or , where (one can also get a tighter\r\nbound). Sample solution: http://pastie.org/4897166 (archived copy)\r\n"
}