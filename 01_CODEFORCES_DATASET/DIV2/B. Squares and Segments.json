{
    "link": "https://codeforces.com//contest/1099/problem/B",
    "problemId": "278502",
    "problem_idx": "B",
    "shortId": "1099B",
    "contest_number": "1099",
    "problem_submissions": {
        "E": [
            48000148,
            48008414,
            48015162,
            48015155,
            47998674,
            68679965,
            48055305,
            48002816,
            48005156,
            48004046
        ],
        "F": [
            47993398,
            48000668,
            47998030,
            47996940,
            48003129,
            48002459,
            48000786,
            48002880,
            48003524,
            48001521,
            48002772,
            48065469,
            48065253,
            48007017,
            48004595,
            48004955,
            48023235,
            48006181,
            48008407
        ],
        "D": [
            47985584,
            47989615,
            47984416,
            47978723,
            47985339,
            47986984,
            47992304,
            47990729,
            47990739,
            47992156,
            47990766,
            47987456,
            47986225,
            47993500,
            47991322,
            47992653,
            47992397,
            47991707,
            47988171,
            47987589
        ],
        "C": [
            47981176,
            47983527,
            47980104,
            47987818,
            47981157,
            47982699,
            47982090,
            47982267,
            47986173,
            47985738,
            47981653,
            47982375,
            47988366,
            47985929,
            47986209,
            47986811,
            47984704,
            47981818,
            47983683
        ],
        "B": [
            47976890,
            47977488,
            47975669,
            47984516,
            47975576,
            47975800,
            47977583,
            47977135,
            47978430,
            47982162,
            47977417,
            47977771,
            47981576,
            47979226,
            47979187,
            47980494,
            47977529,
            47975997,
            47978338
        ],
        "A": [
            47974401,
            47973914,
            47973933,
            47982820,
            47974013,
            47974051,
            47974701,
            47974488,
            47974881,
            47974319,
            47973925,
            47973908,
            47975086,
            47976101,
            47974397,
            47974659,
            47974316,
            47973944,
            47974200
        ]
    },
    "name": "B. Squares and Segments",
    "statement": "Little Sofia is in fourth grade. Today in the geometry lesson she\r\nlearned about segments and squares. On the way home, she decided to draw\r\nn squares in the snow with a side length of 1. For simplicity, we assume\r\nthat Sofia lives on a plane and can draw only segments of length 1,\r\nparallel to the coordinate axes, with vertices at integer points.In\r\norder to draw a segment, Sofia proceeds as follows. If she wants to draw\r\na vertical segment with the coordinates of the ends (x, y) and (x, y+1).\r\nThen Sofia looks if there is already a drawn segment with the\r\ncoordinates of the ends (x\u2019, y) and (x\u2019, y+1) for some x\u2019. If such a\r\nsegment exists, then Sofia quickly draws a new segment, using the old\r\none as a guideline. If there is no such segment, then Sofia has to take\r\na ruler and measure a new segment for a long time. Same thing happens\r\nwhen Sofia wants to draw a horizontal segment, but only now she checks\r\nfor the existence of a segment with the same coordinates x, x+1 and the\r\ndiffering coordinate y.For example, if Sofia needs to draw one square,\r\nshe will have to draw two segments using a ruler: After that, she can\r\ndraw the remaining two segments, using the first two as a guide: If\r\nSofia needs to draw two squares, she will have to draw three segments\r\nusing a ruler: After that, she can draw the remaining four segments,\r\nusing the first three as a guide: Sofia is in a hurry, so she wants to\r\nminimize the number of segments that she will have to draw with a ruler\r\nwithout a guide. Help her find this minimum number.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define endl '\\n'\n\n//#pragma GCC optimize (\"O3\")\n//#pragma GCC target (\"sse4\")\n\n#define SZ(x) ((int)x.size())\n#define ALL(V) V.begin(), V.end()\n#define L_B lower_bound\n#define U_B upper_bound\n#define pb push_back\n\nusing namespace std;\ntemplate<class T, class T2> inline int chkmax(T &x, const T2 &y) { return x < y ? x = y, 1 : 0; }\ntemplate<class T, class T2> inline int chkmin(T &x, const T2 &y) { return x > y ? x = y, 1 : 0; }\nconst int MAXN = (1 << 20);\n\nint n;\n\nvoid read()\n{\n\tcin >> n;\n}\n\nvoid solve()\n{\n\tint answer = n + 1;\n\tfor(int d = 1; d * 1ll * d <= n; d++)\n\t{\n\t\tint o = n / d + (bool)(n % d);\n\t\tchkmin(answer, d + o);\n\t}\n\n\tcout << answer << endl;\n}\n\nint main()\n{\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL);\n\n\tread();\n\tsolve();\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "constructive algorithms",
        "math"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Squares and Segments.json",
    "editorial_link": "https://codeforces.com/blog/entry/64331",
    "editorial": "Consider any resulting configuration of the squares. We can safely\r\nassume that a set of non-empty rows and non-empty columns are connected\r\n(otherwise just move the disconnected part a bit closer to any other).\r\nClearly, in every column and every row we can for free extend it to have\r\nall the squares in the bounding box minimum rectangle containing the\r\nresulting figure. From this we can conclude that we can search for the\r\noptimal answer among the rectangles.The answer for a rectangle equals\r\n(just draw the first row and the first column), so we need to find two\r\nvalues and such that and is minimum possible. It\u00e2\u0080\u0099s easy to see that the\r\nanswer is not optimal if : by moving the numbers towards each other we\r\nget the same sum, but greater product. This observation leads to the\r\nfollowing solution: if , then the answer is either a rectangle , or a\r\nrectangle , or a rectangle (because of the rounding). We just need to\r\ncheck which one is better.\r\n"
}