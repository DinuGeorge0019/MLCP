{"link": "https://codeforces.com//contest/41/problem/C", "problemId": "215", "problem_idx": "C", "shortId": "41C", "contest_number": "41", "problem_submissions": {"E": [187709, 187786, 188013, 188055, 187720, 188400, 187514, 188819, 188191, 188320, 187947, 187986, 188068, 187475, 188102, 188249, 188098], "D": [187451, 188035, 187556, 187294, 187606, 188558, 188821, 187849, 187246, 187712], "C": [186912, 186684, 186917, 187641, 186883, 186553, 188818, 186598, 186899, 188654, 186712, 186971, 187041, 187211, 187296, 187151, 187405], "B": [186796, 186260, 186544, 186516, 188464, 186708, 186215, 188816, 186320, 188632, 186180, 186422, 186551, 186670, 188213, 186455, 186499], "A": [185992, 186549, 186066, 186169, 186054, 186446, 186002, 188814, 186063, 186094, 185993, 186104, 186145, 185988, 186586, 185990, 186130]}, "name": "C. Email address", "statement": "Sometimes one has to spell email addresses over the phone. Then one\r\nusually pronounces a dot as , an at sign as . As a result, we get\r\nsomething like . Your task is to transform it into a proper email\r\naddress ([email protected]). It is known that a proper email address\r\ncontains only such symbols as and lower-case Latin letters, doesn\u2019t\r\nstart with and doesn\u2019t end with a dot. Also, a proper email address\r\ndoesn\u2019t start with and doesn\u2019t end with an at sign. Moreover, an email\r\naddress contains exactly one such symbol as , yet may contain any number\r\n(possible, zero) of dots. You have to carry out a series of replacements\r\nso that the length of the result was as short as possible and it was a\r\nproper email address. If the lengths are equal, you should print the\r\nlexicographically minimal result. Overall, two variants of replacement\r\nare possible: can be replaced by a dot, can be replaced by an at.\r\n", "solutions": ["#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<cstdlib>\n#include<algorithm>\n#include<vector>\n#include<string>\n#include<list>\n#include<map>\n#include<set>\n#include<queue>\n#include<stack>\n#include<utility>\n#include<sstream>\nusing namespace std;\n#define FOR(I,A,B) for(int I=(A);I<=(B);I++)\n#define REP(I,N) for(int I=0;I<(N);I++)\n#define ALL(X) (X).begin(),(X).end()\n#define VAR(A,B) __typeof(B) A=B\n#define FORE(I,X) for(VAR(I,(X).begin());I!=(X).end();I++)\n#define F first\n#define S second\n#define INF 1000000007\n#define PB push_back\n#define MP make_pair\ntypedef pair<int,int> PII;\ntypedef long long LL;\nchar tab[134];\nstring imejl;\n\nint main(){\n\tscanf(\"%s\",tab);\n\timejl=tab;\n\tfor(int i=1;i<imejl.size()-1;i++){\n\t\tif (imejl[i]=='a' && imejl[i+1]=='t'){\n\t\t\timejl[i]='@';\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i=1;i<imejl.size()-3;i++){\n\t\tif (imejl[i]=='d' && imejl[i+1]=='o' && imejl[i+2]=='t'){\n\t\t\timejl[i]='.';\n\t\t}\n\t}\n\tREP(i,imejl.size()){\n\t\tif (imejl[i]=='@'){\n\t\t       \tprintf(\"@\");\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tif (imejl[i]=='.'){\n\t\t\tprintf(\".\");\n\t\t\ti+=2;\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"%c\",imejl[i]);\n\t}\n\tprintf(\"\\n\");\n}\n"], "input": "", "output": "", "tags": ["expression parsing", "implementation"], "dificulty": "1300", "interactive": false}