{
    "link": "https://codeforces.com//contest/1882/problem/C",
    "problemId": "2227516",
    "problem_idx": "C",
    "shortId": "1882C",
    "contest_number": "1882",
    "problem_submissions": {
        "E2": [
            225204189,
            225160002,
            225202768,
            225477016,
            225476880,
            225475232,
            225472626
        ],
        "E1": [
            225123936,
            225133746,
            225140131,
            225133665,
            225132240,
            225138063,
            225142760,
            225139602,
            225142422,
            225147512,
            225146106,
            225142740,
            225141291,
            225138856,
            225144845,
            225148151,
            225478094,
            225148992,
            225162295,
            225152100,
            225152337,
            225148869
        ],
        "D": [
            225106356,
            225113280,
            225112999,
            225122785,
            225103764,
            225119012,
            225120043,
            225120508,
            225110063,
            225117734,
            225117249,
            225125156,
            225114397,
            225121683,
            225123705,
            225117693,
            225627016,
            225115870,
            225118591,
            225116324,
            225122541
        ],
        "C": [
            225101844,
            225106102,
            225108446,
            225110739,
            225110971,
            225110665,
            225111630,
            225111292,
            225113490,
            225109057,
            225111482,
            225110667,
            225107121,
            225115756,
            225110831,
            225108821,
            225109177,
            225108521,
            225104527,
            225107759
        ],
        "B": [
            225097300,
            225100132,
            225102630,
            225101761,
            225116077,
            225104479,
            225103013,
            225101827,
            225105709,
            225102804,
            225106906,
            225101186,
            225121302,
            225101604,
            225099036,
            225100746,
            225104002,
            225103297,
            225100386,
            225100570
        ],
        "A": [
            225093910,
            225094018,
            225094163,
            225094069,
            225115330,
            225094938,
            225094567,
            225094063,
            225094790,
            225097756,
            225096481,
            225094301,
            225094479,
            225093976,
            225093977,
            225093952,
            225104147,
            225094178,
            225095571,
            225096872
        ]
    },
    "name": "C. Card Game",
    "statement": "There are n cards stacked in a deck. Initially, a_{i} is written on the\r\ni-th card from the top. The value written on a card does not change.You\r\nwill play a game. Initially your score is 0. In each turn, you can do of\r\nthe following operations: Choose an odd^{\r\ndagger} positive integer i, which is not greater than the number of\r\ncards left in the deck. Remove the i-th card from the top of the deck .\r\nThe remaining cards will be reindexed starting from the top. Choose an\r\neven^{\r\nddagger} positive integer i, which is not greater than the number of\r\ncards left in the deck. Remove the i-th card from the top of the deck.\r\nThe remaining cards will be reindexed starting from the top. End the\r\ngame. You can end the game whenever you want, you have to remove all\r\ncards from the initial deck. What is the maximum score you can get when\r\nthe game ends?^{\r\ndagger} An integer i is odd, if there exists an integer k such that i =\r\n2k + 1.^{\r\nddagger} An integer i is even, if there exists an integer k such that i\r\n= 2k.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=500005;\nint n,m,T,ans,flg;\nint a[maxn];\nstring s;\nint main(){\n\tscanf(\"%d\",&T);\n\twhile(T--){\n\t\tlong long ans=0;\n\t\tscanf(\"%d\",&n);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tscanf(\"%d\",&a[i]);\n\t\tlong long s=0;\n\t\tfor(int i=n;i>=1;i--){\n\t\t\tif(i&1)\n\t\t\t\tans=max(ans,s+a[i]);\n\t\t\telse ans=max(ans,s);\n\t\t\ts+=max(a[i],0);\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Card Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/120792",
    "editorial": "TutorialLet\u00e2\u0080\u0099s denote -th card in the initial deck as card .Let the\r\ntopmost card you\u00e2\u0080\u0099ll pick in the initial deck as card .For all cards\r\nunder card in initial deck, you can choose all and only cards with the\r\npositive value at odd index.Proof: Here is the strategy. Before you pick\r\ncard , if positive card(under card in initial deck) in odd index exists,\r\nchoose it. Repeat this until all positive cards(under card in initial\r\ndeck) are in even index. Then if you choose card , all index of positive\r\ncards(under card in initial deck) will be decreased by , and will become\r\nodd. Now, choose them from the bottom to top, so that the choosing won\u00e2\u0080\u0099t\r\nchange the other positive cards\u00e2\u0080\u0099 index.Denote as the sum of positive\r\nnumbers among , and . Since , can be calculated in . You should\r\nnecessarily pick card in index of , and can pick all positive cards\r\nunder card in initial deck, so your maximum final score will be .The\r\nanswer is .There are lots of other solutions too.\r\n"
}