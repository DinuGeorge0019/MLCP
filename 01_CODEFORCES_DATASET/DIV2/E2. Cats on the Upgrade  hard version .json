{"link": "https://codeforces.com//contest/1625/problem/E2", "problemId": "1258604", "problem_idx": "E2", "shortId": "1625E2", "contest_number": "1625", "problem_submissions": {"E2": [142492395, 142747553, 142585858, 142544817, 142543932, 142508709, 142559014, 142480865], "E1": [142490853, 142508148, 142512533, 142504881, 142515152, 143087068, 142653128, 142500567, 142689991, 142545810, 142545797, 142545556, 142545467, 142545326, 142545262, 142501419, 142513368, 142559018, 142552380, 142479633, 142497816, 142524491, 142499880, 142624103, 142499824, 142519909], "D": [142481572, 142492922, 142487953, 142497240, 142498374, 143087164, 142599139, 142514228, 222453996, 222453785, 142497243, 142486623, 142491954, 142489551, 142492232, 142491133, 142490435, 142499368, 142553310, 142502090, 142500746], "C": [142473156, 142474854, 142475386, 142485242, 142478481, 143087271, 142482654, 142476782, 142498111, 142474938, 142478501, 142483591, 142478318, 142477275, 142483517, 142478815, 142480894, 142480450, 142476700, 142479689], "B": [142469531, 142471088, 142471096, 142472842, 142472506, 143087319, 142469913, 142470866, 142473066, 142471519, 142471936, 142470735, 142472744, 142471752, 142475933, 142471863, 142473722, 142473268, 142472289, 142473807], "A": [142468922, 142469220, 142469548, 142469271, 142469703, 143087364, 142471996, 142469051, 142470684, 142469214, 142469265, 142469095, 142469247, 142469618, 142469909, 142469285, 142470575, 142470471, 142470036, 142469919]}, "name": "E2. Cats on the Upgrade  hard version ", "statement": "\"Interplanetary Software, Inc.\" together with \"Robots of Cydonia, Ltd.\"\r\nhas developed and released robot cats. These electronic pets can meow,\r\ncatch mice and entertain the owner in various ways.The developers from\r\n\"Interplanetary Software, Inc.\" have recently decided to release a\r\nsoftware update for these robots. After the update, the cats must solve\r\nthe problems about bracket sequences. One of the problems is described\r\nbelow. First, we need to learn a bit of bracket sequence theory.\r\nConsider the strings that contain characters \"\", \"\" and \"\". Call a\r\nstring , if it can be transformed to an empty string by one or more\r\noperations of removing either single \"\" characters, or a continuous\r\nsubstring \"\". For instance, the string \"\" is an RBS, as it can be\r\ntransformed to an empty string with the following sequence of removals:\r\n\"\"\r\nrightarrow \"\"\r\nrightarrow \"\"\r\nrightarrow \"\"\r\nrightarrow \"\". We got an empty string, so the initial string was an RBS.\r\nAt the same time, the string \"\" is not an RBS, as it is not possible to\r\napply such removal operations to it.An RBS is if this RBS is not empty,\r\ndoesn\u2019t start with \"\", and doesn\u2019t end with \"\".Denote the of the string\r\ns as its sequential subsegment. In particular, s[l\r\ndots r] = s_ls_{l+1}\r\ndots s_r, where s_i is the i-th character of the string s.Now, move on\r\nto the problem statement itself. You are given a string s, initially\r\nconsisting of characters \"\" and \"\". You need to answer the following\r\nqueries: Given two indices, l and r (1\r\nle l < r\r\nle n). It\u2019s that the l-th character is equal to \"\", the r-th character\r\nis equal to \"\", and the characters between them are equal to \"\". Then\r\nthe l-th and the r-th characters must be set to \"\". Given two indices, l\r\nand r (1\r\nle l < r\r\nle n), and it\u2019s that the substring s[l\r\ndots r] is a . You need to find the number of substrings in s[l\r\ndots r] such that they are simple RBS. In other words, find the number\r\nof index pairs i, j such that l\r\nle i < j\r\nle r and s[i\r\ndots j] is a simple RBS. You are an employee in \"Interplanetary\r\nSoftware, Inc.\" and you were given the task to teach the cats to solve\r\nthe problem above, after the update.\r\n", "solutions": ["#include <bits/stdc++.h>\n#define rep(i,n) for (i=1;i<=(n);i++)\nusing namespace std;\nint n,m,i,mat[300007];\nmap<int,int> id[300007];\nchar s[300007];\nint dfc,nfd[600007],deg[600007],fa[600007],ord[600007];\nint snc;\nlong long r[600007];\nvoid add(int x,long long v){\n\twhile(x<=600006){\n\t\tr[x]+=v;\n\t\tx+=(x&-x);\n\t}\n}\nlong long qsum(int x){\n\tlong long ans=0;\n\twhile(x){\n\t\tans+=r[x];\n\t\tx&=(x-1);\n\t}\n\treturn ans;\n}\nint ex[600007];\nvoid add2(int x,int v){\n\twhile(x<=600006){\n\t\tex[x]+=v;\n\t\tx+=(x&-x);\n\t}\n}\nint qsum2(int x){\n\tint ans=0;\n\twhile(x){\n\t\tans+=ex[x];\n\t\tx&=(x-1);\n\t}\n\treturn ans;\n}\nint solve(int l,int r){\n\tint u=++dfc;\n\tid[l][r]=u;\n\tl++;r--;\n\tif(l>r){\n\t\tnfd[u]=dfc;\n\t\treturn u;\n\t}\n\tvector<int> vson;\n\twhile(l<=r){\n\t\tint son;\n\t\tfa[son=solve(l,mat[l])]=u;\n\t\tl=mat[l]+1;\n\t\tdeg[u]++;\n\t\tvson.push_back(son);\n\t}\n\tfor(int son:vson){\n\t\tord[son]=++snc;\n\t}\n\tadd(u,1ll*deg[u]*(deg[u]+1)/2);\n\tnfd[u]=dfc;\n\treturn u;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tscanf(\" %s\",s+1);\n\tstack<int> c;\n\trep(i,n){\n\t\tif(s[i]=='(') c.push(i);\n\t\telse if(!c.empty()){\n\t\t\tmat[c.top()]=i;\n\t\t\tmat[i]=c.top();\n\t\t\tc.pop();\n\t\t}\n\t}\n\tvector<int> vson;\n\tfor(int i=1;i<=n;i++){\n\t\tif(mat[i]){\n\t\t\tvson.push_back(solve(i,mat[i]));\n\t\t\ti=mat[i];\n\t\t}\n\t}\n\tfor(int son:vson){\n\t\tord[son]=++snc;\n\t}\n\trep(i,snc) add2(i,1);\n\twhile(m--){\n\t\tint op,l,r;\n\t\tscanf(\"%d%d%d\",&op,&l,&r);\n\t\tif(op==2){\n\t\t\tint lid=id[l][mat[l]];\n\t\t\tint rid=id[mat[r]][r];\n\t\t\tprintf(\"%lld\\n\",qsum(nfd[rid])-qsum(lid-1)+1ll*(qsum2(ord[rid])-qsum2(ord[lid])+1)*(qsum2(ord[rid])-qsum2(ord[lid])+2)/2);\n\t\t}\n\t\telse{\n\t\t\tint i=id[l][r];\n\t\t\tif(fa[i]){\n\t\t\t\tadd(fa[i],-deg[fa[i]]);\n\t\t\t\tdeg[fa[i]]--;\n\t\t\t}\n\t\t\tadd2(ord[i],-1);\n\t\t}\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["binary search", "data structures", "dfs and similar", "graphs", "trees"], "dificulty": "2800", "interactive": false}