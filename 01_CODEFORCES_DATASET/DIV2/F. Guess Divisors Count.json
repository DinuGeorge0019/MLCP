{"link": "https://codeforces.com//contest/1355/problem/F", "problemId": "621796", "problem_idx": "F", "shortId": "1355F", "contest_number": "1355", "problem_submissions": {"F": [80362643, 80361142, 80371199, 80375388, 80371644, 80361246, 80376315, 80364923, 80451552, 80451301, 82486662, 80381916, 80385112, 80379306], "E": [80342772, 80347661, 80342876, 80352205, 80343534, 80366285, 80351380, 80344639, 80337870, 80337107, 80341941, 80338367, 80340360, 80336736, 80314570, 80337962, 80336156, 80334884, 80344718], "D": [80330173, 80325918, 80331675, 80332445, 80331125, 80343460, 80342008, 80323259, 80328043, 80317161, 80320497, 80327650, 80330129, 80331474, 80325643, 80327968, 80338287, 80328760], "C": [80320115, 80322649, 80326557, 80321616, 80325868, 80336946, 80347623, 80329416, 80318213, 80323733, 80324197, 80332049, 80321990, 80325577, 80334728, 80333064, 80322766, 80319462, 80324120], "B": [80313084, 80311263, 80314204, 80313526, 80315674, 80318605, 80310517, 80315225, 80313004, 80311116, 80311816, 80310369, 80314982, 80317625, 80337817, 80312634, 80317719, 80311591, 80311875], "A": [80310641, 80315080, 80310450, 80310461, 80311650, 80314001, 80355749, 80319520, 80310211, 80310180, 80310418, 80311667, 80311224, 80310372, 80321351, 80310345, 80316111, 80324974, 80310515]}, "name": "F. Guess Divisors Count", "statement": "We have hidden an integer 1\r\nle X\r\nle 10^{9}. You guess this number. You have to of this number, and you :\r\nyour answer will be considered correct if its absolute error is not\r\ngreater than 7 its relative error is not greater than 0.5. More\r\nformally, let your answer be ans and the number of divisors of X be d,\r\nthen your answer will be considered correct if of the two following\r\nconditions is true: | ans - d |\r\nle 7;\r\nfrac{1}{2}\r\nle\r\nfrac{ans}{d}\r\nle 2.You can make at most 22 queries. One query consists of one integer\r\n1\r\nle Q\r\nle 10^{18}. In response, you will get gcd(X, Q) the greatest common\r\ndivisor of X and Q.The number X is fixed before all queries. In other\r\nwords, .Let\u2019s call the process of guessing the number of divisors of\r\nnumber X a . In one test you will have to play T independent games, that\r\nis, guess the number of divisors T times for T independent values of X.\r\n", "solutions": ["#include <bits/stdc++.h>\n#define ld long double\n#define endl \"\\n\"\n#define fastio ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n#define pb(x) push_back(x)\n#define mp(a,b) make_pair(a,b)\n#define ms(v,x) memset(v,x,sizeof(v))\n#define all(v) v.begin(),v.end()\n#define ff first\n#define ss second\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n//#define per(i, a, b) for(int i = b-1; i>=a ; i--)\n#define trav(a, x) for(auto& a : x)\n#define allin(a , x) for(auto a : x)\n#define td(v) v.begin(),v.end()\n#define sz(v) (int)v.size()\n//#define M   1000000007 // 1e9 + 7\n#define int long long\nusing namespace std;\ntypedef vector<int> vi;\ntypedef long long ll;\ntypedef pair<int,int> pii;\n\ninline ll mod(ll n, ll m ){ ll ret = n%m; if(ret < 0) ret += m; return ret; }\nll gcd(ll a, ll b){return (b == 0LL ? a : gcd(b, a%b));}\n\nll exp(ll a,ll b,ll m){\n    if(b==0LL) return 1LL;\n    if(b==1LL) return mod(a,m);\n    ll k = mod(exp(a,b/2,m),m);\n    if(b&1LL){\n        return mod(a*mod(k*k,m),m);\n    }\n    else return mod(k*k,m);\n}\n\nconst int N = 2e6 + 10;\n  vector<int> p;\n  int mark[N];\n  int small[N];\nvoid crivo(){\n\n  for(int i=1;i<N;i++)small[i] = i;\n  for(int i=2;i<N;i++){\n    if(!mark[i]){\n      p.pb(i);\n      for(int j=2*i;j<N;j+=i){\n        mark[j] = 1;\n        if(small[j]==j)small[j] = i;\n      }\n    }\n  }\n\n\n}\n\nint Q[23];\nvector<ll> inter[23];\n\nvoid precalc(){\n\n  int id=0;\n  for(int i=1;i<=22;i++){\n    ll prod = p[id];\n    inter[i].pb(p[id]);\n    id++;\n    while(prod < 1e18/p[id]){\n      prod*=p[id];\n      inter[i].pb(p[id]);\n      id++;\n    } \n    Q[i] = prod;\n  \n //   cout << Q[i] <<\" \";\n  }\n\n}\n\nll ask(ll x){\n  cout<<\"? \"<<x<<endl;\n  cout.flush();\n  ll g;\n  cin>>g;\n  return g;\n}\n\nint cnt(int pp){\n  ll P = pp;\n  while(P < 1e18 / pp){\n    P*=pp;\n  }\n  ll g = ask(P);\n  int k=0;\n  while(g%pp==0){\n    k++;\n    g/=pp;\n  }\n  return k;\n}\n\nvoid solve(){\n  ll ans = 1;\n  int foi=0;\n  int i = 1;\n  while(foi<22){\n    ll g = ask(Q[i]);\n    foi ++ ;\n    i++;\n    vector<int> primes;\n   for(ll P : inter[i-1]){\n      if(g%P==0)primes.pb(P);\n   }\n\n    int id=0;\n    while(foi<22 and id  < primes.size()){\n      foi++;\n      int x = cnt(primes[id]);\n      ans=1LL*ans*(x+1);\n      \n      id++;\n    }\n    while(id<primes.size()){\n      ans*=2LL;\n      id++;\n    }\n\n  }\n  ans=max(ans*2LL,ans + 7);\n  cout <<\"! \"<< ans << endl;\n  cout.flush();\n}\n\n\nint32_t main(){\n  fastio;\n  crivo();\n  precalc();\n\n  int t;\n  cin >> t;\n  while(t--){\n    solve();\n  }\n  // Math -> gcd it all\n  // Did u check N=1? Did you switch N,M?\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "interactive", "number theory"], "dificulty": "2600", "interactive": false}