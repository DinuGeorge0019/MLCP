{
    "link": "https://codeforces.com//contest/1855/problem/B",
    "problemId": "2119325",
    "problem_idx": "B",
    "shortId": "1855B",
    "contest_number": "1855",
    "problem_submissions": {
        "D": [
            216333466,
            216282930,
            216304321,
            216288702,
            216315573,
            216283245,
            216277730,
            216313898,
            216306202,
            216314199,
            216313213,
            216292626,
            216312027,
            216805668,
            216805337,
            216315274,
            216317158,
            216319074,
            216320064,
            216332564,
            216313414
        ],
        "C1": [
            216327527,
            216265798,
            216278749,
            216252157,
            216263595,
            216261550,
            216296642,
            216259910,
            216265017,
            216265900,
            216266262,
            216246799,
            216254795,
            216264575,
            216271415,
            216266184,
            216256689,
            216266334,
            216273339,
            216281116
        ],
        "C2": [
            216327433,
            216333169,
            216278334,
            216276389,
            216290961,
            216261266,
            216308671,
            216288782,
            216279381,
            216300131,
            216292122,
            216299685,
            216284770,
            216286877,
            216294260,
            216296589,
            216302878,
            216296848,
            216273167,
            216291700
        ],
        "B": [
            216319187,
            216239575,
            216251320,
            216239516,
            216251539,
            216242319,
            216247221,
            216244993,
            216252246,
            216251732,
            216255891,
            216249364,
            216243332,
            216244237,
            216260716,
            216245518,
            216240380,
            216281460,
            216248098,
            216245806
        ],
        "A": [
            216318294,
            216235675,
            216247364,
            216235951,
            216238094,
            216238019,
            216237152,
            216237362,
            216248778,
            216237335,
            216241402,
            216238578,
            216237824,
            216238112,
            216254438,
            216237599,
            216236030,
            216240134,
            216239210,
            216238506
        ],
        "E": [
            216307488,
            216320937,
            216323420,
            216339638,
            216487251,
            216321175,
            216593212,
            216352369
        ],
        "F": [
            216295921,
            216331597,
            216627506
        ]
    },
    "name": "B. Longest Divisors Interval",
    "statement": "Given a positive integer n, find the maximum size of an interval [l, r]\r\nof positive integers such that, for every i in the interval (i.e., l\r\nleq i\r\nleq r), n is a multiple of i.Given two integers l\r\nle r, the size of the interval [l, r] is r-l+1 (i.e., it coincides with\r\nthe number of integers belonging to the interval).\r\n",
    "solutions": [
        "#pragma GCC optimize(3)\n// #pragma GCC optimize(\"trapv\")\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\n \n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define all(x) begin(x), end(x)\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\nconst int N=200007;\nconst int INF=1e9;\nconst int mod=1e9+7;\nconst double pi=acos(-1);\nmt19937_64 rng(time(NULL));\n \nint n;\nint a[N];\nint sum[N];\nsigned main(){\n  ios::sync_with_stdio(false);\n  cin.tie(0), cout.tie(0);\n  int _;\n  cin>>_;\n  while (_--){\n    int n;\n    cin>>n;\n    for (int i=1;i<=10000;++i){\n      if (n%i){cout<<i-1<<\"\\n\"; break;}\n    }\n  }\n}  "
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "combinatorics",
        "greedy",
        "math",
        "number theory"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Longest Divisors Interval.json",
    "editorial_link": "https://codeforces.com//blog/entry/118540",
    "editorial": "SolutionSuppose you find a valid interval . Note that the interval\r\ncontains at least one multiple of for each (you can find it out by\r\nlooking at the values in modulo ). Then, the interval is also valid and\r\nhas the same length.So, itâs enough to check intervals with , i.e., find\r\nthe smallest that does not divide . The answer is .Complexity:\r\n",
    "hint": [
        "Hint 1 What's the answer if is odd?",
        "Hint 2 Try to generalize Hint 1.",
        "Hint 3 What's the answer if is not a multiple of ?",
        "Hint 4 If the answer is not a multiple of , the answer is . If the answer is a multiple of , the answer is .",
        "Hint 1 There are several solutions to the easy version. In any case, how to get ?",
        "Hint 2 For example, you can try making bigger using a positive element. What to do if all the elements are negative?",
        "Hint 3 If all the elements are negative, you can win in moves. If there is a positive element, you can try to make , then , etc.",
        "Hint 4 Make a big positive element using moves , then make bigger.",
        "Hint 5 You can win in moves if all the elements are negative, but also if all the elements are positive.",
        "Hint 6 Again, make a big positive / negative element, then use it to make everything positive / negative.",
        "Hint 7 In how many moves can you either make everything positive or make everything negative?",
        "Hint 8 Assume the positive elements are at least as many as the negative elements. Can you win in moves?",
        "Hint 9 The bottleneck is making the big positive element. Is it always necessary? Can you find a better bound on the \"best\" number of moves?",
        "Hint 1 The order of used cards doesn't matter. So, you can assume you always use the card on the top.",
        "Hint 2 Suppose that you unlock cards in total. How many points can you get?",
        "Hint 3 If you unlock cards, it means you end up making moves with the first cards. So, you know the total number of (cards + points) that you get.",
        "Hint 4 If you unlock cards, the number of points is uniquely determined. It's convenient to assume that and the cards have value .",
        "Hint 5 Now you have to determine the unlockable prefixes of cards (i.e., the values of you can reach). It looks similar to knapsack.",
        "Hint 6 You can optimize the solution using a bitset. Be careful not to use locked cards.",
        "Hint 1 Consider blocks in positions . After how much time does block disappear? It may be convenient to put a fake \"static\" block in position .",
        "Hint 2 Block disappears when it reaches block . But what if block disappears before block ?",
        "Hint 3 From the perspective of block , it's convenient to assume that block never disappears: when it touches another block , it's that disappears.",
        "Hint 4 When you consider the pair of blocks , the other blocks don't really matter, and you can use linearity of expectation to calculate the contribution of each pair independently. A reasonable interpretation is given by considering an grid, where the -th row initially contains a block in column . Then, you are calculating the expected time required for the blocks to have another block immediately below them (in the same column).",
        "Hint 5 Blocks both move with probability , unless block has reached position .",
        "Hint 6 expected number of moves of block before it disappears, if the block is in position and the block is in position .",
        "Hint 1 You can find any in queries.",
        "Hint 2 Find the nodes in the cycle in the component with node . What happens if you know the whole cycle?",
        "Hint 3 Suppose you already know some nodes in the cycle. Can you find other nodes faster?",
        "Hint 4 Can you \"double\" the number of nodes in the cycle?",
        "Hint 1 Go for a randomized approach.",
        "Hint 2 Many ones are useful.",
        "Hint 3 Either you go for a greedy or for a backpack.",
        "Hint 1 Solve the 2d version first.",
        "Hint 2 The 4d version is not too different from the 2d one.",
        "Hint 3 Find all the points such that the expected number of necessary moves is wrong.",
        "Hint 1 Suppose we limit the number line to m(Cannot move beyond it). What is the condition for block X to disappear? (Note that block X doesn't correspond to the number X, just some block that moves to the right)",
        "Hint 2 The trick is to notice one block X touches block X+1 (i.e block X correspond to some number k, and block X+1 is k+1, and we try to remove block X). This is equivalent to block X just disappearing. This is why having a static block at M+1 in hint 1 makes it easier to reason about. But what if block X+1 \"disappears\" first?",
        "Hint 3 Notice, this doesn't matter. When block X+1 \"disappears\", it must have touched block >= X+2, from the perspective of block X however, we can view it as the block >= X+2 disappearing and block X+1 just moving right."
    ]
}