{"link": "https://codeforces.com//contest/1712/problem/F", "problemId": "1501809", "problem_idx": "F", "shortId": "1712F", "contest_number": "1712", "problem_submissions": {"F": [168185997, 168251887, 168219993], "D": [168145291, 168129998, 168130818, 168126018, 168130208, 168150361, 168134585, 168133390, 168138455, 168134081, 168125783, 168137077, 168136879, 168129408, 168136930, 168129243, 168125119, 168132698, 168160697], "E2": [168140188, 168158270, 168148121, 168161916, 168160378, 168143972, 168164627, 168154079, 168159111, 168162533, 168162132, 168162930, 168162457, 168165260, 168162375, 168157107, 168171929, 168162727, 168146310], "E1": [168139990, 168143565, 168142598, 168152240, 168154486, 168136125, 168153299, 168148039, 168146574, 168156854, 168162049, 168149859, 168153717, 168157309, 168155734, 168157279, 168163352, 168162849, 168111592], "C": [168099696, 168121142, 168097588, 168110349, 168111432, 168115384, 168111269, 168107817, 168332689, 168116564, 168111708, 168108690, 168109977, 168116188, 168105860, 168124053, 168136319, 168107454, 168118827, 168132254], "B": [168092536, 168105158, 168090795, 168101197, 168098906, 168103766, 168096786, 168097289, 168095985, 168094917, 168094914, 168099431, 168102987, 168092377, 168105879, 168092526, 168097397, 168101154, 168148773], "A": [168089016, 168089238, 168089117, 168090448, 168090182, 168095836, 168091066, 168089267, 168092084, 168090133, 168090067, 168092244, 168092571, 168089003, 168099380, 168089001, 168089147, 168093453, 168116561]}, "name": "F. Triameter", "statement": "You and Your SubmissionA tree is a connected undirected graph without\r\ncycles. A weighted tree has a weight assigned to each edge. The degree\r\nof a vertex is the number of edges connected to this vertex.You are\r\ngiven a weighted tree with n vertices, each edge has a weight of 1. Let\r\nL be the set of vertices with degree equal to 1. You have to answer q\r\nqueries. In the i-th query: You are given a positive integer x_i. For\r\nall u,v\r\nin L such that u < v, add edge (u, v) with weight x_i to the graph\r\n(initially the given tree). Find the diameter of the resulting graph.\r\nThe diameter of a graph is equal to\r\nmax\r\nlimits_{1\r\nle u < v\r\nle n}{\r\noperatorname{d}(u, v)}, where\r\noperatorname{d}(u, v) is the length of the shortest path between vertex\r\nu and vertex v.\r\n", "solutions": ["#pragma GCC optimize(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std;\n#define end ed\n#define N 1000005\nint fa[N],f1[N],qwq,f2[N],f3[N],fir[N],end[N],dep[N],tot,rmq[N<<1],D[N<<1][21],lg[N<<1],LG;\nvector<int>son[N];\nstruct node{\n\tint x,y;\n}f[N];\nint Dis(int x,int y){\n\tLG=lg[y-x+1];\n\treturn min(D[x][LG],D[y-(1<<LG)+1][LG]);\n}\nint dis(int x,int y){\n\tif(fir[x]<=end[y]){\n\t\treturn dep[x]+dep[y]-(Dis(fir[x],end[y])<<1);\n\t}\n\treturn dep[x]+dep[y]-(Dis(fir[y],end[x])<<1);\n}\ninline bool cmp(node aa,node bb){\n\treturn aa.y<bb.y;\n}\nvoid dfs(int now){\n\tif(son[now].size()==0)f1[now]=0;\n\telse f1[now]=1e9;\n\tf2[now]=1e9;\n\trmq[++tot]=now;fir[now]=end[now]=tot;\n\tfor(int T,i=0;i<son[now].size();++i){\n\t\tdfs(T=son[now][i]);\n\t\tif(f1[T]+1<f1[now])f2[now]=f1[now],f1[now]=f1[T]+1;\n\t\telse f2[now]=min(f2[now],f1[T]+1);\n\t\trmq[++tot]=now;\n\t\tend[now]=tot;\n\t}\n}\nnamespace IO{\n\tchar ibuf[1<<20],*ip1=0,*ip2=0;\n\tchar gc(){if(ip1==ip2)ip1=ibuf,ip2=ibuf+fread(ibuf,1,1<<20,stdin);return ip1==ip2?EOF:*ip1++;}\n\tchar obuf[1<<20],*op1=obuf,*op2=obuf+(1<<20);\n\tvoid flush(){fwrite(obuf,1,op1-obuf,stdout);}\n\tvoid pc(char c){*op1++=c;if(op1==op2)flush(),op1=obuf;}\n\tstruct ioo{ioo(){}~ioo(){flush();}}ioo;\n};\nusing namespace IO;\nint read(){\n\tint ret=0,t=1;char c=gc();\n\twhile((c<'0'||c>'9')&&c!='-')c=gc();if(c=='-')t=-1,c=gc();\n\twhile(c>='0'&&c<='9')ret=ret*10+c-'0',c=gc();return ret*t;\n}\nvoid dfs_(int now){\n\tfor(int T,i=0;i<son[now].size();++i){\n\t\tT=son[now][i];dep[T]=dep[now]+1;\n\t\tif(f1[now]==f1[T]+1)f3[T]=f2[now]+1;\n\t\telse f3[T]=f1[now]+1;\n\t\tf3[T]=min(f3[T],f3[now]+1);\n\t\tdfs_(T);\n\t}\n}\nint n,i,j,g[N][2],diss[N],l,r,mid,q,x,len;\nint check(int ans){\n\tj=n;\n\tif(qwq>=(n>>2)&&n==1000000){\n\t\tfor(i=1;diss[i]>=ans;++i){\n\t\t\twhile(j&&f[i].y+f[j].y+x>=ans)--j;\n\t\t\tif(j!=n){\n\t\t\t\tif(dis(f[i].x,g[j+1][0])>=ans){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif(dis(f[i].x,g[j+1][1])>=ans){\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\tfor(i=1;i<=n;++i){\n\t\twhile(j&&f[i].y+f[j].y+x>=ans)--j;\n\t\tif(j>=i&&diss[i]<ans)continue;\n\t\tif(j!=n){\n\t\t\tif(dis(f[i].x,g[j+1][0])>=ans){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif(dis(f[i].x,g[j+1][1])>=ans){\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint main(){\n\tn=read();\n\tfor(i=2;i<=n;++i)fa[i]=read(),son[fa[i]].push_back(i),qwq+=fa[i]==i-1;\n\tdfs(1);\n\tif(son[1].size()==1)f3[1]=0;\n\telse f3[1]=1e9;\n\tdfs_(1);\n\tlg[1]=0;\n\tfor(i=2;i<(n<<1);++i){\n\t\tlg[i]=lg[i-1]+((i&-i)==i);\n\t}\n\tfor(i=1;i<=n;++i)f1[i]=min(f1[i],f3[i]),f[i].x=i,f[i].y=f1[i];\n\tsort(f+1,f+n+1,cmp);\n\tfor(i=1;i<=tot;++i){\n\t\tD[i][0]=dep[rmq[i]];\n\t}\n\tfor(i=0;(1<<i+1)<tot;++i){\n\t\tfor(j=1;j<=tot-(1<<i);++j){\n\t\t\tif(D[j][i]<=D[j+(1<<i)][i])D[j][i+1]=D[j][i];\n\t\t\telse D[j][i+1]=D[j+(1<<i)][i];\n\t\t}\n\t\tfor(;j<=tot;++j)D[j][i+1]=D[j][i];\n\t}\n\tg[n][0]=f[n].x;\n\tg[n][1]=f[n].x;\n\tdiss[n]=0;\n\tg[n-1][0]=f[n-1].x;\n\tg[n-1][1]=f[n-1].x;\n\tdiss[n-1]=dis(f[n].x,f[n-1].x);\n\tfor(i=n-2;i;--i){\n\t\tint d1=dis(f[i].x,g[i+1][0]),d2=dis(f[i].x,g[i+1][1]);\n\t\tg[i][0]=g[i+1][0];\n\t\tg[i][1]=g[i+1][1];\n\t\tdiss[i]=diss[i+1];\n\t\tif(d1>=d2&&d1>diss[i+1]){\n\t\t\tdiss[i]=d1;\n\t\t\tg[i][1]=f[i].x;\n\t\t}\n\t\tif(d2>d1&&d2>diss[i+1]){\n\t\t\tdiss[i]=d2;\n\t\t\tg[i][0]=f[i].x;\n\t\t}\n\t}\n\tq=read();\n\twhile(q--){\n\t\tx=read();\n\t\tl=0;\n\t\tfor(i=1;i<=n;++i)l=max(l,min(diss[i],f1[g[i][0]]+f1[g[i][1]]+x));\n\t\tr=min(diss[1],f[n].y+f[n-1].y+x);\n\t\twhile(l<r){\n\t\t\tmid=r-(r-l>>1);\n\t\t\tif(check(mid))l=mid;\n\t\t\telse r=mid-1;\n\t\t}\n\t\tcout<<l<<'\\n';\n\t}\n} "], "input": "", "output": "", "tags": ["binary search", "data structures", "dfs and similar", "trees"], "dificulty": "3200", "interactive": false}