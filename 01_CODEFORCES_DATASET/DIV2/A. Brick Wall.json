{
    "link": "https://codeforces.com//contest/1918/problem/A",
    "problemId": "2452571",
    "problem_idx": "A",
    "shortId": "1918A",
    "contest_number": "1918",
    "problem_submissions": {
        "G": [
            244132893,
            245985475,
            244948797,
            244948670
        ],
        "F": [
            244120772,
            244125092,
            244126848,
            244126771,
            244130168,
            244131697,
            244138260,
            244138344,
            244139263,
            244138435,
            244141669,
            244144124,
            244142227,
            244122678,
            244157073,
            244156595,
            244332251,
            244124771,
            244360495,
            244129898
        ],
        "D": [
            244109167,
            244099156,
            244092966,
            244101787,
            244100881,
            244108481,
            244101721,
            244106486,
            244109529,
            244104916,
            244106995,
            244113590,
            244113865,
            244099423,
            244110295,
            244096244,
            244108027,
            244103663,
            244360463,
            244108155
        ],
        "E": [
            244103507,
            244108050,
            244110113,
            244110472,
            244112287,
            244124161,
            244125655,
            244123391,
            244119446,
            244125406,
            244135128,
            244134725,
            244128795,
            244112679,
            244118320,
            244116217,
            244928601,
            244928561
        ],
        "C": [
            244091247,
            244087599,
            244079342,
            244087694,
            244092782,
            244089213,
            244094187,
            244089808,
            244094684,
            244096501,
            244097023,
            244099017,
            244107490,
            244085730,
            244089866,
            244086764,
            244094953,
            244095107,
            244360406,
            244091142
        ],
        "B": [
            244083801,
            244076050,
            244075794,
            244073267,
            244075602,
            244075619,
            244082026,
            244079074,
            244080512,
            244082819,
            244079063,
            244082004,
            244078089,
            244075054,
            244078156,
            244075906,
            244081851,
            244083244,
            244360342,
            244080338
        ],
        "A": [
            244083099,
            244071431,
            244072186,
            244071210,
            244070855,
            244071315,
            244075506,
            244071630,
            244072257,
            244074358,
            244071939,
            244071253,
            244071114,
            244071560,
            244071154,
            244071990,
            244074495,
            244089579,
            244360312,
            244073174
        ]
    },
    "name": "A. Brick Wall",
    "statement": "A brick is a strip of size 1\r\ntimes k, placed horizontally or vertically, where k can be an arbitrary\r\nnumber that is at least 2 (k\r\nge 2).A brick wall of size n\r\ntimes m is such a way to place several bricks inside a rectangle n\r\ntimes m, that all bricks lie either horizontally or vertically in the\r\ncells, do not cross the border of the rectangle, and that each cell of\r\nthe n\r\ntimes m rectangle belongs to exactly one brick. Here n is the height of\r\nthe rectangle n\r\ntimes m and m is the width. that there can be bricks with different\r\nvalues of k in the same brick wall.The wall stability is the difference\r\nbetween the number of horizontal bricks and the number of vertical\r\nbricks. that if you used 0 horizontal bricks and 2 vertical ones, then\r\nthe stability will be .What is the maximal possible stability of a wall\r\nof size n\r\ntimes m?It is guaranteed that under restrictions in the statement at\r\nleast one n\r\ntimes m wall exists.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define N ;\n#define P 1000000007\n#define INF 1061109567\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int,int> PII;\ntypedef unsigned long long ull;\nchar buf[1<<20],*p1,*p2;\n#define GC (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<20,stdin),p1==p2)?0:*p1++)\ninline ll read(){\n\tll x=0,f=1;char ch=GC;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=GC;}\n\twhile(ch>='0'&&ch<='9'){x=(x<<1)+(x<<3)+(ch^48);ch=GC;}\n\treturn x*f;\n}\nvoid Solve(){\n\tint n=read(),m=read();\n\tprintf(\"%d\\n\",n*(m/2));\n}\nint main(){\n\tfor(int T=read();T--;)Solve();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Brick Wall.json",
    "editorial_link": "https://codeforces.com//blog/entry/125300",
    "editorial": "TutorialThe stability of the wall is the number of horizontal bricks\r\nminus the number of vertical bricks. Since a horizontal brick has a\r\nlength of at least , no more than horizontal bricks can be placed in one\r\nrow. Therefore, the answer does not exceed . On the other hand, if\r\nhorizontal bricks of length are placed in a row, and when is odd, the\r\nlast brick has a length of , then in each row there will be exactly\r\nhorizontal bricks, and there will be no vertical bricks in the wall at\r\nall. This achieves the maximum stability of . The solution is one\r\nformula, so it works in time.\r\n",
    "hint": []
}