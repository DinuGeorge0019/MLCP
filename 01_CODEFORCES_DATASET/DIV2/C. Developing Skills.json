{
    "link": "https://codeforces.com//contest/581/problem/C",
    "problemId": "36592",
    "problem_idx": "C",
    "shortId": "581C",
    "contest_number": "581",
    "problem_submissions": {
        "F": [
            13269721,
            13273884,
            13274265,
            13275076,
            13273744,
            28883204,
            28746729,
            47707720
        ],
        "D": [
            13265543,
            13266561,
            13267830,
            13267677,
            13269943,
            13268843,
            13267395,
            13266212,
            13271770,
            13271940,
            13275900,
            13267190,
            13291663,
            13273782,
            13269289,
            13268754,
            13272747,
            13271148,
            13266871
        ],
        "C": [
            13263338,
            13262839,
            13263933,
            13262818,
            13262223,
            13263848,
            13264045,
            13262035,
            13264956,
            13270049,
            13269879,
            13263828,
            13264992,
            13264829,
            13264204,
            13266233,
            13265980,
            13264067,
            13263215
        ],
        "B": [
            13262072,
            13261090,
            13262462,
            13261193,
            13266387,
            13261281,
            13260860,
            13260910,
            13262535,
            13261711,
            13263433,
            13261203,
            13261560,
            13261063,
            13261266,
            13262720,
            13262876,
            13261537,
            13260790
        ],
        "A": [
            13260348,
            13259765,
            13260479,
            13259829,
            13262614,
            13259668,
            13259435,
            13259565,
            13260421,
            13259502,
            13259898,
            13259464,
            13259945,
            13259651,
            13259594,
            13259520,
            13260392,
            13260013,
            13259545
        ]
    },
    "name": "C. Developing Skills",
    "statement": "Petya loves computer games. Finally a game that he\u2019s been waiting for so\r\nlong came out!The main character of this game has different skills, each\r\nof which is characterized by an integer from 0 to 100. The higher the\r\nnumber is, the higher is the -th skill of the character. The total\r\nrating of the character is calculated as the sum of the values of for\r\nall from 1 to . The expression denotes the result of rounding the number\r\nto the nearest integer.At the beginning of the game Petya got\r\nimprovement units as a bonus that he can use to increase the skills of\r\nhis character and his total rating. One improvement unit can increase\r\nany skill of Petya\u2019s character by exactly one. For example, if , after\r\nusing one imporvement unit to this skill, it becomes equal to 47. A\r\nhero\u2019s skill cannot rise higher more than 100. Thus, it is permissible\r\nthat some of the units will remain unused.Your task is to determine the\r\noptimal way of using the improvement units so as to maximize the overall\r\nrating of the character. It is not necessary to use all the improvement\r\nunits.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#include<vector>\n#include<map>\n#include<set>\n#include<stack>\n#include<string>\n#include<cmath>\n#include<cctype>\n#include<ctime>\n#include<bitset>\nusing namespace std;\nconst int maxlongint=2147483647;\nconst int inf=1000000000;\nint num[100010],f[100010];\nint main()\n{\n    int n,n1,k,now=0,ans=0;\n    cin>>n>>k;\n    for(n1=1;n1<=n;n1++)\n    {\n        scanf(\"%d\",&num[n1]);\n        ans+=num[n1]/10;\n        now+=100-num[n1];\n        f[10-num[n1]%10]++;\n    }\n    k=min(k,now);\n    for(n1=1;n1<=9;n1++)\n        if(k>=f[n1]*n1)\n        {\n            ans+=f[n1];\n            k-=f[n1]*n1;\n        }\n        else\n        {\n            ans+=k/n1;\n            cout<<ans;\n            return 0;\n        }\n    ans+=k/10;\n    cout<<ans;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "math",
        "sortings"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Developing Skills.json",
    "editorial_link": "https://codeforces.com//blog/entry/20508",
    "editorial": "This problem can be solved in many ways. Let's consider the most intuitive way that fits in the given time.\n\nIn the beginning we need to sort given array in the following way \u0097 from two numbers to the left should be the number to which must be added fewer units of improvements to make it a multiple of 10. You must add at least one unit of energy to every of this numbers. For example, if given array is {45,?30,?87,?26} after the sort the array must be equal to {87,?26,?45,?30}.\n\nNow we iterate on the sorted array for i from 1 to n. Let's cur?=?10?-?(aimod10). If cur???k assign ai?=?ai?+?cur and from k subtract cur else if cur?>?k break from cycle.\n\nThe next step is to iterate on array in the same way.\n\nNow we need only to calculate answer ans \u0097 we iterate on array for i from 1 to n and assign ans?=?ans?+?(ai?/?10).\n\nAsymptotic behavior of this solution \u0097 O(n?*?log(n)) where n is the number of hero skills."
}