{
    "link": "https://codeforces.com//contest/1421/problem/E",
    "problemId": "763580",
    "problem_idx": "E",
    "shortId": "1421E",
    "contest_number": "1421",
    "problem_submissions": {
        "E": [
            95894390,
            95897364,
            95896435,
            95890539,
            95992885,
            96032464,
            95960888,
            95899400
        ],
        "D": [
            95871709,
            95861267,
            95879423,
            95894755,
            95871704,
            95872756,
            95872599,
            95874589,
            95875351,
            95876553,
            95875903,
            95874887,
            95874932,
            95876575,
            95875075,
            95872464,
            95875457,
            95901124,
            95900956,
            95877542
        ],
        "B": [
            95869646,
            95869234,
            95864293,
            95863175,
            95860152,
            95861589,
            95869345,
            95861607,
            95862906,
            95862340,
            95863307,
            95861094,
            95864173,
            95860695,
            95863889,
            95864493,
            95862062,
            95861398
        ],
        "C": [
            95868136,
            95871765,
            95866274,
            95868511,
            95867450,
            95867807,
            95865115,
            95865747,
            95867493,
            95867265,
            95868458,
            95867762,
            95869507,
            95869832,
            95870224,
            95865361,
            95865425,
            95869153
        ],
        "A": [
            95860954,
            95862603,
            95857167,
            95856436,
            95856303,
            95856722,
            95856474,
            95856404,
            95859234,
            95857052,
            95856721,
            95856373,
            95856800,
            95856207,
            95856312,
            95856260,
            95856810,
            95856671
        ]
    },
    "name": "E. Swedish Heroes",
    "statement": "While playing yet another strategy game, Mans has recruited n Swedish\r\nheroes, whose powers which can be represented as an array\r\na.Unfortunately, not all of those mighty heroes were created as capable\r\nas he wanted, so that he decided to do something about it. In order to\r\naccomplish his goal, he can pick two consecutive heroes, with powers a_i\r\nand a_{i+1}, remove them and insert a hero with power -(a_i+a_{i+1})\r\nback in the same position. For example if the array contains the\r\nelements [5, 6, 7, 8], he can pick 6 and 7 and get [5, -(6+7), 8] = [5,\r\n-13, 8].After he will perform this operation n-1 times, Mans will end up\r\nhaving only one hero. He wants his power to be as big as possible.\r\nWhat\u2019s the largest possible power he can achieve?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nusing llint = long long;\n\ninline void err() { cerr << endl; }\n\ntemplate<typename hd, typename... tl> void err(hd a, tl... b) {\n#ifdef KH_CODE\n\tcerr << a << ' '; err(b...);\n#endif\n}\n\ntemplate<typename hd, typename tl> void chkmin(hd& a, tl b) {\n\tif(b < a) a = b;\n}\n\ntemplate<typename hd, typename tl> void chkmax(hd& a, tl b) {\n\tif(a < b) a = b;\n}\n\nconst int MX = 200005;\n\nllint a[MX];\nvector <pair<llint, int>> V;\nvector<int> buf;\n\nint main() {\n#ifdef KH_CODE\n\tfreopen(\"in.txt\", \"r\", stdin);\n\tfreopen(\"out.txt\", \"w\", stdout);\n#endif\n\n\tios_base::sync_with_stdio(0);\n\t\n\tint n; cin >> n;\n\tllint tot = 0, rlt = -LLONG_MAX;\n\tfor(int i = 0; i < n; i++) {\n\t\tcin >> a[i];\n\t\ttot += a[i];\n\t\tV.push_back({a[i], i});\n\t}\n\tif(n == 1) cout << a[0] << endl;\n\telse if(n == 2) cout << -(a[0] + a[1]) << endl;\n\telse if(n == 3) cout << max(a[0] + a[1] - a[2], a[2] + a[1] - a[0]) << endl;\n\telse {\n\t\tsort(V.begin(), V.end());\n\t\tint s = 2 - n % 3;\n\t\ts = n - s;\n\t\ts %= 3;\n\t\tint c = 0;\n\t\tllint cur = 0;\n\t\twhile(s <= n) {\n\t\t\twhile(c < s) cur += V[c++].first;\n\t\t\tif(abs(s * 2 - n) <= 1) {\n\t\t\t\tllint tp = 0;\n\t\t\t\tbuf.clear();\n\t\t\t\tfor(int i = 0; i < s; i++) {\n\t\t\t\t\ttp += V[i].first;\n\t\t\t\t\tbuf.push_back(V[i].second);\n\t\t\t\t}\n\t\t\t\tsort(buf.begin(), buf.end());\n\t\t\t\tbool ok = 0;\n\t\t\t\tfor(int i = 0; i < buf.size() - 1; i++) if(buf[i + 1] - buf[i] != 2) {\n\t\t\t\t\tok = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(ok) rlt = max(rlt, tot -  tp * 2);\n\t\t\t\telse rlt = max(rlt, tot - 2 * (tp - V[s - 1].first + V[s].first));\n\t\t\t}\n\t\t\telse rlt = max(rlt, tot - 2 * cur);\n\t\t\ts += 3;\n\t\t}\n\t\tcout << rlt << endl;\n\t}\n\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "implementation"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Swedish Heroes.json",
    "editorial_link": "https://codeforces.com//blog/entry/83761",
    "editorial": "Idea and solution: flaviu2001 Sneaky corner caseBefore you try to find\r\npatterns you should observe that there is one case that is impossible to\r\nreach. You cannot assign alternating + and to the array, like or . The\r\nreason is very simple, the very first thing you do is apply the\r\noperation on two consecutive numbers and make them both , and whenever\r\nyou apply further operations on the both of them they remain the same\r\nsign. In the end we decided to give this in the samples but we know from\r\ntesting many would miss this case.\r\n"
}