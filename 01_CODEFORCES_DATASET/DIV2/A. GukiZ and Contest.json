{
    "link": "https://codeforces.com//contest/551/problem/A",
    "problemId": "29252",
    "problem_idx": "A",
    "shortId": "551A",
    "contest_number": "551",
    "problem_submissions": {
        "E": [
            11555073,
            11556189,
            11556267,
            12093920,
            12093908,
            12093899,
            12093877,
            11569219,
            12075099,
            11560541,
            11974261
        ],
        "C": [
            11550228,
            11551507,
            11551274,
            11549626,
            11554425,
            11552178,
            11551280,
            11551429,
            11550037,
            11552051,
            11552542,
            11553869,
            11554092,
            11551179,
            11554624,
            11555215,
            11554114,
            11556563
        ],
        "B": [
            11547200,
            11548697,
            11548210,
            11548298,
            11557853,
            11549187,
            11548320,
            11548758,
            11553975,
            11549363,
            11548545,
            11548081,
            11548144,
            11549688,
            11551583,
            11555068,
            11550330,
            11549557,
            11552446,
            11549314
        ],
        "A": [
            11546166,
            11546483,
            11546960,
            11546195,
            11546251,
            11547284,
            11546221,
            11546416,
            11546211,
            11546383,
            11546301,
            11546208,
            11546276,
            11546409,
            11547548,
            11546344,
            11547064,
            11546598,
            11546207,
            11546571
        ],
        "D": [
            11557988,
            11557349,
            11552518,
            11560739,
            11558020,
            11557476,
            11555146,
            11555685,
            11602898,
            11557308,
            11561475
        ]
    },
    "name": "A. GukiZ and Contest",
    "statement": "Professor GukiZ likes programming contests. He especially likes to rate\r\nhis students on the contests he prepares. Now, he has decided to prepare\r\na new contest. In total, students will attend, and before the start,\r\nevery one of them has some positive integer rating. Students are indexed\r\nfrom to . Let\u2019s denote the rating of -th student as . After the contest\r\nends, every student will end up with some positive integer position.\r\nGukiZ expects that his students will take places according to their\r\nratings. He thinks that each student will take place equal to . In\r\nparticular, if student has rating strictly lower then student , will get\r\nthe strictly better position than , and if two students have equal\r\nratings, they will share the same position. GukiZ would like you to\r\nreconstruct the results by following his expectations. Help him and\r\ndetermine the position after the end of the contest for each of his\r\nstudents if everything goes as expected.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <ctime>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <deque>\n#include <set>\n#include <map>\n\n#define pb push_back\n#define mp make_pair\n#define LL long long\n#define LD long double\n#define maxlongint 2147483647\n\nusing namespace std;\n\nconst int inf = 999999999;\nconst int mod = 1000000007;\n\ninline int Getint()\n{\n\tchar ch = getchar();\n\twhile (ch < '0' || ch > '9') ch = getchar();\n\tint ret = 0;\n\twhile (ch >= '0' && ch <= '9') ret = ret * 10 + ch - '0', ch = getchar();\n\treturn ret;\n}\n\nint a[2010];\nint n;\n\nint main()\n{\n\tn = Getint();\n\tfor (int i = 1; i <= n; i++) a[i] = Getint();\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tint ans = 0;\n\t\tfor (int j = 1; j <= n; j++) if (a[j] > a[i]) ans++;\n\t\tprintf(\"%d \", ans + 1);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "sortings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. GukiZ and Contest.json",
    "editorial_link": "https://codeforces.com/blog/entry/18508",
    "editorial": "Very simple implementation problem. Just implement what is written in the statement: for every element of array, find the number of array elements greater than it, and add one to the sum. This can be easily done with two nested loops. Total complexity O(n2).\n"
}