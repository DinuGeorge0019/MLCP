{
    "link": "https://codeforces.com//contest/828/problem/B",
    "problemId": "113852",
    "problem_idx": "B",
    "shortId": "828B",
    "contest_number": "828",
    "problem_submissions": {
        "A": [
            28460309,
            28447412,
            28433654,
            28431619,
            28432255,
            28431175,
            28432122,
            28431834,
            28432270,
            28431560,
            28438332,
            28431659,
            28431601,
            28431041,
            28431462,
            28431315,
            28448076,
            28431218,
            28431027
        ],
        "F": [
            28448238,
            28470827,
            28472010,
            30446292,
            32054149
        ],
        "E": [
            28442480,
            28440989,
            28445030,
            28444433,
            28441533,
            28446059,
            28447307,
            28490530,
            28447795,
            28447314,
            28449259,
            28447763,
            28449409,
            28448527,
            28448262
        ],
        "D": [
            28439191,
            28443487,
            28440542,
            28439312,
            28444576,
            28440699,
            28440733,
            28440504,
            28444280,
            28446082,
            28441981,
            28439597,
            28441709,
            28443017,
            28442903,
            28439094,
            28443722,
            28448787,
            28443893
        ],
        "C": [
            28435698,
            28435500,
            28439027,
            28435829,
            28437161,
            28436717,
            28438157,
            28436695,
            28443065,
            28454126,
            28453810,
            28440499,
            28438924,
            28437102,
            28438928,
            28438895,
            28436411,
            28440043,
            28437230,
            28439797,
            28439825,
            28439032
        ],
        "B": [
            28433895,
            28433617,
            28434962,
            28433706,
            28433707,
            28434566,
            28434207,
            28434454,
            28435513,
            28435599,
            28434805,
            28433677,
            28435479,
            28434438,
            28432799,
            28434943,
            28434343,
            28435242,
            28433224,
            28433253
        ]
    },
    "name": "B. Black Square",
    "statement": "Polycarp has a checkered sheet of paper of size . Polycarp painted some\r\nof cells with black, the others remained white. Inspired by Malevich\u2019s\r\n\"Black Square\", Polycarp wants to paint minimum possible number of white\r\ncells with black so that all black cells form a square.You are to\r\ndetermine the minimum possible number of cells needed to be painted\r\nblack so that the black cells form a black square with sides parallel to\r\nthe painting\u2019s sides. All the cells that do not belong to the square\r\nshould be white. The square\u2019s side should have positive length.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nint n,m;\nchar s[107];\nvoid mins(int&a,int b){if(a>b)a=b;}\nvoid maxs(int&a,int b){if(a<b)a=b;}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tint xl=10000,xr=0,yl=10000,yr=0,cb=0;\n\tfor(int i=1;i<=n;++i){\n\t\tscanf(\"%s\",s+1);\n\t\tfor(int j=1;j<=m;++j)if(s[j]=='B'){\n\t\t\tmaxs(yr,j);mins(yl,j);\n\t\t\tmaxs(xr,i);mins(xl,i);\n\t\t\t++cb;\n\t\t}\n\t}\n\tif(xl>xr)return puts(\"1\"),0;\n\tint xd=xr-xl+1,yd=yr-yl+1;\n\tmaxs(xd,yd);\n\tprintf(\"%d\\n\",xd<=n&&xd<=m?xd*xd-cb:-1);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Black Square.json",
    "editorial_link": "https://codeforces.com//blog/entry/53268",
    "editorial": "If there are no black cells on the field it is enough to paint any one\r\ncell.In the other case, we need to calculate values: the index of upper\r\nrow with black cell; the index of bottom row with black cell; the index\r\nof leftmost column with black cell; the index of rightmost column with\r\nblack cell. After that we can get the length of square side which should\r\nbe obtained after repainting. Let this side equals to and . If more than\r\nor more than there is no solution. Else, the answer is equals to , where\r\nis the number of cells in the resulting square and is the number of\r\nblack cells on the initial field. The value can be calculated in one\r\niteration through the given field.\r\n"
}