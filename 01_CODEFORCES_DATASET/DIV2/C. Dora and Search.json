{
    "link": "https://codeforces.com//contest/1793/problem/C",
    "problemId": "1779689",
    "problem_idx": "C",
    "shortId": "1793C",
    "contest_number": "1793",
    "problem_submissions": {
        "E": [
            193303068,
            193410509,
            193318182,
            193317664,
            193321898,
            193321819,
            195118865,
            193320360,
            193323873,
            193322184,
            193312387,
            193317745,
            193328336,
            193326548,
            193325450,
            193417270,
            193326710,
            193328225,
            193330842,
            193347782,
            193325695,
            193407475
        ],
        "F": [
            193294668,
            193432445,
            193283485,
            193302193,
            193292394,
            193301208,
            193303400,
            193301778,
            193305649,
            193314414,
            193303519,
            193297557,
            193311968,
            193311201,
            193435668,
            193417130,
            193298340,
            193305239,
            193316596,
            193292430,
            193291733,
            193298678,
            193285006
        ],
        "D": [
            193289297,
            193410468,
            193298851,
            193295249,
            193301162,
            193294370,
            195118553,
            193297347,
            193290499,
            193299884,
            193294597,
            193310876,
            193307621,
            193292591,
            193294931,
            193417683,
            193309769,
            193297566,
            193311269,
            193290315,
            193298522,
            193315173,
            193303157
        ],
        "C": [
            193282896,
            193410484,
            193410436,
            193291983,
            193285787,
            193287901,
            193282042,
            195118522,
            193288500,
            193283243,
            193287291,
            193286808,
            193292453,
            193283068,
            193285096,
            193286514,
            193417697,
            193294800,
            193285233,
            193294514,
            193283977,
            193285615,
            193312185,
            193282557
        ],
        "B": [
            193281488,
            193410417,
            193303429,
            193282163,
            193284281,
            193285830,
            195118463,
            193284739,
            193293047,
            193283557,
            193283997,
            193294754,
            193288469,
            193298342,
            193284337,
            193417706,
            193311244,
            193287539,
            193288050,
            193280259,
            193283801,
            193322565,
            193294257
        ],
        "A": [
            193280157,
            193410319,
            193280181,
            193280331,
            193281160,
            193280045,
            195118430,
            193280519,
            193280318,
            193279986,
            193280684,
            193280733,
            193280459,
            193280266,
            193280563,
            193417721,
            193281601,
            193308502,
            193281932,
            193295057,
            193280019,
            193319646,
            193290909
        ]
    },
    "name": "C. Dora and Search",
    "statement": "As you know, the girl Dora is always looking for something. This time\r\nshe was given a permutation, and she wants to find such a subsegment of\r\nit that none of the elements at its ends is either the minimum or the\r\nmaximum of the entire subsegment. More formally, you are asked to find\r\nthe numbers l and r (1\r\nleq l\r\nleq r\r\nleq n) such that a_l\r\nneq\r\nmin(a_l, a_{l + 1},\r\nldots, a_r), a_l\r\nneq\r\nmax(a_l, a_{l + 1},\r\nldots, a_r) and a_r\r\nneq\r\nmin(a_l, a_{l + 1},\r\nldots, a_r), a_r\r\nneq\r\nmax(a_l, a_{l + 1},\r\nldots, a_r).A permutation of length n is an array consisting of n\r\ndistinct integers from 1 to n in any order. For example, [2,3,1,5,4] is\r\na permutation, but [1,2,2] is not a permutation (2 occurs twice in the\r\narray) and [1,3,4] is also not a permutation (n=3, but 4 is present in\r\nthe array).Help Dora find such a subsegment, or tell her that such a\r\nsubsegment does not exist.\r\n",
    "solutions": [
        "#include<bits/stdC++.h>\nusing namespace std;\nint T,n,a[200003];\nint main(){\n\tios::sync_with_stdio(0);\n\tcin>>T;\n\twhile(T--){\n\t\tcin>>n;\n\t\tfor(int i=0;i<n;i++)\n\t\t\tcin>>a[i];\n\t\tint l=0,r=n-1,L=1,R=n;\n\t\tfor(;l<=r;){\n\t\t\tif(a[l]==L){l++;L++;continue;}\n\t\t\tif(a[l]==R){l++;R--;continue;}\n\t\t\tif(a[r]==L){r--;L++;continue;}\n\t\t\tif(a[r]==R){r--;R--;continue;}\n\t\t\tcout<<l+1<<' '<<r+1<<'\\n';\n\t\t\tbreak;\n\t\t}if(l>r)cout<<\"-1\\n\";\n\t}\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "two pointers"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Dora and Search.json",
    "editorial_link": "https://codeforces.com//blog/entry/112723",
    "editorial": "Suppose we want to check whether the entire array satisfies the claim.\r\nIf this is the case, then we can output the entire array as an answer.\r\nOtherwise, one of the two extreme elements does not meet our\r\nrequirements. From this we can conclude that all segments containing an\r\nelement that does not meet our requirements will also be incorrect,\r\nbecause this extreme element will remain the minimum/maximum. The\r\nalgorithm follows from the fact above: let\u00e2\u0080\u0099s look at the sub-section ,\r\nwhich is initially equal to . If or , then we proceed to the segment . A\r\nsimilar reasoning is also needed for . Thus, either after some\r\niterations we will get the required sub-section, or we will get and the\r\nanswer will be . Final asymptotics: or depending on the implementation.\r\nCode\r\n"
}