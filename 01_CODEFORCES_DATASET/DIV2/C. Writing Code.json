{
    "link": "https://codeforces.com//contest/544/problem/C",
    "problemId": "27510",
    "problem_idx": "C",
    "shortId": "544C",
    "contest_number": "544",
    "problem_submissions": {
        "D": [
            11032012,
            11030561,
            11031995,
            11031987,
            11031076,
            11733855,
            11036523,
            12308236
        ],
        "C": [
            11028349,
            11025550,
            11028166,
            11027513,
            11029011,
            11025883,
            11023519,
            11025660,
            11026616,
            11026912,
            11027600,
            11030213,
            11026452,
            11026673,
            11028755,
            18268210,
            11027624,
            11028873,
            11029553,
            11028365,
            11029408
        ],
        "B": [
            11024290,
            11026185,
            11025669,
            11029854,
            11029782,
            11023653,
            11026411,
            11023531,
            11024274,
            11024308,
            11023437,
            11023757,
            11024285,
            11023489,
            11023113,
            11024136,
            11023333,
            11023666,
            11026341,
            11023637
        ],
        "A": [
            11022935,
            11033816,
            11022995,
            11025287,
            11022840,
            11023316,
            11022775,
            11022778,
            11022845,
            11022867,
            11022763,
            11022688,
            11022879,
            11022708,
            11022881,
            11023441,
            11022791
        ]
    },
    "name": "C. Writing Code",
    "statement": "Programmers working on a large project have just received a task to\r\nwrite exactly lines of code. There are programmers working on a project,\r\nthe -th of them makes exactly bugs in every line of code that he writes.\r\nLet\u2019s call a sequence of non-negative integers a , if . The programmers\r\nfollow the plan like that: in the beginning the first programmer writes\r\nthe first lines of the given task, then the second programmer writes\r\nmore lines of the given task, and so on. In the end, the last programmer\r\nwrites the remaining lines of the code. Let\u2019s call a plan , if all the\r\nwritten lines of the task contain at most bugs in total.Your task is to\r\ndetermine how many distinct plans are there. As the number of plans can\r\nbe large, print the remainder of this number modulo given positive\r\ninteger .\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nint n , m , B , M , ans , a[501] , dp[501][501] ;\n\nint main(){\n  cin >> n >> m >> B >> M ;\n  for(int i=1 ; i<=n ; i++){ \n    cin >> a[i] ;\n    for(int j=0 ; j<=m ; j++) for(int k=0 ; k<=B ; k++){\n       if(i==1) { \n         if(j*a[i] <= B ) dp[j][j*a[i]]=1 ;\n       }         \n       else if(j>0 && k >= a[i]) dp[j][k] += dp[j-1][k-a[i]] ;\n       if(dp[j][k] >= M) dp[j][k] -= M ; \n    }\n    if(i==n){\n       for(int k=0 ; k<=B ; k++) { \n         ans += dp[m][k] ; \n         if(ans >= M) ans -= M ; \n       }\n    }\n  } \n  cout << ans ;\n\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Writing Code.json",
    "editorial_link": "https://codeforces.com//blog/entry/17773",
    "editorial": "Let's create the solution, which will work too slow, but after that we will improve it. Let's calculate the following dynamic programming z[i][j][k] \u0097 answer to the problem, if we already used exactly i programmers, writed exactly j lines of code, and there are exactly k bugs. How we can do transitions in such dp? We can suppose that we i-th programmer will write r lines of code, then we should add to z[i][j][k] value z[i?-?1][j?-?r][k?-?ra[i]]\n\nBut let's look at transitions from the other side. It's clear, that there are exactly 2 cases. The first case, we will give any task for i-th programmer. So, we should add to z[i][j][k] value z[i?-?1][j][k]. The second case, is to give at least one task to i-th programmer. So, this value will be included in that state: z[i][j?-?1][k?-?a[i]]. In that solution we use same idea, which is used to calculate binomial coefficients using Pascal's triangle. So overall solution will have complexity: O(n3)"
}