{"link": "https://codeforces.com//contest/918/problem/E", "problemId": "151496", "problem_idx": "E", "shortId": "918E", "contest_number": "918", "problem_submissions": {"D": [34674216, 34676112, 34673508, 34668068, 34677841, 34677199, 34677332, 34677732, 34674284, 34676764, 34679239, 34678391, 34678589, 34677462, 34676960, 34679127, 34678913, 34675354, 34679183], "B": [34670440, 34667518, 34666861, 34670421, 34670264, 34667471, 34666401, 34668510, 34667116, 34668380, 34668100, 34668007, 34668333, 34667912, 34667438, 34673764, 34668108, 34668574, 34670180], "C": [34669065, 34673271, 34676492, 34678621, 34673223, 34674841, 34674142, 34672405, 34678982, 34671931, 34673671, 34675775, 34673964, 34675892, 34678000, 34670923, 34676125, 34680026, 34675452], "A": [34664697, 34665015, 34664848, 34664663, 34664707, 34665222, 34664674, 34665219, 34664947, 34672513, 34664938, 34664735, 34665446, 34664882, 34665035, 34672321, 34665406, 34664826, 34666801], "E": [34687078, 34688168, 34687900, 34687853]}, "name": "E. Pollywog", "statement": "As we all know, Dart is some kind of creature from Upside Down world.\r\nFor simplicity, we call their kind . Dart and other pollywogs are\r\nplaying a game. There are stones in a row, numbered from through from\r\nleft to right. At most pollywog may be sitting on each stone at a time.\r\nInitially, the pollywogs are sitting on the first stones (one pollywog\r\non each stone). Dart and his friends want to end up on the last stones.\r\nAt each second, the leftmost pollywog should jump to the right. A\r\npollywog can jump at most stones; more specifically, a pollywog can jump\r\nfrom stone number to stones . A pollywog can\u2019t jump on an occupied\r\nstone. Jumping a distance takes amounts of energy from the pollywog.\r\nAlso, stones are Each time landing on a special stone , takes amounts of\r\nenergy (in addition to the energy for jump) from the pollywog. could be\r\nnegative, in this case, it means the pollywog absorbs amounts of\r\nenergy.Pollywogs want to spend as little energy as possible (this value\r\ncould be negative). They\u2019re just pollywogs, so they asked for your help.\r\nTell them the total change in their energy, in case they move optimally.\r\n", "solutions": ["#include<stdio.h>\n#include<algorithm>\n\nusing namespace std;\n\nlong long sz[(1 << 8)];\nlong long D[(1 << 8)][(1 << 8)];\nlong long MD[32][(1 << 8)][(1 << 8)];\nlong long c[10];\nlong long mw[(1 << 8)];\nlong long who[(1 << 8)];\nlong long who_n = 0;\nlong long now[(1 << 8)];\nlong long want[25 * 30+10];\nlong long made[(1 << 8)];\nlong long p[55], w[55];\n\nint main() {\n\tlong long x, k, n,q;\n\tlong long i, j,r,o;\n\n\tscanf(\"%lld%lld%lld%lld\", &x, &k, &n, &q);\n\tfor (i = 1; i <= k; i++)scanf(\"%lld\", &c[i]);\n\tfor (i = 1; i < (1 << k); i++)sz[i] = sz[i&(i - 1)] + 1;\n\tfor (i = 0; i < (1 << k); i++) {\n\t\tfor (j = 0; j < (1 << k); j++) {\n\t\t\tD[i][j] = -1;\n\t\t}\n\t}\n\tfor (i = 0; i < (1 << k); i++) {\n\t\tif (sz[i] != x)continue;\n\t\twho[who_n] = i;\n\t\tmw[i] = who_n;\n\t\twho_n++;\n\t\t\n\t\tlong long fo;\n\t\tfor (j = 0; j < k; j++) {\n\t\t\tif (i&(1<<j)) {\n\t\t\t\tfo = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (fo != 0) {\n\t\t\tD[i][i / 2] = 0;\n\t\t}\n\t\tfor (j = fo + 1; j <= k; j++) {\n\t\t\tif (i&(1 << j))continue;\n\t\t\tlong long next = i - (1 << fo) + (1 << j);\n\t\t\tnext /= 2;\n\t\t\tD[i][next] = c[j - fo];\n\t\t}\n\t}\n\tfor (i = 0; i < who_n; i++) {\n\t\tfor (j = 0; j < who_n; j++) {\n\t\t\tMD[0][i][j] = D[who[i]][who[j]];\n\t\t}\n\t}\n\tfor (i = 1; i < 32; i++) {\n\t\tfor (j = 0; j < who_n; j++) {\n\t\t\tfor (r = 0; r < who_n; r++) {\n\t\t\t\tMD[i][j][r] = -1;\n\t\t\t}\n\t\t}\n\t\tfor (j = 0; j < who_n; j++) {\n\t\t\tfor (r = 0; r < who_n; r++) {\n\t\t\t\tfor (o = 0; o < who_n; o++) {\n\t\t\t\t\tif (MD[i - 1][j][o] == -1)continue;\n\t\t\t\t\tif (MD[i - 1][o][r] == -1)continue;\n\t\t\t\t\tif (MD[i][j][r] == -1 || MD[i][j][r] > MD[i - 1][j][o] + MD[i - 1][o][r])\n\t\t\t\t\t\tMD[i][j][r] = MD[i - 1][j][o] + MD[i - 1][o][r];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tlong long want_n = 0;\n\tfor (i = 0; i < q; i++) {\n\t\tscanf(\"%lld%lld\", &p[i], &w[i]);\n\t\tfor (j = p[i] - k-1; j <= p[i] + 1; j++) {\n\t\t\tif(j>1)want[want_n++] = j;\n\t\t}\n\t}\n\twant[want_n++] = n-x+1;\n\tsort(want, want + want_n);\n\twant_n = unique(want, want + want_n) - want;\n\n\tlong long noww = 1;\n\tfor (i = 0; i < who_n; i++)now[i] = made[i] = -1e13;\n\tnow[mw[(1 << x) - 1]] = 0;\n\tfor (long long pp = 0; pp < want_n; pp++) {\n\t\tlong long next = want[pp];\n\t\tif (next > n - x + 1)break;\n\t\tif (next - noww == 1) {\n\t\t\tfor (i = 0; i < who_n; i++) {\n\t\t\t\tif (now[i] == -1e13)continue;\n\t\t\t\tlong long hb = who[i];\n\t\t\t\tlong long fp;\n\t\t\t\tfor (j = 0; j < k; j++) {\n\t\t\t\t\tif (hb&(1 << j)) {\n\t\t\t\t\t\tfp = j;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (fp > 0) {\n\t\t\t\t\tif(made[mw[hb / 2]]==-1e13|| made[mw[hb / 2]]>now[i])\n\t\t\t\t\t\tmade[mw[hb / 2]] = now[i];\n\t\t\t\t}\n\t\t\t\tfor (j = fp + 1; j <= k; j++) {\n\t\t\t\t\tif (hb&(1 << j))continue;\n\t\t\t\t\tlong long nb = hb - (1 << fp) + (1 << j);\n\t\t\t\t\tnb /= 2;\n\t\t\t\t\tlong long pls = c[j - fp];\n\t\t\t\t\tfor (r = 0; r < q; r++) {\n\t\t\t\t\t\tif (p[r] == noww + j)pls += w[r];\n\t\t\t\t\t}\n\t\t\t\t\tif (made[mw[nb]] == -1e13 || made[mw[nb]] > now[i] + pls)\n\t\t\t\t\t\tmade[mw[nb]] = now[i] + pls;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i = 0; i < who_n; i++) {\n\t\t\t\tnow[i] = made[i];\n\t\t\t\tmade[i] = -1e13;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlong long delta = next - noww;\n\t\t\tfor (i = 0; i < 30; i++) {\n\t\t\t\tif ((delta&((long long)1 << i)) == 0)continue;\n\t\t\t\tfor (j = 0; j < who_n; j++) {\n\t\t\t\t\tif (now[j] == -1e13)continue;\n\t\t\t\t\tfor (r = 0; r < who_n; r++) {\n\t\t\t\t\t\tif (MD[i][j][r] == -1)continue;\n\t\t\t\t\t\tif (made[r] == -1e13 || made[r] > now[j] + MD[i][j][r])\n\t\t\t\t\t\t\tmade[r] = now[j] + MD[i][j][r];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (j = 0; j < who_n; j++) {\n\t\t\t\t\tnow[j] = made[j];\n\t\t\t\t\tmade[j] = -1e13;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tnoww = want[pp];\n\t}\n\tprintf(\"%lld\", now[0]);\n\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["combinatorics", "dp", "matrices"], "dificulty": "2900", "interactive": false}