{"link": "https://codeforces.com//contest/670/problem/E", "problemId": "59599", "problem_idx": "E", "shortId": "670E", "contest_number": "670", "problem_submissions": {"F": [17735920, 17741947, 17739838, 17742147, 17741489, 17740480, 17741509, 17743043, 17743802, 17744174, 17746158, 17745379, 17739547, 17746721, 17747076, 17746214, 17747355], "E": [17730040, 17731049, 17733744, 17731207, 17733203, 17735292, 17734256, 17735578, 17734020, 17735429, 17736141, 17737288, 17746918, 17736320, 17739029, 17736027, 17737111], "D2": [17725965, 17728400, 17727768, 17728149, 17727724, 17733032, 17727187, 17728319, 17727989, 17724612, 17728413, 17731488, 17730289, 17730390, 17731393, 17765595, 17733213], "D1": [17725487, 17728299, 17727727, 17728284, 17727707, 17732932, 17727240, 17728389, 17728203, 17724671, 17728521, 17731440, 17730058, 17729637, 17731489, 17727320, 17732424], "C": [17723024, 17725897, 17729270, 17725892, 17727606, 17730842, 17728142, 17726419, 17724258, 17726720, 17725246, 17726826, 17726494, 17725465, 17727248, 17724877, 17734108], "B": [17721571, 17724028, 17723559, 17722726, 17722823, 17729499, 17722138, 17722709, 17722944, 17727742, 17722740, 17724595, 17723615, 17722288, 17723917, 17722833, 17723125], "A": [17720663, 17721845, 17721356, 17721364, 17721787, 17728607, 17720913, 17721102, 17720788, 17729012, 17721057, 17721708, 17721392, 17721888, 17720937, 17721414]}, "name": "E. Correct Bracket Sequence Editor", "statement": "Recently Polycarp started to develop a text editor that works only with\r\ncorrect bracket sequences (abbreviated as CBS). Note that a bracket\r\nsequence is correct if it is possible to get a correct mathematical\r\nexpression by adding \"\"-s and \"\"-s to it. For example, sequences \"\", \"\"\r\nand \"\" are correct, while \"\", \"\" and \"\" are not. Each bracket in CBS has\r\na pair. For example, in \"\": 1st bracket is paired with 8th, 2d bracket\r\nis paired with 3d, 3d bracket is paired with 2d, 4th bracket is paired\r\nwith 7th, 5th bracket is paired with 6th, 6th bracket is paired with\r\n5th, 7th bracket is paired with 4th, 8th bracket is paired with 1st.\r\nPolycarp\u2019s editor currently supports only three operations during the\r\nuse of CBS. The cursor in the editor takes the whole position of one of\r\nthe brackets (not the position between the brackets!). There are three\r\noperations being supported: move the cursor one position to the left,\r\nmove the cursor one position to the right, delete the bracket in which\r\nthe cursor is located, delete the bracket it\u2019s paired to and all\r\nbrackets between them (that is, delete a substring between the bracket\r\nin which the cursor is located and the one it\u2019s paired to). After the\r\noperation \"\" the cursor moves to the nearest bracket to the right (of\r\ncourse, among the non-deleted). If there is no such bracket (that is,\r\nthe suffix of the CBS was deleted), then the cursor moves to the nearest\r\nbracket to the left (of course, among the non-deleted). There are\r\npictures illustrated several usages of operation \"\" below. All incorrect\r\noperations (shift cursor over the end of CBS, delete the whole CBS,\r\netc.) are not supported by Polycarp\u2019s editor.Polycarp is very proud of\r\nhis development, can you implement the functionality of his editor?\r\n", "solutions": ["#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <fstream>\n#include <cstdlib>\n#include <numeric>\n#include <iomanip>\n#include <cstdio>\n#include <cstring>\n#include <cassert>\n#include <vector>\n#include <math.h>\n#include <queue>\n#include <stack>\n#include <ctime>\n#include <set>\n#include <map>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\n\ntemplate <typename T>\nT nextInt() {\n    T x = 0, p = 1;\n    char ch;\n    do { ch = getchar(); } while(ch <= ' ');\n    if (ch == '-') {\n        p = -1;\n        ch = getchar();\n    }\n    while(ch >= '0' && ch <= '9') {\n        x = x * 10 + (ch - '0');\n        ch = getchar();\n    }\n    return x * p;\n}\n\nconst int maxN = (int)5e5 + 10;\nconst int maxL = 17;\nconst int INF = (int)1e9;\nconst int mod = (int)1e9 + 7;\nconst ll LLINF = (ll)1e18;\n\nchar s[maxN];\nint rev[maxN];\nint n, m, q;\n\nset <int> available;\nset<int> ::iterator it;\n\nvoid makeDel() {\n    int l = *it;\n    int r = rev[l];\n    auto iter2 = available.lower_bound(rev[*it]);\n    if (l < r) {\n        iter2++;\n        available.erase(it, iter2);\n    } else {\n        it++;\n        available.erase(iter2, it);\n    }\n    it = available.upper_bound(l);\n    if (it == available.end()) it = prev(it);\n}\n\nint main() {\n\n   // freopen(\"input.txt\", \"r\", stdin);\n   // freopen(\"output.txt\", \"w\", stdout);\n\n    n = nextInt<int>();\n    m = nextInt<int>();\n    int p = nextInt<int>() - 1;\n    gets(s);\n    stack <int> st;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '(') {\n            st.push(i);\n        } else {\n            rev[i] = st.top();\n            rev[st.top()] = i;\n            st.pop();\n        }\n        available.insert(i);\n    }\n    it = available.lower_bound(p);\n\n    for (int i =0; i < m; ++i) {\n        char ch = getchar();\n        if (ch == 'L') {\n            it--;\n        } else if (ch == 'R') {\n            it++;\n        } else {\n            makeDel();\n        }\n    }\n    for (auto x: available) putchar(s[x]);\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "dsu", "strings"], "dificulty": "1700", "interactive": false}