{"link": "https://codeforces.com//contest/234/problem/D", "problemId": "1958", "problem_idx": "D", "shortId": "234D", "contest_number": "234", "problem_submissions": {"H": [2367539, 2367451, 2368150, 2370396, 2370658, 2370962, 2366548, 2371136, 2368724, 2371319, 2371738, 2371707, 2371633, 2371399, 2372543, 2371466, 2371579, 2370616, 2372517, 2371242, 2370000, 2369494, 2368027], "G": [2366778, 2367963, 2367273, 2366003, 2367337, 2369442, 2365464, 2370198, 2369038, 2367019, 2369795, 2369869, 2370563, 2370624, 2371914, 2369303, 2370831, 2369435, 2366860, 2367459], "F": [2366410, 2365209, 2366625, 2364676, 2368686, 2368593, 2367997, 2368802, 2370008, 2369667, 2368790, 2368840, 2370409, 2370044, 2370035, 2371269, 2370102, 2371604, 2369327, 2367672, 2365739], "E": [2365219, 2368827, 2365948, 2367641, 2365791, 2366952, 2369059, 2367661, 2366539, 2369676, 2368181, 2368719, 2368819, 2368874, 2372171, 2364796, 2371458, 2372485], "D": [2364321, 2365862, 2364413, 2367581, 2370064, 2365410, 2370417, 2366504, 2366761, 2365880, 2367326, 2366556, 2367362, 2367609, 2371380, 2368228, 2369174, 2367730, 2365306, 2365279], "C": [2363257, 2362903, 2363465, 2365238, 2363763, 2363410, 2364436, 2363868, 2364379, 2364135, 2363776, 2364604, 2364795, 2363038, 2364919, 2364126, 2370085, 2371849, 2363438], "B": [2362948, 2363065, 2363029, 2363437, 2363118, 2363011, 2362872, 2362890, 2362859, 2363131, 2363285, 2363584, 2364047, 2362778, 2364119, 2362767, 2369079, 2371817, 2363262], "A": [2362806, 2363229, 2362850, 2362910, 2362820, 2362807, 2363375, 2363964, 2363091, 2364949, 2362894, 2362906, 2363355, 2366630, 2363699, 2368520, 2368676, 2371574, 2363053]}, "name": "D. Cinema", "statement": "Overall there are actors in Berland. Each actor has a personal\r\nidentifier an integer from to (distinct actors have distinct\r\nidentifiers). Vasya likes to watch Berland movies with Berland actors,\r\nand he has favorite actors. He watched the movie trailers for the next\r\nmonth and wrote the following information for every movie: the movie\r\ntitle, the number of actors who starred in it, and the identifiers of\r\nthese actors. Besides, he managed to copy the movie titles and how many\r\nactors starred there, but he didn\u2019t manage to write down the identifiers\r\nof some actors. Vasya looks at his records and wonders which movies may\r\nbe his favourite, and which ones may not be. Once Vasya learns the exact\r\ncast of all movies, his favorite movies will be determined as follows: a\r\nmovie becomes favorite movie, if no other movie from Vasya\u2019s list has\r\nmore favorite actors.Help the boy to determine the following for each\r\nmovie: whether it surely will be his favourite movie; whether it surely\r\nwon\u2019t be his favourite movie; can either be favourite or not.\r\n", "solutions": ["#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<math.h>\n#include<algorithm>\n#include<set>\n#include<map>\n#include<vector>\n#include<string>\n#include<iostream>\n#include<sstream>\n\nusing namespace std;\n\nconst int maxn = 100 + 10;\n\nint n, m, k, x, p;\nbool fav[maxn];\nint lower[maxn], upper[maxn];\n\nint main() {\n\tfreopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\n\tscanf(\"%d%d\", &m, &k);\n\tmemset(fav, 0, sizeof(fav));\n\tfor(int i=1; i<=k; i++) {\n\t\tscanf(\"%d\", &x);\n\t\tfav[x] = true;\n\t}\n\tscanf(\"%d\", &n);\n\tfor(int i=1; i<=n; i++) {\n\t\tscanf(\"%*s\");\n\t\tscanf(\"%d\", &p);\n\n\t\tint a = 0, b = 0, c = 0;\n\t\tfor(int j=0; j<p; j++) {\n\t\t\tscanf(\"%d\", &x);\n\t\t\tif(x == 0) b++;\n\t\t\telse if(fav[x]) a++;\n\t\t\telse c++;\n\t\t}\n\n\t\tlower[i] = a + max(0, b-(m-k-c)); upper[i] = min(a + b, k);\n\t}\n\n\tfor(int i=1; i<=n; i++) {\n\n\t\tbool die = false;\n\t\tbool must = true;\n\t\tfor(int j=1; j<=n; j++) {\n\t\t\tif(i == j) continue;\n\t\t\tif(upper[i] < lower[j]) die = true;\n\t\t\tif(lower[i] < upper[j]) must = false;\n\t\t}\n\n\t\tif(die) printf(\"1\\n\");\n\t\telse if(must) printf(\"0\\n\");\n\t\telse printf(\"2\\n\");\n\t}\n\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["implementation"], "dificulty": "1600", "interactive": false}