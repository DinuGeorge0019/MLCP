{
    "link": "https://codeforces.com//contest/1461/problem/C",
    "problemId": "829208",
    "problem_idx": "C",
    "shortId": "1461C",
    "contest_number": "1461",
    "problem_submissions": {
        "E": [
            100932966,
            100936269,
            100990346,
            100969491,
            100936672,
            100935997,
            100939174,
            100940524,
            100941594,
            101253968,
            100980986,
            100938127,
            100939775,
            100939746,
            100939282,
            100946150,
            100942054,
            100947167,
            100942687,
            100943260,
            100946250,
            100984712,
            100939780
        ],
        "D": [
            100927713,
            100927975,
            100930388,
            100930108,
            100929403,
            100928752,
            100927167,
            101253940,
            100929699,
            100925599,
            100929844,
            100930435,
            100928868,
            100927280,
            100929168,
            100927059,
            100928373,
            100929241,
            100929027,
            100931581
        ],
        "C": [
            100924332,
            100922434,
            100924379,
            100925587,
            100923163,
            100923132,
            100922302,
            101253910,
            100924116,
            100920852,
            100924402,
            100925009,
            100923233,
            100921503,
            100923858,
            100922215,
            100922547,
            100922569,
            100922801,
            100924266
        ],
        "B": [
            100920627,
            100919068,
            100920131,
            100923667,
            100919688,
            100918122,
            100916912,
            101253882,
            100919837,
            100916872,
            100919874,
            100921340,
            100919650,
            100918083,
            100918896,
            100918448,
            100932425,
            100918174,
            100919207,
            100918935
        ],
        "A": [
            100911403,
            100911220,
            100912022,
            100911829,
            100911757,
            100911131,
            100911094,
            101253862,
            100911574,
            100910965,
            100911506,
            100912093,
            100912000,
            100911450,
            100911077,
            100911732,
            100912598,
            100910886,
            100911279,
            100911559
        ],
        "F": [
            101254013,
            101253423,
            100951392,
            101467849,
            126697052
        ]
    },
    "name": "C. Random Events",
    "statement": "Ron is a happy owner of a permutation a of length n.A permutation of\r\nlength n is an array consisting of n distinct integers from 1 to n in\r\narbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2]\r\nis not a permutation (2 appears twice in the array) and [1,3,4] is also\r\nnot a permutation (n=3 but there is 4 in the array). Ron’s permutation\r\nis subjected to m experiments of the following type: (r_i, p_i). This\r\nmeans that elements in range [1, r_i] (in other words, the prefix of\r\nlength r_i) have to be sorted in ascending order with the probability of\r\np_i. All experiments are performed in the same order in which they are\r\nspecified in the input data.As an example, let’s take a look at a\r\npermutation [4, 2, 1, 5, 3] and an experiment (3, 0.6). After such an\r\nexperiment with the probability of 60\r\n",
    "solutions": [
        "//clear adj and visited vector declared globally after each test case\n//check for long long overflow\n//while adding and subs check if mod becomes -ve\n//while using an integer directly in a builtin function add ll\n//Mod wale question mein last mein if dalo ie. Ans<0 then ans+=mod;\n//Dont keep array name as size or any other key word\n//Incase of close mle change language to c++17 or c++14 \n\n#include <bits/stdc++.h>  \n#include <ext/pb_ds/assoc_container.hpp>\n#define int long long\n#define IOS std::ios::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL);cout.precision(dbl::max_digits10);\n#define pb push_back\n#define mod 1000000007ll //998244353ll\n#define lld long double\n#define mii map<int, int>\n#define mci map<char, int>\n#define msi map<string, int>\n#define pii pair<int, int>\n#define ff first\n#define ss second \n#define all(x) (x).begin(), (x).end()\n#define rep(i,x,y) for(int i=x; i<y; i++)    \n#define fill(a,b) memset(a, b, sizeof(a))\n#define vi vector<int>\n#define setbits(x) __builtin_popcountll(x)\n#define print2d(dp,n,m) for(int i=0;i<=n;i++){for(int j=0;j<=m;j++)cout<<dp[i][j]<<\" \";cout<<\"\\n\";}\ntypedef std::numeric_limits< double > dbl;\nusing namespace __gnu_pbds;\nusing namespace std;\ntypedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set;\nconst long long N=200005, INF=2000000000000000000;\nlld pi=3.1415926535897932;\nint lcm(int a, int b)\n{\n    int g=__gcd(a, b);\n    return a/g*b;\n}\nint power(int a, int b, int p)\n    {\n        if(a==0)\n        return 0;\n        int res=1;\n        a%=p;\n        while(b>0)\n        {\n            if(b&1)\n            res=(res*a)%p;\n            b>>=1;\n            a=(a*a)%p;\n        }\n        return res;\n    }\n\nint32_t main()\n{\n    IOS;\n    int t;\n    cin>>t;\n    while(t--)\n    {\n       int n, m;\n       cin>>n>>m;\n       int ar[n+1];\n       for(int i=1;i<=n;i++)\n       cin>>ar[i];\n       int l=0;\n       for(int i=n;i>0;i--)\n       {\n           if(ar[i]!=i)\n           {\n               l=i;\n               break;\n           }\n       }\n       lld ans=1.0, ad=1.0;\n       while(m--)\n       {\n           int r;\n           lld p;\n           cin>>r>>p;\n           if(r>=l)\n           ans*=(ad-p);\n       }\n       if(l==0)\n       cout<<1<<\"\\n\";\n       else\n       cout<<ad-ans<<\"\\n\";\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "math",
        "probabilities"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Random Events.json",
    "editorial_link": "https://codeforces.com//blog/entry/85491",
    "editorial": "Letâs first define some variable , which will be equal to the last\r\nunsorted number (the largest for which ).Now we can see that we are not\r\ninterested in experiments with .To get the answer, we just need to\r\nmultiply the remaining . This number will indicate the probability that\r\nall the remaining experiments failed. Since we need to deduce the\r\nprobability of success, we can subtract the resulting number from one.\r\n",
    "hint": []
}