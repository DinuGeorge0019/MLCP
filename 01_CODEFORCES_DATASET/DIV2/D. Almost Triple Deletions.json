{"link": "https://codeforces.com//contest/1699/problem/D", "problemId": "1450610", "problem_idx": "D", "shortId": "1699D", "contest_number": "1699", "problem_submissions": {"E": [162793364, 162775692, 162793126, 162793513, 162776568, 162806794, 163072479, 162904221, 162802356, 163208563], "D": [162777822, 162787041, 162785884, 162779113, 162783159, 162788510, 162781676, 162786062, 162780446, 162782104, 162783172, 162786827, 162785330, 162784706, 162851711, 162787598, 162793458, 162789076], "C": [162770178, 162790195, 162774066, 162764166, 162787790, 162799603, 162771580, 162766383, 162773288, 162773209, 162772203, 162768894, 162771772, 162772012, 162769394, 162775382, 162765676, 162769675], "A": [162765690, 162760464, 162756544, 162756228, 162790360, 162759372, 162757442, 162756339, 162756415, 162759006, 162765012, 162756289, 162759551, 162756446, 162756312, 162762960, 162756449, 162756887], "B": [162765501, 162770833, 162765076, 162770497, 162789467, 162781290, 162762444, 162760246, 162769636, 162765813, 162765204, 162760315, 162764383, 162763818, 162761397, 162778301, 162759501, 162763396]}, "name": "D. Almost Triple Deletions", "statement": "You are given an integer n and an array a_1,a_2,\r\nldots,a_n.In one operation, you can choose an index i (1\r\nle i\r\nlt n) for which a_i\r\nneq a_{i+1} and delete both a_i and a_{i+1} from the array. After\r\ndeleting a_i and a_{i+1}, the remaining parts of the array are\r\nconcatenated.For example, if a=[1,4,3,3,6,2], then after performing an\r\noperation with i=2, the resulting array will be [1,3,6,2].What is the\r\nmaximum possible length of an array of elements obtainable from a by\r\nperforming several (perhaps none) of the aforementioned operations?\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nint a[5005],cnt[5005],s[5005][5005],dp[5005];\nvector <int> v[5005];\nsigned main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(0); \n\tint T;\n\tcin >> T;\n\twhile(T--)\n\t{\n\t\tint n;\n\t\tcin >> n;\n\t\tfor(int i=1;i<=n;i++) v[i].clear(),v[i].push_back(0);\n\t\tfor(int i=0;i<=n+1;i++)\n\t\t\tfor(int j=0;j<=n+1;j++) s[i][j]=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tcin >> a[i];\n\t\t\tv[a[i]].push_back(i);\n\t\t}\n\t\tint ans=0;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tfor(int j=1;j<=n;j++) cnt[j]=0;\n\t\t\tint mx=0;\n\t\t\tfor(int j=i;j<=n;j++)\n\t\t\t{\n\t\t\t\tmx=max(mx,++cnt[a[j]]);\n\t\t\t\ts[i][j]=mx*2-(j-i+1);\n\t\t\t\tif(j-i+1&1) s[i][j]=max(s[i][j],1);\n\t\t\t\telse s[i][j]=max(s[i][j],0);\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tfor(int j=0;j<=n;j++) dp[j]=-1e4;\n\t\t\tdp[0]=0;\n\t\t\tfor(int j=0;j<v[i].size();j++)\n\t\t\t{\n\t\t\t\tfor(int k=j+1;k<v[i].size();k++)\n\t\t\t\t{\n\t\t\t\t\tdp[v[i][k]]=max(dp[v[i][k]],dp[v[i][j]]+1-s[v[i][j]+1][v[i][k]-1]);\n\t\t\t\t}\n\t\t\t\tans=max(ans,dp[v[i][j]]-s[v[i][j]+1][n]);\n\t\t\t}\n\t\t}\n\t\tcout << ans << \"\\n\";\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["data structures", "dp", "greedy"], "dificulty": "2300", "interactive": false}