{
    "link": "https://codeforces.com//contest/1581/problem/C",
    "problemId": "1125260",
    "problem_idx": "C",
    "shortId": "1581C",
    "contest_number": "1581",
    "problem_submissions": {
        "E": [
            130358132,
            130358184,
            130357795,
            130357396,
            130363906,
            130366616,
            130380883,
            130364377,
            130368000,
            130362620,
            130366569,
            130368794,
            130369661,
            130369712,
            130368935,
            130369593
        ],
        "C": [
            130344859,
            130342831,
            130347382,
            130345373,
            130344614,
            130353134,
            130351174,
            130350702,
            130351743,
            130352941,
            130352739,
            130356445,
            130357169,
            130351772,
            130355715,
            130362975,
            130356919,
            130369384,
            130361864
        ],
        "B": [
            130340369,
            130340723,
            130340571,
            130339802,
            130369559,
            130359629,
            130340447,
            130931058,
            130343832,
            130341175,
            130342532,
            130359618,
            130341192,
            130359579,
            130352120,
            130344927,
            130346716,
            130361490
        ],
        "A": [
            130338529,
            130338446,
            130338430,
            130342422,
            130338506,
            130341004,
            130338410,
            130340505,
            130339368,
            130338352,
            130339712,
            130339153,
            130338540,
            130338470,
            130338894,
            130339891,
            130340851,
            130340222,
            130339139
        ],
        "D": [
            130369924,
            130441595,
            130369549,
            130356147
        ],
        "F": [
            130356873,
            130360044,
            130368525,
            130369827,
            130370044
        ]
    },
    "name": "C. Portal",
    "statement": "CQXYM found a rectangle A of size n\r\ntimes m. There are n rows and m columns of blocks. Each block of the\r\nrectangle is an obsidian block or empty. CQXYM can change an obsidian\r\nblock to an empty block or an empty block to an obsidian block in one\r\noperation.A rectangle M size of a\r\ntimes b is called a portal if and only if it satisfies the following\r\nconditions: a\r\ngeq 5,b\r\ngeq 4. For all 1 < x < a, blocks M_{x,1} and M_{x,b} are obsidian\r\nblocks. For all 1 < x < b, blocks M_{1,x} and M_{a,x} are obsidian\r\nblocks. For all 1<x<a,1<y<b, block M_{x,y} is an empty block. M_{1, 1},\r\nM_{1, b}, M_{a, 1}, M_{a, b} . Note that the there must be a rows and b\r\ncolumns, not b rows and a columns.CQXYM wants to know the minimum number\r\nof operations he needs to make at least one sub-rectangle a portal.\r\n",
    "solutions": [
        "#pragma GCC optimize(2)\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<map>\n#include<queue>\n#include<vector>\n#include<algorithm>\n#include<set>\n#include<unordered_map>\n#include<unordered_set>\n#define ll long long\n#define ls(_o) (_o<<1)\n#define rs(_o) ((_o<<1)|1)\n#define N 444\n#define p 1000000007\n#define p1 998244353\n#define p2 1000000007\nusing namespace std;\nnamespace ywy{\n\tinline int get(){\n\t\tint n=0;char c;while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')break;if(c=='-')goto s;\n\t\t}n=c-'0';while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10+c-'0';else return(n);\t\n\t\t}s:while((c=getchar())||23333){\n\t\t\tif(c>='0'&&c<='9')n=n*10-c+'0';else return(n);\t\n\t\t}\n\t}\n\tchar v[N][N];\n\tint sums[N][N],sigg[N],f[N],mn[N];\n\tvoid ywymain(){\n\t\tint T=get(); while(T--){\n\t\t\tint n=get(),m=get(); for(int i=1;i<=n;i++) scanf(\"%s\",v[i]+1);\n\t\t\tfor(int i=1;i<=n;i++){\n\t\t\t\tfor(int j=1;j<=m;j++) sums[i][j]=sums[i][j-1]+(v[i][j]=='1');\t\n\t\t\t}\n\t\t\tint ans=1234567890;\n\t\t\tfor(int l=1;l<=m;l++){\n\t\t\t\tfor(int r=l+3;r<=m;r++){\n\t\t\t\t\tmn[0]=1234567890;\n\t\t\t\t\tfor(int i=1;i<=n;i++){\n\t\t\t\t\t\tint g=(v[i][l]=='0')+(v[i][r]=='0')+sums[i][r-1]-sums[i][l];\n\t\t\t\t\t\tsigg[i]=sigg[i-1]+g;\n\t\t\t\t\t\tint f=r-l-1-(sums[i][r-1]-sums[i][l]);\n\t\t\t\t\t\tmn[i]=min(mn[i-1],f-sigg[i]);\n\t\t\t\t\t\tif(i>=5) ans=min(ans,f+sigg[i-1]+mn[i-4]);\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t}\n}\nint main(){\n\tywy::ywymain();\t\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "greedy",
        "implementation"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Portal.json",
    "editorial_link": "https://codeforces.com//blog/entry/95477",
    "editorial": "We can enumerate the two corner of the submatrix, calculate the answer by precalculating the prefix sums. The time complexity is O(?n2m2)\n. When we enumerated the upper edge and the lower edge of the submatrix, we can calculate the answer by prefix sum. Assume the left edge of the submatrix is l\n, and the right edge is r\n. The part of anwer contributed by upper and lower edge are two segments, we can calculate the answer by prefix sums. The middle empty part is a submaxtrix, and we can use prefix sums too. Since we have enumerated the upper edge and lower edge, the left edge part is just about l\n, and the right part is just about r\n. Then we enumerate l\n, the answer of the best r\n can be calculated by precalculating the suffix miniums. The time complexity is O(?n2m)\n, space complexity is O(nm)\n."
}