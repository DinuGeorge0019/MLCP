{
    "link": "https://codeforces.com//contest/839/problem/C",
    "problemId": "117994",
    "problem_idx": "C",
    "shortId": "839C",
    "contest_number": "839",
    "problem_submissions": {
        "E": [
            29403824,
            29409457,
            29402914,
            29408405,
            29406327,
            29410552,
            29409014,
            29406788,
            29421538
        ],
        "D": [
            29392016,
            29388512,
            29406607,
            29404686,
            29398161,
            29392526,
            29399719,
            29390719,
            29400075,
            29403406,
            29402721,
            29399071,
            29398521,
            29424440,
            29406196,
            29459720,
            29400759,
            29408213,
            29406118,
            29386786,
            29408520
        ],
        "B": [
            29387404,
            29386986,
            29393659,
            29399860,
            29418355,
            29403115,
            29393756,
            29389053,
            29386717,
            29387372,
            29401456,
            29401071,
            29391332,
            29403433,
            29397466,
            29394616,
            29424848,
            29400078
        ],
        "C": [
            29383480,
            29380903,
            29399289,
            29392182,
            29388563,
            29393777,
            29384539,
            29382506,
            29387310,
            29394730,
            29389857,
            29391781,
            29393376,
            29394828,
            29384424,
            29392243,
            29387122,
            29397138,
            29382174,
            29387027
        ],
        "A": [
            29379625,
            29382369,
            29383241,
            29383804,
            29379670,
            29380225,
            29381733,
            29394107,
            29380558,
            29383606,
            29380710,
            29381324,
            29380863,
            29382906,
            29380087,
            29384719,
            29381302,
            29383997,
            29392184,
            29388770
        ]
    },
    "name": "C. Journey",
    "statement": "There are cities and roads in the Seven Kingdoms, each road connects two\r\ncities and we can reach any city from any other by the roads.Theon and\r\nYara Greyjoy are on a horse in the first city, they are starting\r\ntraveling through the roads. But the weather is foggy, so they can t see\r\nwhere the horse brings them. When the horse reaches a city (including\r\nthe first one), it goes to one of the cities connected to the current\r\ncity. But it is a strange horse, it only goes to cities in which they\r\nweren\u2019t before. In each such city, the horse goes with equal\r\nprobabilities and it stops when there are no such cities. Let the length\r\nof each road be . The journey starts in the city . What is the expected\r\nlength (expected value of length) of their journey? You can read about\r\nexpected (average) value by the link\r\nhttps://en.wikipedia.org/wiki/Expected_value.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define FOR(i,s,e) for(int i=(s);i<=(e);i++)\n#define FORD(i,s,e) for(int i=(s);i>=(e);i--)\n#define ALL(k) (k).begin(),(k).end()\n#define e1 first\n#define e2 second\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n\nusing namespace std;\ntypedef long long LL;\ntypedef unsigned long long LLU;\ntypedef long double LD;\ntypedef pair<int,int> PII;\ntypedef pair<LL,LL> PLL;\ntypedef vector<int> VI;\nconst bool print=false;\n\nconst int N=1000*1007;\n\nint n;\n\nvector <int> graf[N];\n\ndouble dfs(int v, int par)\n{\n    double res=0.0;\n    int cou=0;\n    for (int i : graf[v])\n    {\n        if (i==par)\n            continue;\n        cou++;\n        res+=dfs(i, v);\n    }\n    if (!cou)\n        return 0.0;\n    return (res/cou)+1.0;\n}\n\nint main()\n{\n    scanf(\"%d\", &n);\n    for (int i=1; i<n; i++)\n    {\n        int a, b;\n        scanf(\"%d%d\", &a, &b);\n        graf[a].push_back(b);\n        graf[b].push_back(a);\n    }\n    printf(\"%.9lf\\n\", dfs(1, 0));\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "graphs",
        "probabilities",
        "trees"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Journey.json",
    "editorial_link": "https://codeforces.com//blog/entry/53815",
    "editorial": "Let the cities be vertices and roads be edges of a tree and vertex be\r\nthe root of the tree.Let be the answer for the -th vertex (the expected\r\nvalue if they start their journey from that vertex and the horse doesn\u00e2\u0080\u0099t\r\ngo to it\u00e2\u0080\u0099s parent). Now we can calculate by knowing the answer for it s\r\nchildren. Let be the children of -th vertex , then . Because when we are\r\nat -th vertex , we have choices with equal probabilities and for going\r\nto one of them (length of the edge between -th vertex and it s\r\nchildren).So if we know the answer of some vertex s children, we can\r\ncalculate its expected value and we can do it by a simple DFS (note that\r\nthe answer for a leave is ).\r\n"
}