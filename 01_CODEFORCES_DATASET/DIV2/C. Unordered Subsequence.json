{
    "link": "https://codeforces.com//contest/27/problem/C",
    "problemId": "126",
    "problem_idx": "C",
    "shortId": "27C",
    "contest_number": "27",
    "problem_submissions": {
        "C": [
            118523,
            117811,
            117814,
            117821,
            1202654,
            117657,
            117499,
            119957,
            117700,
            119337,
            118774,
            118192,
            117772,
            118123
        ],
        "E": [
            118273,
            118684,
            118448,
            118559,
            118059,
            118536,
            119960,
            118988,
            119040,
            119271,
            119970
        ],
        "D": [
            117934,
            118098,
            118656,
            118879,
            117613,
            118207,
            119959,
            118542,
            118353,
            118733,
            121675,
            118883
        ],
        "B": [
            117350,
            117487,
            117442,
            117491,
            117370,
            117796,
            119955,
            117513,
            117473,
            118282,
            119741,
            117496,
            117464,
            117783
        ],
        "A": [
            117113,
            117117,
            117183,
            117189,
            117387,
            117134,
            117129,
            119954,
            117122,
            117228,
            117819,
            117165,
            117139,
            117252
        ]
    },
    "name": "C. Unordered Subsequence",
    "statement": "The sequence is called if it is non-decreasing or non-increasing. For\r\nexample, sequnces [3, 1, 1, 0] and [1, 2, 3, 100] are ordered, but the\r\nsequence [1, 3, 3, 1] is not. You are given a sequence of numbers. You\r\nare to find itâ€™s shortest subsequence which is not ordered.A subsequence\r\nis a sequence that can be derived from the given sequence by deleting\r\nzero or more elements without changing the order of the remaining\r\nelements.\r\n",
    "solutions": [
        "#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<map>\n#include<vector>\n#include<list>\n#include<set>\n#include<queue>\n#include<cassert>\n#include<sstream>\n#include<string>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\n\n#define LET(x,a) \t__typeof(a) x(a)\n#define IFOR(i,a,b) \tfor(LET(i,a);i!=(b);++i)\n#define EACH(it,v)  \tIFOR(it,v.begin(),v.end())\n#define FOR(i,a,b)  \tfor(int i=(int)(a) ; i < (int)(b);++i)\n#define REP(i,n) \tFOR(i,0,n)\n#define PB\t\tpush_back\n#define MP \t\tmake_pair\n#define EPS\t\t1e-9\n#define INF 2000000000\n\ntypedef vector<int>\tVI;\ntypedef long long\tLL;\ntypedef pair<int,int>\tPI;\n\nint arr[100005],min1[100005],min2[100005],max1[100005],max2[100005];\nint minind1[100005],minind2[100005],maxind1[100005],maxind2[100005];\n\nint main(){\n\tint n;cin>>n;\n\tREP(i,n){\n\t\tcin>>arr[i];\n\t\tif(i){\n\t\t\tif(arr[i]<min1[i-1]){\n\t\t\t\tmin1[i] = arr[i];\n\t\t\t\tminind1[i] = i;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmin1[i] = min1[i-1];\n\t\t\t\tminind1[i] = minind1[i-1];\n\t\t\t}\n\t\t\tif(arr[i]>max1[i-1]){\n\t\t\t\tmax1[i] = arr[i];\n\t\t\t\tmaxind1[i] = i;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmax1[i] = max1[i-1];\n\t\t\t\tmaxind1[i] = maxind1[i-1];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tmin1[i] = arr[i];\n\t\t\tminind1[i] = i;\n\t\t\tmaxind1[i] = i;\n\t\t\tmax1[i] = arr[i];\n\t\t}\n\t}\n\tfor(int i = n-1;i>=0;i--){\n\t\tif(i==n-1){\n\t\t\tmax2[i]=min2[i] = arr[i];\n\t\t\tminind2[i] = i;\n\t\t\tmaxind2[i] = i;\n\t\t}\n\t\telse {\n\t\t\tif(arr[i]>max2[i+1]){\n\t\t\t\tmax2[i] = arr[i];\n\t\t\t\tmaxind2[i] = i;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmax2[i] = max2[i+1];\n\t\t\t\tmaxind2[i] = maxind2[i+1];\n\t\t\t}\n\t\t\tif(arr[i]<min2[i+1]){\n\t\t\t\tmin2[i] = arr[i];\n\t\t\t\tminind2[i] = i;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmin2[i] = min2[i+1];\n\t\t\t\tminind2[i] = minind2[i+1];\n\t\t\t}\n\t\t}\n\t}\n\tint ans = 0;\n\tint i1,i2,i3;\n\tFOR(i,1,n-1){\n\t\tif(min1[i-1]<arr[i] && min2[i+1]<arr[i]){\n\t\t\tans = 3;\n\t\t\ti1 = minind1[i-1];\n\t\t\ti2 = i;\n\t\t\ti3 = minind2[i+1];\n\t\t}\n\t\tif(max1[i-1]>arr[i] && max2[i+1]>arr[i]){\n\t\t\tans = 3;\n\t\t\ti1 = maxind1[i-1];\n\t\t\ti2 = i;\n\t\t\ti3 = maxind2[i+1];\n\t\t}\n\t}\n\tcout<<ans<<endl;\n\tif(ans)cout<<i1+1<<\" \"<<i2+1<<\" \"<<i3+1<<endl;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Unordered Subsequence.json",
    "editorial_link": "https://codeforces.com//blog/entry/653",
    "editorial": "First of all, we should notice, that if answer exists, it consist of 3 elements. Here is linear time solution.\nLet's path with for-loop through the given array and on each iteration let's store current minimul and maximun elements positions. When we are looking at some element, it is enough to check, whereas this element makes unordered subsequence along with min and max elements of the previous part of the array. It is not obvious, but not very difficult to prove. You should try it yourself.",
    "hint": []
}