{"link": "https://codeforces.com//contest/361/problem/B", "problemId": "3924", "problem_idx": "B", "shortId": "361B", "contest_number": "361", "problem_submissions": {"D": [5049570, 5052330], "C": [5047571, 5053670, 5050883, 5048019, 5047769, 5048027, 5047841, 5047707, 5048418, 5047887, 5048463, 5048606, 5049754, 5049540, 5048783, 5048302, 5049619, 5048422], "B": [5044449, 5044711, 5051123, 5045001, 5045542, 5045424, 5045674, 5046005, 5045458, 5045942, 5045765, 5046310, 5045032, 5045644, 5045632, 5045669, 5046351, 5045701], "A": [5043955, 5044015, 5044078, 5044002, 5044057, 5044305, 5043924, 5044167, 5044499, 5044289, 5044756, 5044266, 5043952, 5044618, 5043976, 5044519, 5044413, 5043956], "E": [5051035]}, "name": "B. Levko and Permutation", "statement": "Levko loves permutations very much. A permutation of length is a\r\nsequence of distinct positive integers, each is at most .Let s assume\r\nthat value shows the greatest common divisor of numbers and . Levko\r\nassumes that element of permutation is good if . Levko considers a\r\npermutation , if it has exactly good elements. Unfortunately, he doesn t\r\nknow any beautiful permutation. Your task is to help him to find at\r\nleast one of them.\r\n", "solutions": ["#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <cmath>\n#include <memory.h>\n#include <time.h>\n#include <set>\n#include <map>\n#include <deque>\n#include <queue>\n#include <cstdlib>\n#include <cstdio>\n#include <string>\n#include <fstream>\n\nusing namespace std;\n\nint a[222222];\n\nint main(){\n    //freopen(\"input.txt\",\"r\",stdin);\n    //freopen(\"output.txt\",\"w\",stdout);\n    ios_base::sync_with_stdio(0);\n    int n,m;\n    cin >> n >> m;\n    if (n==m){\n        cout << -1 << endl;\n        return 0;\n    }\n    for (int i = 1; i<=n; i++) a[i]=i;\n    int j = 1 + m + 1;\n    while (j+1<=n)\n        {\n            swap(a[j],a[j+1]);\n            j+=2;\n        }\n    if (j==n) swap(a[1],a[n]);\n    for (int i = 1; i<=n; i++) cout << a[i] << \" \"; cout << endl;\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "math", "number theory"], "dificulty": "1200", "interactive": false}