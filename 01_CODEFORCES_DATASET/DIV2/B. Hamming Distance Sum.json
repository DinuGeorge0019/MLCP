{
    "link": "https://codeforces.com//contest/608/problem/B",
    "problemId": "43761",
    "problem_idx": "B",
    "shortId": "608B",
    "contest_number": "608",
    "problem_submissions": {
        "E": [
            14954683,
            14954321,
            14954967,
            14955933,
            14956930,
            14989274
        ],
        "D": [
            14948975,
            14955911,
            14950351,
            14951548,
            14950173,
            14953248,
            14946689,
            14948327,
            14947848,
            14948851,
            14949821,
            14949443,
            15002023,
            14945126,
            14950775,
            14949904,
            14949831,
            14950588,
            14950645,
            14950938,
            14949897
        ],
        "C": [
            14945727,
            14946619,
            14946995,
            14949787,
            14946924,
            14950673,
            14943809,
            14945500,
            14946278,
            14947165,
            14947087,
            14945923,
            14951157,
            14946593,
            14946790,
            14948255,
            14946254,
            14947790,
            14946313,
            14947513
        ],
        "B": [
            14943326,
            14943191,
            14943393,
            14946771,
            14944173,
            14948008,
            14945018,
            14943391,
            14944514,
            14944104,
            14944387,
            14943821,
            15002142,
            14948152,
            14944125,
            14944530,
            14944871,
            14943806,
            14944927,
            14944558,
            14946007
        ],
        "A": [
            14941960,
            14941817,
            14941888,
            14941881,
            14943576,
            14941987,
            14942178,
            14941800,
            14942424,
            14942297,
            14942192,
            14946279,
            14942201,
            14941803,
            14942278,
            14942854,
            14942697,
            14941911,
            14941863
        ]
    },
    "name": "B. Hamming Distance Sum",
    "statement": "Genos needs your help. He was asked to solve the following programming\r\nproblem by Saitama:The length of some string is denoted . The Hamming\r\ndistance between two strings and of equal length is defined as , where\r\nis the -th character of and is the -th character of . For example, the\r\nHamming distance between string \"\" and string \"\" is .Given two binary\r\nstrings and , find the sum of the Hamming distances between and all\r\ncontiguous substrings of of length .\r\n",
    "solutions": [
        "#include <iostream>\nusing namespace std;\n\nstring a;\nstring b;\nint sm[202020];\n\nint main(){\n  cin >> a >> b;\n  for (int i=0; i<b.size(); ++i){\n    sm[i+1]=sm[i]+b[i]-'0';\n  }\n  int d=b.size()-a.size();\n  long long s=0;\n  for (int i=0; i<a.size(); ++i){\n    if (a[i]=='0'){\n      s+=sm[i+d+1]-sm[i];\n    }else{\n      s+=d+1-(sm[i+d+1]-sm[i]);      \n    }\n  }\n  cout << s << endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "strings"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Hamming Distance Sum.json",
    "editorial_link": "https://codeforces.com//blog/entry/22256",
    "editorial": "We are trying to find . Swapping the sums, we see that this is equivalent to .\n\nSumming up the answer in the naive fashion will give an O(n2) solution. However, notice that we can actually find  without going through each individual character. Rather, all we need is a frequency count of different characters. To obtain this frequency count, we can simply build prefix count arrays of all characters on b. Let's call this prefix count array F, where F[x][c] gives the number of occurrences of the character c in the prefix [0,?x) of b. We can then write . as . This gives us a linear solution.",
    "hint": []
}