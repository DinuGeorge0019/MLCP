{
    "link": "https://codeforces.com//contest/1100/problem/D",
    "problemId": "281742",
    "problem_idx": "D",
    "shortId": "1100D",
    "contest_number": "1100",
    "problem_submissions": {
        "D": [
            48353320,
            48357025,
            48358665,
            48352439,
            48485627,
            48356511,
            48354584,
            48367255,
            48355872,
            48356938,
            48418676,
            48367598,
            48366911,
            48360912
        ],
        "E": [
            48350143,
            48346134,
            48343035,
            48344468,
            48345510,
            48344044,
            48355215,
            48356334,
            48347647,
            48367496,
            48345429,
            48350647,
            48345628,
            48345908,
            48337155,
            48369088,
            48368217,
            48368175,
            48346637
        ],
        "F": [
            48345973,
            48351415,
            48352189,
            48350710,
            48349016,
            48346778,
            48348725,
            48353766,
            48349571,
            58874033,
            48356957,
            48346827,
            48367535,
            48349001
        ],
        "C": [
            48336896,
            48335321,
            48334130,
            48334390,
            48335310,
            48344018,
            48335734,
            48342199,
            48338272,
            48337047,
            48341951,
            48335611,
            48336047,
            48332446,
            48337175,
            48367539,
            48338679,
            48338717
        ],
        "B": [
            48334048,
            48332782,
            48332647,
            48331840,
            48351673,
            48332494,
            48337726,
            48333602,
            48340544,
            48335461,
            48333231,
            48335841,
            48335239,
            48333836,
            48331660,
            48334686,
            48373723,
            48367780,
            48340073,
            48333386
        ],
        "A": [
            48332192,
            48331699,
            48331636,
            48331355,
            48331447,
            48334124,
            48331785,
            48335827,
            48332710,
            48331483,
            48333294,
            48331582,
            48332077,
            48331359,
            48331604,
            48367585,
            48333354,
            48331926
        ]
    },
    "name": "D. Dasha and Chess",
    "statement": "Dasha and NN like playing chess. While playing a match they decided that\r\nnormal chess isn’t interesting enough for them, so they invented a game\r\ndescribed below.There are 666 black rooks and 1 white king on the chess\r\nboard of size 999\r\ntimes 999. The white king wins if he gets checked by rook, or, in other\r\nwords, if he moves onto the square which shares either a row or column\r\nwith a black rook.The sides take turns, starting with white. NN plays as\r\na white king and on each of his turns he moves a king to one of the\r\nsquares that are adjacent to his current position either by side or\r\ndiagonally, or, formally, if the king was on the square (x, y), it can\r\nmove to the square (nx, ny) if and only\r\nmax (|nx - x|, |ny - y|) = 1 , 1\r\nleq nx, ny\r\nleq 999. NN is also forbidden from moving onto the squares occupied with\r\nblack rooks, however, he can move onto the same row or column as a black\r\nrook.Dasha, however, neglects playing by the chess rules, and instead of\r\nmoving rooks normally she moves one of her rooks on any space devoid of\r\nother chess pieces. It is also possible that the rook would move onto\r\nthe same square it was before and the position wouldn’t change. However,\r\nshe can’t move the rook on the same row or column with the king.Each\r\nplayer makes 2000 turns, if the white king wasn’t checked by a black\r\nrook during those turns, black wins. NN doesn’t like losing, but thinks\r\nthe task is too difficult for him, so he asks you to write a program\r\nthat will always win playing for the white king. Note that Dasha can see\r\nyour king and play depending on its position.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define MAXN 1005\n#define INF 1000000000\n#define MOD 1000000007\n#define F first\n#define S second\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> P;\nint x,y,k,xx,yy;\nbool rook[MAXN][MAXN];\nP rk[MAXN];\nvoid mov(int dx,int dy)\n{\n    if(dx!=0&&dy!=0&&rook[x+dx][y+dy])\n    {\n        assert(!rook[x][y+dy]);\n        printf(\"%d %d\\n\",x,y+dy);\n        y=y+dy;\n        fflush(stdout);\n        scanf(\"%d%d%d\",&k,&xx,&yy);\n        assert(k==-1);\n        exit(0);\n    }\n    printf(\"%d %d\\n\",x+dx,y+dy);\n    fflush(stdout);\n    x+=dx;y+=dy;\n    scanf(\"%d%d%d\",&k,&xx,&yy);\n    if(k==-1) exit(0);\n    rook[rk[k].F][rk[k].S]=false;\n    rook[xx][yy]=true;\n    rk[k]=P(xx,yy);\n}\nint main()\n{\n    scanf(\"%d%d\",&x,&y);\n    for(int i=1;i<=666;i++)\n    {\n        scanf(\"%d%d\",&xx,&yy);\n        rook[xx][yy]=true;\n        rk[i]=P(xx,yy);\n    }\n    while(x<500) mov(1,0);\n    while(x>500) mov(-1,0);\n    while(y<500) mov(0,1);\n    while(y>500) mov(0,-1);\n    int cnt0=0,cnt1=0,cnt2=0,cnt3=0;\n    for(int i=1;i<=666;i++)\n    {\n        if(rk[i].F>=500||rk[i].S<=500) cnt0++;\n        if(rk[i].F>=500||rk[i].S>=500) cnt1++;\n        if(rk[i].F<=500||rk[i].S>=500) cnt2++;\n        if(rk[i].F<=500||rk[i].S<=500) cnt3++;\n    }\n    if(cnt0>=500) while(true) mov(1,-1);\n    if(cnt1>=500) while(true) mov(1,1);\n    if(cnt2>=500) while(true) mov(-1,1);\n    if(cnt3>=500) while(true) mov(-1,-1);\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "games",
        "interactive"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Dasha and Chess.json",
    "editorial_link": "https://codeforces.com//blog/entry/64545",
    "editorial": "One of the possible strategies: the king goes to the center, then goes\r\nto the corner that he has as few rooks as possible behind his back. The\r\nsolution uses the Pigeonhole principle, since in the largest corner and\r\nin two neighbors to it, the sum will be no less than rooks, i.e. rooks,\r\nand since the king gets to the corner for of moves, he will definitely\r\nget under check of the rook.\r\n",
    "hint": []
}