{
    "link": "https://codeforces.com//contest/492/problem/E",
    "problemId": "18582",
    "problem_idx": "E",
    "shortId": "492E",
    "contest_number": "492",
    "problem_submissions": {
        "E": [
            8915457,
            8914122,
            8917715,
            8916047,
            8917757,
            8918412,
            8917582,
            8919910,
            8913733,
            8945734,
            8945423,
            8920886,
            8919366,
            8920260,
            8919133,
            8920397,
            8919187,
            8920806,
            8919539,
            8921077,
            8921934
        ],
        "D": [
            8913356,
            8916465,
            8913564,
            8914628,
            8914266,
            8914408,
            8912061,
            8910632,
            8918767,
            8913344,
            8915638,
            8916135,
            8916766,
            8916438,
            8915220,
            8915286,
            8916886,
            8917454,
            8917739
        ],
        "C": [
            8910624,
            8909838,
            8909601,
            8912252,
            8910611,
            8911186,
            8915041,
            8908530,
            8914611,
            8909295,
            8911918,
            8910132,
            8911301,
            8912842,
            8912861,
            8911663,
            8913142,
            8910971,
            8913262
        ],
        "B": [
            8909381,
            8908208,
            8907647,
            8910262,
            8907261,
            8908893,
            8907645,
            8912930,
            8915032,
            8907902,
            8908202,
            8908416,
            8909315,
            8911481,
            8909898,
            8910269,
            8911619,
            8909443,
            8908929
        ],
        "A": [
            8907155,
            8907045,
            8906595,
            8906893,
            8906486,
            8907388,
            8907233,
            8911410,
            8914766,
            8906823,
            8906863,
            8906683,
            8907275,
            8906710,
            8907951,
            8907412,
            8909735,
            8907384,
            8907309
        ]
    },
    "name": "E. Vanya and Field",
    "statement": "Vanya decided to walk in the field of size cells. The field contains\r\napple trees, the -th apple tree is at the cell with coordinates . Vanya\r\nmoves towards vector . That means that if Vanya is now at the cell ,\r\nthen in a second he will be at cell . The following condition is\r\nsatisfied for the vector: , where is the largest integer that divides\r\nboth and . Vanya ends his path when he reaches the square he has already\r\nvisited. Vanya wonders, from what square of the field he should start\r\nhis path to see as many apple trees as possible.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define MAX 1048576\nint co[MAX], ans[MAX];\nint main(){\n\tint n, m, dx, dy;\n\tcin >> n >> m >> dx >> dy;\n\tfor(int i = 0, nx = 0, ny = 0; i < n ; i++){\n\t\tco[nx] = ny;\n\t\tnx += dx;\n\t\tny += dy;\n\t\tnx %= n;\n\t\tny %= n;\n\t}\n\tint Max = 0, maxid;\n\tfor(int i = 0 ; i < m ; i++){\n\t\tint x, y;\n\t\tcin >> x >> y;\n\t\tint t = (y+n-co[x])%n;\n\t\tans[t]++;\n\t\tif(ans[t] > Max){\n\t\t\tmaxid = t;\n\t\t\tMax = ans[t];\n\t\t}\n\t}\n\tcout << 0 << ' ' << maxid << endl;\n\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Vanya and Field.json",
    "editorial_link": "https://codeforces.com/blog/entry/14957",
    "editorial": "As long as , Vanya will do full cycle for moves. Let\u00e2\u0080\u0099s group all\r\npossible pathes into groups, where path will be started from points .\r\nLet\u00e2\u0080\u0099s look on first path: . As long as , among the first coordinates of\r\npoints of the path there will be all the numbers from to . So we can\r\nwrite in the array all relations between the first and second coordinate\r\nin points for the path, that starts in the point , i.e. . Now we know,\r\nthat all points with type , where , belong to the group with start point\r\n. In that case, points with type belong to the group with start point .\r\nThen we can add every point to required group for : . Then we need just\r\nto find group with the maximal amount of elements, it will be the\r\nanswer. Time complexity . Jury\u00e2\u0080\u0099s solution: 8924746 P.S. Sorry for my bad\r\nEnglish, I hope, I will correct this editorial as much, as possible.\r\n"
}