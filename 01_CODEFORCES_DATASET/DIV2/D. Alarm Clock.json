{
    "link": "https://codeforces.com//contest/898/problem/D",
    "problemId": "139117",
    "problem_idx": "D",
    "shortId": "898D",
    "contest_number": "898",
    "problem_submissions": {
        "F": [
            33307844,
            33307069,
            33308143,
            33307333,
            33304725,
            33309674,
            33307617,
            33324444,
            33463766,
            33463739
        ],
        "E": [
            33298700,
            33298827,
            33296850,
            33298062,
            33299543,
            33301231,
            33302052,
            33295023,
            33295557,
            33302644,
            33297022,
            33300051,
            33297188,
            33300909,
            33298325,
            33294157,
            33299352
        ],
        "D": [
            33295484,
            33296274,
            33295804,
            33295438,
            33296979,
            33297889,
            33299897,
            33296885,
            33293153,
            33301610,
            33299195,
            33297291,
            33294317,
            33297559,
            33296082,
            33292010,
            33295516
        ],
        "C": [
            33293049,
            33292838,
            33294192,
            33293208,
            33294387,
            33295591,
            36631893,
            33298752,
            33292900,
            33291380,
            33326974,
            33293057,
            33293412,
            33294345,
            33292038,
            33294840,
            33294194,
            33298225,
            33297034
        ],
        "B": [
            33288797,
            33294236,
            33289524,
            33296573,
            33305320,
            33291082,
            33290611,
            33289720,
            33288149,
            33288790,
            33289877,
            33289821,
            33288702,
            33290526,
            33291731,
            33294974,
            33291014
        ],
        "A": [
            33287337,
            33293381,
            33287422,
            33296068,
            33304988,
            33288124,
            33288589,
            33287509,
            33287292,
            33287275,
            33287989,
            33287858,
            33287278,
            33288680,
            33290739,
            33295465,
            33288106
        ]
    },
    "name": "D. Alarm Clock",
    "statement": "Every evening Vitalya sets alarm clocks to wake up tomorrow. Every alarm\r\nclock rings during exactly one minute and is characterized by one\r\ninteger number of minute after midnight in which it rings. Every alarm\r\nclock begins ringing at the beginning of the minute and rings during\r\nwhole minute. Vitalya will definitely wake up if during some consecutive\r\nminutes at least alarm clocks will begin ringing. Pay attention that\r\nVitalya considers only alarm clocks which begin ringing during given\r\nperiod of time. He doesn\u2019t consider alarm clocks which started ringing\r\nbefore given period of time and continues ringing during given period of\r\ntime.Vitalya is so tired that he wants to sleep all day long and not to\r\nwake up. Find out minimal number of alarm clocks Vitalya should turn off\r\nto sleep all next day. Now all alarm clocks are turned on.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <bits/stdc++.h>\n\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define ll long long\n\nusing namespace std;\n\nconst int N = (1e6) + 10, mod = (1e9) + 7;\n\nmultiset <int> st;\nint n,m,k;\nint a[N], b[N];\n\nint main(){\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tfor(int i = 1,x; i <= n; i++){\n\t\tscanf(\"%d\", &x);\n\t\ta[i] = x;\n\t}\n\tsort(a + 1,a + n + 1);\n\tint sz = 0;\n\tint ans = 0;\n\tfor(int i = 1; i <= n; i++){\n\t\tb[++sz] = a[i];\n\t\tif(sz >= k){\n\t\t\tif(b[sz] - b[sz - k + 1] < m){\n\t\t\t\tsz--;\n\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\", ans);\n\t\n \treturn 0;\n}             "
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Alarm Clock.json",
    "editorial_link": "https://codeforces.com//blog/entry/56381",
    "editorial": "At first we need to sort all alarms in increasing order of their times.\r\nAlso we will use set, where we will store alarm times.We will iterate\r\nthrough the alarms beginning from the first. Let current alarm time\r\nequals to . Until set does not empty and the first set element less than\r\nwe should remove the first set element. After that only alarm with times\r\nnot before minutes relatively will be in set. If after that the set size\r\nless than we should insert in the set (we will not turn off this alarm).\r\nIn the other case, we should turn off this alarm, so we increase the\r\nanswer on one and do not insert in the set.\r\n"
}