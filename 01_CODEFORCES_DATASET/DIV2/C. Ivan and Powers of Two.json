{"link": "https://codeforces.com//contest/305/problem/C", "problemId": "3008", "problem_idx": "C", "shortId": "305C", "contest_number": "305", "problem_submissions": {"A": [3743947, 3742003, 3738237, 3741973, 3743789, 3738630, 3746146, 3738359, 3738236, 3744732, 3739637, 3742465, 3737309, 3742105, 3736988, 3737540], "B": [3742919, 3738335, 3737895, 3738111, 3743327, 3736944, 3739543, 3740227, 3738192, 3744577, 3738563], "C": [3742188, 3739255, 3740066, 3739103, 3742647, 3740551, 3737297, 3744156, 3736706, 3738323, 3738124, 3738406, 3742683, 3739670, 3738219, 3742469, 3739915], "D": [3741403, 6159506, 3821844, 3746061, 3744660, 3745182, 3743300, 3747615], "E": [3738483, 3741561, 6006201, 3743278, 3743310, 3741203, 3762743, 3747416, 3743624, 3742904, 3751978]}, "name": "C. Ivan and Powers of Two", "statement": "Ivan has got an array of non-negative integers . Ivan knows that the\r\narray is sorted in the non-decreasing order. Ivan wrote out integers on\r\na piece of paper. Now he wonders, what minimum number of integers of\r\nform need to be added to the piece of paper so that the sum of all\r\nintegers written on the paper equalled for some integer . Help Ivan,\r\nfind the required quantity of numbers.\r\n", "solutions": ["/*\n* Problem: \n* Author: Leo Yu\n* Time: \n* State: SOLVED\n* Memo: \n*/\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <iostream>\n#include <algorithm>\n#include <ctime>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\ntypedef long long LL;\ninline int\tread()\n{\n\tint x = 0; char ch = getchar(); bool positive = 1;\n\tfor (; ch < '0' || ch > '9'; ch = getchar())\tif (ch == '-')  positive = 0;\n\tfor (; ch >= '0' && ch <= '9'; ch = getchar())\tx = x * 10 + ch - '0';\n\treturn positive ? x : -x;\n}\n#define link Link\n\nint N;\npriority_queue<int>\tQ;\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"a.in\", \"r\", stdin);\n\tfreopen(\"a.out\", \"w\", stdout);\n#endif\n\n\tN = read();\n\tfor (int i = 1; i <= N; ++ i)\tQ.push(-read());\n\tint last = -1, ans = 0;\n\twhile (!Q.empty())\n\t{\n\t\tint now = -Q.top();\n\t\tQ.pop();\n\t\tif (!Q.empty() && -Q.top() == now)\n\t\t{\n\t\t\tQ.pop();\n\t\t\tQ.push(-(now + 1));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tans += now - last - 1;\n\t\t\tlast = now;\n\t\t}\n\t}\n\tcout << ans << endl;\n\n\treturn 0;\n}\n\n"], "input": "", "output": "", "tags": ["greedy", "implementation"], "dificulty": "1600", "interactive": false}