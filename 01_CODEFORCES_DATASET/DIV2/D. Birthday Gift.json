{
    "link": "https://codeforces.com//contest/1946/problem/D",
    "problemId": "2546664",
    "problem_idx": "D",
    "shortId": "1946D",
    "contest_number": "1946",
    "problem_submissions": {
        "F": [
            252778634,
            252785320,
            252786013,
            252792288,
            252797773,
            252760159,
            252805049,
            252802973,
            252797418,
            252804807,
            252802498,
            252803677,
            252806450,
            252799639,
            252798045,
            252805458,
            253149787,
            253149764,
            252804697,
            252968362,
            252967816,
            252967536,
            252967308,
            252806243,
            252801898,
            252945361
        ],
        "E": [
            252767893,
            252755066,
            252775649,
            252778497,
            252788255,
            252768645,
            252781620,
            252778378,
            252791272,
            252783666,
            252792255,
            252787037,
            252788438,
            252796123,
            252791048,
            252789043,
            253149820,
            252796931,
            252794065,
            252793295,
            252769537
        ],
        "D": [
            252762969,
            252760657,
            252762929,
            252773084,
            252775710,
            252791493,
            252768538,
            252788123,
            252780760,
            252772529,
            252780806,
            252771784,
            252771623,
            252765540,
            252785160,
            252771914,
            253149843,
            252783465,
            252776484,
            252789596,
            252761305
        ],
        "C": [
            252755980,
            252750182,
            252755510,
            252756532,
            252756457,
            252786638,
            252755577,
            252760887,
            252765082,
            252758814,
            252754307,
            252762090,
            252762611,
            252762199,
            252764272,
            252764206,
            253149881,
            252762872,
            252757806,
            252747947,
            252752185
        ],
        "B": [
            252751889,
            252748922,
            252750334,
            252750610,
            252747768,
            252788061,
            252749547,
            252752546,
            252752071,
            252751826,
            252749973,
            252750830,
            252751955,
            252750419,
            252760194,
            252752821,
            253149896,
            252756666,
            252745823,
            252761849,
            252754627
        ],
        "A": [
            252743735,
            252744280,
            252743830,
            252744601,
            252743817,
            252788730,
            252743641,
            252745268,
            252744800,
            252746033,
            252743616,
            252744372,
            252744103,
            252744348,
            252750764,
            252744631,
            253149908,
            252746630,
            252743684,
            252757716,
            252743737
        ]
    },
    "name": "D. Birthday Gift",
    "statement": "Yarik’s birthday is coming soon, and Mark decided to give him an array a\r\nof length n.Mark knows that Yarik loves bitwise operations very much,\r\nand he also has a favorite number x, so Mark wants to find the maximum\r\nnumber k such that it is possible to select pairs of numbers [l_1, r_1],\r\n[l_2, r_2],\r\nldots [l_k, r_k], such that: l_1 = 1. r_k = n. l_i\r\nle r_i for all i from 1 to k. r_i + 1 = l_{i + 1} for all i from 1 to\r\nk - 1. (a_{l_1}\r\noplus a_{l_1 + 1}\r\noplus\r\nldots\r\noplus a_{r_1}) | (a_{l_2}\r\noplus a_{l_2 + 1}\r\noplus\r\nldots\r\noplus a_{r_2}) |\r\nldots | (a_{l_k}\r\noplus a_{l_k + 1}\r\noplus\r\nldots\r\noplus a_{r_k})\r\nle x, where\r\noplus denotes the operation of bitwise XOR, and | denotes the operation\r\nof bitwise OR. If such k does not exist, then output -1.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define MP make_pair\nmt19937 rnd(time(0));\nconst int MAXN=1e5+5;\nint n,x,ans,a[MAXN];\nvoid solve(){\n\tcin>>n>>x;x++;\n\tfor(int i=1;i<=n;i++) cin>>a[i],a[i]^=a[i-1];\n\tans=-1;\n\tfor(int i=30,y=0;i>=0;i--) if(x>>i&1){\n\t\ty|=(1<<i);\n\t\tint cnt=0;\n\t\tif((a[0]&y)!=(a[n]&y)){\n\t\t\ty^=(1<<i);\n\t\t\tcontinue;\n\t\t}\n\t\tfor(int i=1;i<=n;i++) if((a[i]&y)==0) cnt++;\n\t\tans=max(ans,cnt);\n\t\ty^=(1<<i);\n\t}else y|=(1<<i);\n\tcout<<ans<<'\\n';\n}\nint main(){\n\tios::sync_with_stdio(false);\n\t// freopen(\"Otomachi_Una.in\",\"r\",stdin);\n\t// freopen(\"Otomachi_Una.out\",\"w\",stdout);\n\tint _;cin>>_;\n\twhile(_--) solve();\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Birthday Gift.json",
    "editorial_link": "https://codeforces.com//blog/entry/127439",
    "editorial": "For convenience, letâs increase by , and then iterate through the bit in\r\nwhich the final number is less than . We will iterate from the most\r\nsignificant bit to the least significant bit, denoting it as . The\r\ninitial bit will be . Letâs look at all the numbers in which this bit is\r\n.If there is an odd number of such numbers, then the of some subsegment\r\nwill be odd, and therefore the final will also be odd. If at the same\r\ntime the bit in is , then the process needs to be terminated, because in\r\nall the other bits it will no longer be possible to decrease the final\r\nnumber. If, however, in this bit is also , then we need to move on to\r\nthe less significant bits, since in both numbers this bit will always be\r\n.If the number of numbers with in bit is even, then in order to make\r\nthis bit in the final number, each segment must contain an even number\r\nof such numbers, and since we want to maximize the number of segments,\r\neach segment must contain exactly such numbers. For this, for every two\r\nindices and , such that and in bit contain , and all numbers from to\r\ncontain , replace the subsegment with . After this, if there is a in in\r\nthis bit, update the answer and return the array to its original state.\r\nThen move on to the less significant bits.There is also an alternative\r\nsolution that also iterates through the bits from the most significant\r\nto the least significant, but instead of compressing subsegments into\r\none number, it uses a greedy algorithm.\r\n",
    "hint": []
}