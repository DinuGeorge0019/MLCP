{
    "link": "https://codeforces.com//contest/315/problem/D",
    "problemId": "3136",
    "problem_idx": "D",
    "shortId": "315D",
    "contest_number": "315",
    "problem_submissions": {
        "D": [
            3839378,
            3835996,
            3836633,
            3840727,
            3839410,
            3842603,
            3840070,
            3842376,
            3840954,
            3840951,
            3847146,
            3854666
        ],
        "E": [
            3839105,
            3840643,
            3838934,
            3841894,
            3842575,
            3854729
        ],
        "B": [
            3836129,
            3832463,
            3834203,
            3833545,
            3833336,
            3831852,
            3833749,
            3835799,
            3831777,
            3842650,
            3835295,
            3833206,
            3833365,
            3834515,
            3835102,
            3833302,
            3834530
        ],
        "A": [
            3834029,
            3831727,
            3832271,
            3832136,
            3837854,
            3833804,
            3832476,
            3842652,
            3833993,
            3832140,
            3847870,
            3832027,
            3839153,
            3831978,
            3832841
        ],
        "C": [
            3834613,
            3839057,
            3836478,
            3837667,
            3841764,
            3835892,
            3840284,
            3834922,
            3842622,
            3841180,
            3838323,
            3835768,
            3836939,
            3838736,
            3837885,
            3839838
        ]
    },
    "name": "D. Sereja and Periods",
    "statement": "Let’s introduce the designation , where is a string, is a positive\r\ninteger and operation \"\" is the string concatenation operation. For\r\nexample, .We’ll say that string from string , if we can remove some\r\ncharacters from string and obtain string . For example, strings and can\r\nbe obtained from string , and strings and cannot be obtained from\r\nit.Sereja has two strings, and . He wants to find such maximum integer ,\r\nthat can be obtained from string .\r\n",
    "solutions": [
        "#include<iostream>\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nconst int maxn=110,maxd=40;\nchar Sa[maxn],Sb[maxn];\nint a,b,la,lb;\nlong long trans[maxn][maxd];\nbool gettrans(){\n    for(int i=0;i<la;i++){\n        int now=i;\n        for(int j=0;j<lb;j++){\n            int cnt=0;\n            while(cnt<=la && Sa[now % la] !=Sb[j])now++,cnt++;\n            if(Sa[now % la] !=Sb[j])return false;\n            now++;\n        }\n        trans[i][0]=now-i;\n    }   \n    for(int j=1;j<maxd;j++)\n        for(int i=0;i<la;i++)\n            trans[i][j]=trans[(trans[i][j-1]+ i)% la][j-1]+ trans[i][j-1];\n    return 1;\n}\nlong long getmax(){\n    long long now=0,ans=0;\n    for(int i=maxd-1;i >=0;i--)\n        if((trans[now % la][i]+ now)<=a * la)\n        {\n            now+=trans[now % la][i];\n            ans+=1LL<<i;\n        }\n    return ans;\n}\nint main(){\n    scanf(\"%d%d\",&a,&b);\n    scanf(\"%s\",Sa);\n    scanf(\"%s\",Sb);\n    la=strlen(Sa);\n    lb=strlen(Sb);\n    if(!gettrans())printf(\"0\\n\");\n    else{\n        long long ans=getmax();\n        printf(\"%I64d\\n\",ans/b);\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "strings"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Sereja and Periods.json",
    "editorial_link": "https://codeforces.com//blog/entry/7905",
    "editorial": "It is clear that we can use greedy algorithm to look for the number of occurrences of the 2nd string in the first string, but it works too slow. To speed up the process, you can look at the first line of the string that specifies the second period. And the answer is divided into how many string you need to set the second string. Next, we consider our greedy algorithm. We are going by the first string, till we find the first character of the second string, then the second, third and so on until the last, then again find the first, second, and so the cycle. It is clear that if we stand in the same twice in a state in which the positions in the first string corresponds to one character string that determines the period and the position of the second string are the same, then we obtain the period. When we find this period, we can just repeat it as many times as possible.\n",
    "hint": []
}