{
    "link": "https://codeforces.com//contest/1802/problem/C",
    "problemId": "1817556",
    "problem_idx": "C",
    "shortId": "1802C",
    "contest_number": "1802",
    "problem_submissions": {
        "F": [
            196663888,
            196625008,
            196625749,
            196635602,
            196634743,
            196643091,
            196651329,
            196656599,
            196633915,
            196648089,
            196652202,
            196632881,
            196638320,
            196651695,
            196637871,
            196638608,
            196644590,
            196711680
        ],
        "G": [
            196633429,
            196750849
        ],
        "A": [
            196608625,
            196601765,
            196601430,
            196604403,
            196601551,
            196601415,
            196601637,
            196621554,
            197609656,
            196604338,
            196602290,
            196601755,
            196624562,
            196602593,
            196601829,
            196602885,
            196603556,
            196602800,
            196601750,
            196602859,
            196601468
        ],
        "C": [
            196603858,
            196634826,
            196613689,
            196616450,
            196615629,
            196606590,
            196615213,
            196643285,
            196614451,
            196642605,
            196612216,
            196636938,
            196666118,
            196610483,
            196616792,
            196626477,
            196610562,
            196619309,
            196615002,
            196608792
        ],
        "D": [
            196603459,
            196611669,
            196611547,
            196620657,
            196623482,
            196612856,
            196623750,
            196629627,
            197067794,
            196623474,
            196620294,
            196724558,
            196619887,
            196617809,
            196618077,
            196620127,
            196622956,
            196623094,
            196616226
        ],
        "B": [
            196601817,
            196604589,
            196605912,
            196607950,
            196604989,
            196602908,
            196605368,
            196624195,
            197609716,
            196611451,
            196608455,
            196605092,
            196630916,
            196608589,
            196607012,
            196607509,
            196609282,
            196615569,
            196605751,
            196607659,
            196606374
        ],
        "E": [
            196616155,
            196623146,
            196626388,
            196631009,
            196622442,
            196634549,
            196631368,
            196632011,
            196635287,
            196622016,
            196653867,
            196631106,
            196668550,
            196632178,
            196624422,
            196629837,
            196626927,
            196632190,
            196635404
        ]
    },
    "name": "C. The Very Beautiful Blanket",
    "statement": "Kirill wants to weave the blanket consisting of n\r\ntimes m of the same size square patches of some colors. He matched some\r\nnon-negative integer to each color. Thus, in our problem, the blanket\r\ncan be considered a B matrix of size n\r\ntimes m consisting of non-negative integers.Kirill considers that the\r\nblanket is , if for each submatrix A of size 4\r\ntimes 4 of the matrix B is true: A_{11}\r\noplus A_{12}\r\noplus A_{21}\r\noplus A_{22} = A_{33}\r\noplus A_{34}\r\noplus A_{43}\r\noplus A_{44}, A_{13}\r\noplus A_{14}\r\noplus A_{23}\r\noplus A_{24} = A_{31}\r\noplus A_{32}\r\noplus A_{41}\r\noplus A_{42},where\r\noplus means bitwise exclusive ORKirill asks you to help her weave a\r\nblanket, and as colorful as possible!He gives you two integers n and m.\r\nYour task is to generate a matrix B of size n\r\ntimes m, which corresponds to a blanket and in which the number of\r\ndifferent numbers maximized.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ntemplate <typename T> inline void read(T &F) {\n    int R = 1; F = 0; char CH = getchar();\n    for(; !isdigit(CH); CH = getchar()) if(CH == '-') R = -1;\n    for(; isdigit(CH); CH = getchar()) F = F * 10 + CH - 48;\n    F *= R;\n}\ninline void file(string str) {\n    freopen((str + \".in\").c_str(), \"r\", stdin);\n    freopen((str + \".out\").c_str(), \"w\", stdout);\n}\nLL seed = chrono :: steady_clock :: now().time_since_epoch().count();\nmt19937_64 rnd(seed); LL randnum(LL l, LL r) {return rnd() % (r - l + 1) + l;}\nconst int N = 2e2 + 10;\nLL ai[N], bi[N]; int n, m;\nbool check() {\n    vector<LL> v(n * m);\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <= m; j++)\n            v[(i - 1) * m + j - 1] = (ai[i] ^ bi[j]);\n    sort(v.begin(), v.end());\n\n    for(int i = 1; i < v.size(); i++)\n        if(v[i] == v[i - 1]) return false;\n    return true;\n}\nvoid ran() {\n    for(int i = 1; i <= n; i++) ai[i] = rnd();\n    for(int i = 1; i <= m; i++) bi[i] = rnd();\n    for(int i = 1; i <= n; i++) if(ai[i] < 0) ai[i] = -ai[i];\n    for(int i = 1; i <= m; i++) if(bi[i] < 0) bi[i] = -bi[i];\n}\nint main() {\n    //file(\"\");\n    int T; read(T);\n    while(T--) {\n        read(n), read(m);\n        ran();\n        while(!check()) ran();\n        cout << n * m << '\\n';\n        for(int i = 1; i <= n; i++, puts(\"\"))\n            for(int j = 1; j <= m; j++) cout << (ai[i] ^ bi[j]) << ' ';\n    }\n    \n    #ifdef _MagicDuck\n        fprintf(stderr, \"# Time: %.3lf s\", (double)clock() / CLOCKS_PER_SEC);\n    #endif\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. The Very Beautiful Blanket.json",
    "editorial_link": "https://codeforces.com//blog/entry/113857",
    "editorial": "The maximum number of different numbers we can type is always n?m\n. Let's show how you can build an example for any n\n and m\n.\n\nNote that if we were able to construct a correct matrix, then any of its submatrix is also a correct matrix of a smaller size. Therefore, let's build a correct matrix for some N\n and M\n, and as an answer we will output the upper left corner of this matrix of the desired size.\n\nTake N=M=28\n and construct the matrix using the following algorithm. Let's break it into blocks of size 2×2\n. Let's number the blocks from left to right and from top to bottom in order, starting from zero. The $i$th block will have the form\n\n4i+0\n 4i+1\n\n4i+2\n 4i+3\n\nWith this construction, the bitwise exclusive OR any submatrix of size 2×2\n will be zero. You can verify this as follows. Let's look at the upper left corner of (i,j)\n of an arbitrary submatrix of size 2×2\n. There are 4 cases:\n\nboth coordinates are even;\ni\n is even, j\n is odd;\ni\n odd, j\n even;\nboth coordinates are odd.\nImmediately note that i,j<200<28\n\nConsider the most unpleasant case  the last one. The remaining cases are treated in a similar way. In this case, the submatrix will have the form:\n\n4i+3\n 4(i+1)+2\n\n4(i+28)+1\n 4(i+28+1)+0\n\nNote that the second part of each term is less than 4, and the first part of each term is greater than or equal to 4. Therefore, they can be considered independently.\n\n3?2?1?0\n =\n 0\n.\n\nIf i\n=\n1\n, then\n\n4i?4(i+1)\n =\n 12\n,\n\n4(1+28)?4(2+28)\n =\n 12\n.\n\nIf i?1\n, then\n\n4i?4(i+1)\n =\n 4\n\n4(i+28)?4(i+28+1)\n=\n4\n (for i=0\n, you can check with your hands, for 1<i<28\n 4(i+28)\n will be reduced and 4\n will remain from the second term).\n\n4?4?0\n =\n 0\n. Thus, in the selected submatrix, the bitwise exclusive OR is zero.",
    "hint": []
}