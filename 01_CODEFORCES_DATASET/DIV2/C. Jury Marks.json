{
    "link": "https://codeforces.com//contest/831/problem/C",
    "problemId": "114249",
    "problem_idx": "C",
    "shortId": "831C",
    "contest_number": "831",
    "problem_submissions": {
        "F": [
            28524412,
            28589075
        ],
        "E": [
            28518576,
            28519922,
            28516725,
            28518610,
            28517316,
            28518604,
            28514634,
            28517509,
            28512481,
            28519183,
            28520727,
            28519505,
            28520653,
            28522570,
            28522388,
            28519257,
            28516821,
            28521941,
            28520051,
            28517313
        ],
        "D": [
            28515659,
            28515412,
            28513332,
            28513652,
            28513411,
            28516483,
            28516655,
            28522155,
            28520115,
            28516173,
            28515154,
            28516779,
            28516912,
            28515110,
            28514947,
            28514700,
            28517868,
            28516879,
            28517907,
            28522125
        ],
        "C": [
            28513086,
            28513404,
            28511104,
            28512442,
            28514905,
            28512216,
            28520896,
            28511207,
            28520643,
            28514218,
            28513025,
            28512706,
            28513552,
            28512508,
            28511403,
            28520892,
            28521339,
            28514051,
            28515858,
            28520114
        ],
        "B": [
            28507101,
            28507693,
            28506648,
            28506753,
            28507510,
            28507533,
            28507834,
            28507930,
            28507062,
            28507463,
            28509384,
            28508411,
            28507824,
            28508253,
            28508638,
            28507559,
            28507917,
            28511079,
            28507613
        ],
        "A": [
            28506106,
            28506123,
            28506025,
            28506039,
            28506323,
            28506210,
            28506627,
            28506516,
            28506009,
            28506088,
            28508398,
            28506582,
            28506848,
            28506960,
            28507487,
            28506150,
            28506496,
            28507984,
            28506206
        ]
    },
    "name": "C. Jury Marks",
    "statement": "Polycarp watched TV-show where jury members one by one rated a\r\nparticipant by adding him a certain number of points (may be negative,\r\ni. e. points were subtracted). Initially the participant had some score,\r\nand each the marks were one by one added to his score. It is known that\r\nthe -th jury member gave points.Polycarp does not remember how many\r\npoints the participant had before this marks were given, but he\r\nremembers that among the scores announced after each of the judges rated\r\nthe participant there were () values (it is guaranteed that all values\r\nare distinct). It is possible that Polycarp remembers not all of the\r\nscores announced, i. e. . Note that the initial score wasn\u2019t\r\nannounced.Your task is to determine the number of options for the score\r\nthe participant could have before the judges rated the participant.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nint n,m,ans=0;\nint a[10007],b[10007],c[10007];\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;++i)scanf(\"%d\",a+i);\n\tfor(int i=1;i<=n;++i)b[i]=b[i-1]+a[i];\n\tstd::sort(b+1,b+n+1);\n\tn=std::unique(b+1,b+n+1)-b-1;\n\tfor(int i=1;i<=m;++i)scanf(\"%d\",c+i);\n\tans=n;\n\tfor(int i=1;i<=n;++i){\n\t\tint d=c[1]-b[i];\n\t\tfor(int j=1;j<=m;++j)if(!std::binary_search(b+1,b+n+1,c[j]-d)){\n\t\t\t--ans;\n\t\t\tbreak;\n\t\t}\n\t}\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Jury Marks.json",
    "editorial_link": "https://codeforces.com//blog/entry/53302",
    "editorial": "At first let\u00e2\u0080\u0099s calculate an array where equals to sum of the first jury\r\npoints.Now consider the value . Let the initial score equals to . Here\r\nwe need to iterate by from to how many members of jury rated the\r\nparticipant until Polycarp remembered . Then . Insert each initial\r\nscores in .So, we got all possible initial participant scores. After\r\nthat it is left only to check correctness of each initial score.Let the\r\nanother candidate on initial score equals to . We need to put in set all\r\nvalues for all from to . After that we need to check that all elements\r\nof array can be find in . If it is true the participant could has\r\ninitial score points, so we need to increase the answer on one.\r\n"
}