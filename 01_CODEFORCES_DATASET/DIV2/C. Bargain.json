{
    "link": "https://codeforces.com//contest/1422/problem/C",
    "problemId": "748725",
    "problem_idx": "C",
    "shortId": "1422C",
    "contest_number": "1422",
    "problem_submissions": {
        "F": [
            94701883,
            94826866,
            94826835,
            94745688,
            94705379,
            94693551,
            94953245,
            94915043,
            94711007,
            94710952
        ],
        "D": [
            94689176,
            94687852,
            94699245,
            94700756,
            94730858,
            94685919,
            94687412,
            94684031,
            94691326,
            94692798,
            209847951,
            94692199,
            94693976,
            94690624,
            94695759,
            95022837,
            94688084,
            94690199
        ],
        "C": [
            94679953,
            94679288,
            94678596,
            94684155,
            94679523,
            94703846,
            94668997,
            94676012,
            94678225,
            94681262,
            94689674,
            94678418,
            94678427,
            94678143,
            94682123,
            94677251,
            94684478,
            94676757,
            94679761
        ],
        "B": [
            94670303,
            94669460,
            94669121,
            94671181,
            94667987,
            94697716,
            94673035,
            94667020,
            94667631,
            94669211,
            94678649,
            94671772,
            94672654,
            94668738,
            94675426,
            94669613,
            94671963,
            94668373,
            94672738
        ],
        "A": [
            94662989,
            94664962,
            97569670,
            94661799,
            94662880,
            94662335,
            94664103,
            94661944,
            94661473,
            94662039,
            94663061,
            94665832,
            94661500,
            94664606,
            94661429,
            94662035,
            94661746,
            94661457,
            94662741,
            94673552
        ],
        "E": [
            94701493,
            94708058,
            94709364,
            94747586,
            95060609,
            95041928,
            94699655,
            94723718,
            94704623
        ]
    },
    "name": "C. Bargain",
    "statement": "Sometimes it is not easy to come to an agreement in a bargain. Right now\r\nSasha and Vova can’t come to an agreement: Sasha names a price as high\r\nas possible, then Vova wants to remove as many digits from the price as\r\npossible. In more details, Sasha names some integer price n, Vova\r\nremoves a non-empty substring of (consecutive) digits from the price,\r\nthe remaining digits close the gap, and the resulting integer is the\r\nprice.For example, is Sasha names 1213121, Vova can remove the substring\r\n1312, and the result is 121.It is allowed for result to contain leading\r\nzeros. If Vova removes all digits, the price is considered to be 0.Sasha\r\nwants to come up with some constraints so that Vova can’t just remove\r\nall digits, but he needs some arguments supporting the constraints. To\r\nstart with, he wants to compute the sum of all possible resulting prices\r\nafter Vova’s move.Help Sasha to compute this sum. Since the answer can\r\nbe very large, print it modulo 10^9 + 7.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define I inline int\n#define V inline void\n#define ll long long int\n#define isnum(ch) ('0'<=ch&&ch<='9')\n#define FOR(i,a,b) for(int i=a;i<=b;i++)\n#define ROF(i,a,b) for(int i=a;i>=b;i--)\n#define REP(u) for(int i=h[u],v;v=e[i].t,i;i=e[i].n)\n#define gc (_op==_ed&&(_ed=(_op=_buf)+fread(_buf,1,100000,stdin),_op==_ed)?EOF:*_op++)\nchar _buf[100000],*_op(_buf),*_ed(_buf);\nI getint(){\n\tint _s=0,_f=1;char _ch=gc;\n\twhile(!isnum(_ch))(_ch=='-')&&(_f=-1),_ch=gc;\n\twhile(isnum(_ch))_s=_s*10+_ch-48,_ch=gc;\n\treturn _s*_f;\n}\nconst int N=2e5+1,mod=1e9+7;\nV check(int&x){x-=mod,x+=x>>31&mod;}\nV cmax(int&x,int y){if(x-y>>31)x=y;}\nV cmin(int&x,int y){if(y-x>>31)x=y;}\nchar a[N];\nint n,ans,now,p,f[N],val[N],pw[N];\nI S(int x){return 1ll*x*(x+1)/2%mod;}\nV input(){\n\tscanf(\"%s\",a+1),n=strlen(a+1);\n\tp=1,now=0,pw[0]=1;\n\tFOR(i,1,n)pw[i]=10ll*pw[i-1]%mod;\n\tROF(i,n,1){\n\t\tif(i<n)check(now+=1ll*(n-i)*pw[n-i-1]%mod);\n\t\tcheck(ans+=1ll*(a[i]-'0')*now%mod);\n\t\tcheck(ans+=1ll*pw[n-i]*(a[i]-'0')%mod*S(i-1)%mod);\n\t}\n\tcout<<ans<<'\\n';\n}\nV init(){\n\t\n}\nV work(){\n\t\n}\nint main(){\n//\tfreopen(\"test.in\",\"r\",stdin);\n//\tfreopen(\".out\",\"w\",stdout);\n//\tfor(scanf(\"%d\",&T);T--;){\n\t\tinput();\n\t\tinit();\n\t\twork();\n//\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Bargain.json",
    "editorial_link": "https://codeforces.com//blog/entry/83452",
    "editorial": "Letâs count for each digit how many times it will be included in the\r\nfinal sum and in what place. Letâs denote as the length of the number .\r\nConsider the digit at the position in the number (). If some part of the\r\nnumber to the left of the digit is removed, then the current digit will\r\nremain in its place and we add the number of ways to remove the\r\nsubsegment to the left to the answer multiplied by the current digit .\r\nIf the segment to the right is deleted, then the place of the digit will\r\nchange for all , or . The sum can be pre-calculated for all values.\r\n",
    "hint": []
}