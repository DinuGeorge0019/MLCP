{
    "link": "https://codeforces.com//contest/861/problem/E",
    "problemId": "122873",
    "problem_idx": "E",
    "shortId": "861E",
    "contest_number": "861",
    "problem_submissions": {
        "B": [
            30441262,
            30424376,
            30427161,
            30427960,
            30424359,
            30424926,
            30425840,
            30430094,
            30424319,
            30428309,
            30428624,
            30440366,
            30437511,
            30435804,
            30427921,
            30432832,
            30423882
        ],
        "F": [
            30440095,
            30439628,
            30440266,
            30439498,
            30441670,
            30441500,
            30452319,
            30437084
        ],
        "E": [
            30436514,
            30436701,
            30441404,
            30443472,
            30442827,
            30445184,
            30445314,
            30443353,
            30443911
        ],
        "D": [
            30428168,
            30427382,
            30423887,
            30433533,
            30430871,
            30432293,
            30434646,
            30433520,
            30433941,
            30433630,
            30434459,
            30436865,
            30433644,
            30426019,
            30432738,
            30434925,
            30433542,
            30432317,
            30434703
        ],
        "A": [
            30424689,
            30422095,
            30427679,
            30422354,
            30422107,
            30422516,
            30422863,
            30426215,
            30422101,
            30424813,
            30422256,
            30425576,
            30489148,
            30430836,
            30422849,
            30423019,
            30422141,
            30422002
        ],
        "C": [
            30423987,
            30425801,
            30429852,
            30426800,
            30428131,
            30429744,
            30425472,
            30430400,
            30430892,
            30431289,
            30440032,
            30431284,
            30432065,
            30432412,
            30435482,
            30426919
        ]
    },
    "name": "E. Tests Renumeration",
    "statement": "The All-Berland National Olympiad in Informatics has just ended! Now\r\nVladimir wants to upload the contest from the Olympiad as a gym to a\r\npopular Codehorses website.Unfortunately, the archive with Olympiad’s\r\ndata is a mess. For example, the files with tests are named arbitrary\r\nwithout any logic.Vladimir wants to rename the files with tests so that\r\ntheir names are distinct integers starting from without any gaps,\r\nnamely, \"\", \"\", ..., \"’, where is the total number of tests.Some of the\r\nfiles contain tests from statements (examples), while others contain\r\nregular tests. It is possible that there are no examples, and it is\r\npossible that all tests are examples. Vladimir wants to rename the files\r\nso that the examples are the first several tests, all all the next files\r\ncontain regular tests only.The only operation Vladimir can perform is\r\nthe \"\" command. Vladimir wants to write a script file, each of the lines\r\nin which is \"\", that means that the file \"\" is to be renamed to \"\". If\r\nthere is a file \"\" at the moment of this line being run, then this file\r\nis to be rewritten. After the line \"\" the file \"\" doesn’t exist, but\r\nthere is a file \"\" with content equal to the content of \"\" before the \"\"\r\ncommand.Help Vladimir to write the script file with the minimum possible\r\nnumber of lines so that after this script is run: all examples are the\r\nfirst several tests having filenames \"\", \"\", ..., \"\", where is the total\r\nnumber of examples; all other files contain regular tests with filenames\r\n\"\", \"\", ..., \"\", where is the total number of all tests.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n// pulkit kapoor\n#include <iostream>\n#include <sstream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <cctype>\n#include <string>\n#include <vector>\n#include <list>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <algorithm>\n#include <functional>\n#include <cassert>\nusing namespace std; \n#define DEBUG(numx) cout << '>' << #numx << ':' << numx << endl;\n#define REP(idx1,num1) for(int idx1=0;idx1<(num1);idx1++)\n#define FOR(idx1,num1,bin) for(int idx1=(num1);idx1<=(bin);idx1++)\n#define FORD(idx1,num1,bin) for(int idx1=(num1);idx1>=(bin);idx1--)\ninline bool EQ(double num1, double bin) { return fabs(num1-bin) < 1e-9; }\nconst int INF = 1<<29;\ntypedef long long ll;\ninline int two(int num1) { return 1 << num1; }\ninline int test(int num1, int bin) { return (num1>>bin)&1; }\ninline void set_bit(int & num1, int bin) { num1 |= two(bin); }\ninline void unset_bit(int & num1, int bin) { num1 &= ~two(bin); }\ninline int last_bit(int num1) { return num1 & (-num1); }\ninline int ones(int num1) { int res = 0; while(num1 && ++res) num1-=num1&(-num1); return res; }\ntemplate<class T> void chmax(T & num1, const T & bin) { num1 = max(num1, bin); }\ntemplate<class T> void chmin(T & num1, const T & bin) { num1 = min(num1, bin); }\n#define SZ(num1) (int)(num1.size())\n#define SET(num1,bin) memset(num1,bin,sizeof(num1))\n#define LET(numx,num1) __typeof(num1) numx(num1)\n#define TR(vecc,it) for( LET(it,vecc.begin()) ; it != vecc.end() ; it++)\n#define repi(idx1,num1) for(int idx1=0; idx1<(int)num1;idx1++)\n#define si(num1) scanf(\"%d\",&num1)\n#define sll(num1) scanf(\"%lld\",&num1)\n#define DRT()  int test; cin>>test; while(test--)\n#define io ios_base::sync_with_stdio(false);cin.tie(NULL);\n#define ll long long\n#define TRACE\n \n//FILE *fin = freopen(\"in\",\"cc\",stdin);\n//FILE *fout = freopen(\"out\",\"s2numx\",stdout);\n \n \n#ifdef TRACE\n#define trace1(numx)                cerr << #numx << \": \" << numx << endl;\n#define trace2(numx, to)             cerr << #numx << \": \" << numx << \" | \" << #to << \": \" << to << endl;\n#define trace3(numx, to, nn3)          cerr << #numx << \": \" << numx << \" | \" << #to << \": \" << to << \" | \" << #nn3 << \": \" << nn3 << endl;\n#define trace4(num1, bin, ch, d)       cerr << #num1 << \": \" << num1 << \" | \" << #bin << \": \" << bin << \" | \" << #ch << \": \" << ch << \" | \" << #d << \": \" << d << endl;\n#define trace5(num1, bin, ch, d, txx)    cerr << #num1 << \": \" << num1 << \" | \" << #bin << \": \" << bin << \" | \" << #ch << \": \" << ch << \" | \" << #d << \": \" << d << \" | \" << #txx << \": \" << txx << endl;\n#define trace6(num1, bin, ch, d, txx, det) cerr << #num1 << \": \" << num1 << \" | \" << #bin << \": \" << bin << \" | \" << #ch << \": \" << ch << \" | \" << #d << \": \" << d << \" | \" << #txx << \": \" << txx << \" | \" << #det << \": \" << det << endl;\n \n#else\n \n#define trace1(numx)\n#define trace2(numx, to)\n#define trace3(numx, to, nn3)\n#define trace4(num1, bin, ch, d)\n#define trace5(num1, bin, ch, d, txx)\n#define trace6(num1, bin, ch, d, txx, det)\n \n#endif\n #define ll long long\n#define pi(numx) printf(\"%d\\num1\",numx)\n#define ff first\n#define ss second\n#define mp make_pair\n#define pb push_back\n#define cp int testCases;cin >> testCases; for(int test = 1 ; test <= testCases; test++)\ntypedef pair<int,int> PII;\ntypedef pair<ll,ll> PLL;\ntypedef vector<int> VI;\ntypedef vector<PII> VPII;\n#define mdd 1000000007\n#define fast ios_base::sync_with_stdio(false); cin.tie(NULL);\n#define ll long long\nusing namespace std;\n \nint main() {\n\tint k;\n\tset<string> eights, nigs, ninr, einr, rigs,ins;\n\tmap<string, bool> mp1,txx, n;\n\tvector<string> vv1,vv2,ss;\n\tVI vectorInt;\n\tcin >> k;\n\tint ansS = 0;\n\tfor(int i=0; i<k; i++){\n\t\tstring s;\n\t\tint c;\n\t\tcin >> s >> c;\n\t\tss.pb(s);\n\t\tvectorInt.pb(c);\n\t\tif(c) ansS++;\n\t}\n\tfor(int i=1; i<=k; i++){\n\t\tif(i<=ansS) {\n\t\t\ttxx[to_string(i)] = true;\n\t\t\trigs.insert(to_string(i));\n\t\t}\n\t\telse {\n\t\t\tn[to_string(i)] = true;\n\t\t\tins.insert(to_string(i));\n\t\t}\n\t}\n\tfor(int i=0; i<k; i++){\n\t\tif(vectorInt[i] == 1){\n\t\t\tif(txx[ss[i]]){\n\t\t\t\trigs.erase(ss[i]);\n\t\t\t\tmp1[ss[i]] = true;\n\t\t\t}else if(n[ss[i]]){\n\t\t\t\tins.erase(ss[i]);\n\t\t\t\teights.insert(ss[i]);\n\t\t\t\tmp1[ss[i]] = true;\n\t\t\t}else{\n\t\t\t\teinr.insert(ss[i]);\n\t\t\t\tmp1[ss[i]] = true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(txx[ss[i]]){\n\t\t\t\trigs.erase(ss[i]);\n\t\t\t\tnigs.insert(ss[i]);\n\t\t\t\tmp1[ss[i]] = true;\n\t\t\t}else if(n[ss[i]]){\n\t\t\t\tins.erase(ss[i]);\n\t\t\t\tmp1[ss[i]] = true;\n\t\t\t}else{\n\t\t\t\tninr.insert(ss[i]);\n\t\t\t\tmp1[ss[i]] = true;\n\t\t\t}\n\t\t}\n\t}\n\twhile(ninr.size()>0 || nigs.size()>0 || einr.size() > 0 || eights.size() > 0){\n\t\tif(eights.size()>0 && rigs.size() > 0){\n\t\t\tstring qss = *eights.begin();\n\t\t\tstring wss = *rigs.begin();\n\t\t\tvv1.pb(qss);\n\t\t\tvv2.pb(wss);\n\t\t\tmp1[qss] = false;\n\t\t\tmp1[wss] = true;\n\t\t\teights.erase(qss);\n\t\t\trigs.erase(wss);\n\t\t\tins.insert(qss);\n\t\t\t\n\t\t}\n\t\telse if(nigs.size()>0 && ins.size() > 0){\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tstring qss = *nigs.begin();\n\t\t\tstring wss = *ins.begin();\n\t\t\tvv1.pb(qss);\n\t\t\tvv2.pb(wss);\n\t\t\tmp1[qss] = false;\n\t\t\tmp1[wss] = true;\n\t\t\tnigs.erase(qss);\n\t\t\tins.erase(wss);\n\t\t\trigs.insert(qss);\n\t\t}\n\t\telse if(ninr.size()>0 && ins.size() > 0){\n\t\t\tstring qss = *ninr.begin();\n\t\t\tstring wss = *ins.begin();\n\t\t\tvv1.pb(qss);\n\t\t\tvv2.pb(wss);\n\t\t\tmp1[qss] = false;\n\t\t\tmp1[wss] = true;\n\t\t\tninr.erase(qss);\n\t\t\tins.erase(wss);\t\n\t\t}\n\t\telse if(einr.size()>0 && rigs.size() > 0){\n\t\t\tstring qss = *einr.begin();\n\t\t\tstring wss = *rigs.begin();\n\t\t\tvv1.pb(qss);\n\t\t\tvv2.pb(wss);\n\t\t\tmp1[qss] = false;\n\t\t\tmp1[wss] = true;\n\t\t\teinr.erase(qss);\n\t\t\trigs.erase(wss);\n\t\t}\n\t\telse{\n\t\t\tstring wss = \"qweytr\";\n\t\t\tstring qss = *eights.begin();\n\t\t\tvv1.pb(qss);\n\t\t\tvv2.pb(wss);\n\t\t\tmp1[qss] = false;\n\t\t\tmp1[wss] = true;\n\t\t\teights.erase(qss);\n\t\t\teinr.insert(wss);\n\t\t\tins.insert(qss);\n\t\t}\n\t}\n\tcout << vv1.size() << endl;\n\tfor(int i=0; i<vv1.size(); i++){\n\t\tcout << \"move \" << vv1[i] << \" \" << vv2[i] << endl;\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Tests Renumeration.json",
    "editorial_link": "https://codeforces.com//blog/entry/54604",
    "editorial": null,
    "hint": []
}