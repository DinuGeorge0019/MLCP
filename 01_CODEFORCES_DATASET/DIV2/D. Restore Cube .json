{
    "link": "https://codeforces.com//contest/465/problem/D",
    "problemId": "13522",
    "problem_idx": "D",
    "shortId": "465D",
    "contest_number": "465",
    "problem_submissions": {
        "A": [
            7711802,
            7701020,
            7701162,
            7701215,
            7701067,
            7700923,
            7700938,
            7700998,
            7700973,
            7701012,
            7701685,
            7701159,
            7701027,
            7700987,
            7701142,
            7707761
        ],
        "B": [
            7710960,
            7702304,
            7704505,
            7702799,
            7702477,
            7701665,
            7702245,
            7703705,
            7702813,
            7701866,
            7704644,
            7703425,
            7704203,
            7702935,
            7704029,
            7708200
        ],
        "C": [
            7710335,
            7706333,
            7703312,
            7705351,
            7704980,
            7706564,
            7707092,
            7707812,
            7708661,
            7712440,
            7711616,
            7713184,
            7708012,
            7713150,
            7707559,
            7704663,
            7713529
        ],
        "D": [
            7709422,
            7712990,
            7717263,
            7711449,
            7714497,
            7710959,
            7711750,
            7710792,
            7709092,
            7709745,
            7709556,
            7712262,
            7717463,
            7717446,
            7710168,
            7710367
        ],
        "E": [
            7704010,
            7709717,
            7707403,
            7708373,
            7710918,
            7711818,
            9363741,
            7713618,
            7713248
        ]
    },
    "name": "D. Restore Cube ",
    "statement": "Peter had a cube with non-zero length of a side. He put the cube into\r\nthree-dimensional space in such a way that its vertices lay at integer\r\npoints (it is possible that the cube\u2019s sides are not parallel to the\r\ncoordinate axes). Then he took a piece of paper and wrote down eight\r\nlines, each containing three integers coordinates of cube\u2019s vertex (a\r\nsingle line contains coordinates of a single vertex, each vertex is\r\nwritten exactly once), put the paper on the table and left. While Peter\r\nwas away, his little brother Nick decided to play with the numbers on\r\nthe paper. In one operation Nick could swap some numbers (Nick didn\u2019t\r\nswap numbers from distinct lines). Nick could have performed any number\r\nof such operations.When Peter returned and found out about Nick\u2019s\r\nmischief, he started recollecting the original coordinates. Help Peter\r\nrestore the original position of the points or else state that this is\r\nimpossible and the numbers were initially recorded incorrectly.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <iostream>\n\n#define REP(i, a, b) for (int i = (a), _end_ = (b); i != _end_; ++i)\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define mp make_pair\n#define x first\n#define y second\n\nusing namespace std;\n\ntypedef long long LL;\n\nint a[8][3], b[8][3], c[8][3];\nint pos[8][3];\n\nbool ans = 0;\n\ntemplate <typename T> inline T sqr(const T &x) { return x * x; }\n\ninline LL dis(const int &x)\n{\n\tLL ret = 0;\n\tREP(i, 0, 3) ret += sqr((LL)c[x][i]);\n\treturn ret;\n}\n\nLL d[8];\n\ninline bool cmp(const int &x, const int &y)\n{\n\treturn d[x] < d[y];\n}\n\ninline LL cross(const int &x, const int &y)\n{\n\tLL ret = 0;\n\tREP(i, 0, 3) ret += (LL)c[x][i] * c[y][i];\n\treturn ret;\n}\n\ninline bool work()\n{\n\tint pos[7];\n\tmemcpy(c, a, sizeof c);\t\n\tREP(i, 1, 8)\n\t{\n\t\tREP(j, 0, 3) c[i][j] -= c[0][j];\n\t\td[i] = dis(i);\n\t}\n\tREP(i, 0, 7) pos[i] = i + 1;\n\tsort(pos, pos + 7, cmp);\n\tif (!d[pos[0]]) return 0;\n\tif (d[pos[0]] != d[pos[1]] || d[pos[1]] != d[pos[2]]) return 0;\n\tREP(i, 1, 3)\n\t\tREP(j, 0, i)\n\t\t\tif (cross(pos[i], pos[j])) return 0;\n\tbool appear[8];\n\tmemset(appear, 0, sizeof appear);\n\tappear[0] = appear[1] = appear[2] = appear[4] = 1;\n\tREP(i, 3, 7)\n\t{\n\t\tint tmp = 0;\n\t\tREP(j, 0, 3)\n\t\t{\n\t\t\tLL tmp0 = cross(pos[i], pos[j]);\n\t\t\ttmp0 = abs(tmp0);\n\t\t\tif (tmp0 && tmp0 != d[pos[0]]) return 0;\n\t\t\tif (tmp0) tmp |= 1 << j;\n\t\t}\n\t\tif (appear[tmp]) return 0;\n\t\tappear[tmp] = 1;\n\t}\n\treturn 1;\n}\n\nvoid dfs(const int &x)\n{\n\tif (x == 8)\n\t{\n\t\tif (work()) ans = 1;\n\t\treturn;\n\t}\n\tREP(i, 0, 6)\n\t{\n\t\tREP(j, 0, 3) a[x][j] = b[x][pos[x][j]];\n\t\tdfs(x + 1);\n\t\tif (ans == 1) return;\n\t\tnext_permutation(pos[x], pos[x] + 3);\n\t}\n}\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"input.txt\", \"r\", stdin);\n\tfreopen(\"output.txt\", \"w\", stdout);\n#endif\n\tREP(i, 0, 8)\n\t\tREP(j, 0, 3)\n\t\t\tscanf(\"%d\", &b[i][j]), pos[i][j] = j;\n\tmemcpy(a[0], b[0], sizeof a[0]);\n\tdfs(1);\n\tif (ans == 1)\n\t{\n\t\tprintf(\"YES\\n\");\n\t\tREP(i, 0, 8)\n\t\t{\n\t\t\tREP(j, 0, 3)\n\t\t\t\tprintf(\"%d \", b[i][pos[i][j]]);\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\telse printf(\"NO\\n\");\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Restore Cube .json",
    "editorial_link": "https://codeforces.com//blog/entry/13694",
    "editorial": "There are several ways to solve this problem. We'll describe the most straightforward one: we can generate all possible permutations of coordinates of every point and for every combination check whether given point configuration form a cube. However, number of configurations can go up to (3!)8?>?106, so checking should work quite fast.\n\nOne way to check if the points form a cube is such: find minimal distance between all pairs of points, it should be equal to the side length l. Every vertex should have exactly three other points at distance l, and all three edges should be pairwise perpendicular. If these condition are met at every point, then configuration is a cube as there is no way to construct another configuration with these properties. This procedure performs roughly 82 operations for every check, which is fast enough. There are even more efficient ways of cube checking exploiting various properties of cube.\n\nThere are various optimizations to ensure you fit into time limit. For instance, applying the same permutation to coordinates of all points keeps every property of the cube, therefore we can fix order of coordinates for one point and permute all other. This single trick speeds up the algorithm 6 times, which allows some less efficient programs to be accepted."
}