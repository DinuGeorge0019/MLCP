{
    "link": "https://codeforces.com//contest/22/problem/B",
    "problemId": "100",
    "problem_idx": "B",
    "shortId": "22B",
    "contest_number": "22",
    "problem_submissions": {
        "E": [
            95075,
            339772
        ],
        "D": [
            94674,
            94317,
            94288,
            94253,
            94410,
            94089,
            94399,
            94885,
            94131,
            94729,
            94450,
            93950,
            94649
        ],
        "C": [
            94316,
            94019,
            94074,
            94097,
            94060,
            94297,
            94096,
            94518,
            94472,
            94134,
            94320,
            94611,
            94048
        ],
        "B": [
            93968,
            93767,
            93718,
            93851,
            93760,
            93791,
            93790,
            93866,
            93966,
            93778,
            94454,
            94133,
            94258,
            93853
        ],
        "A": [
            93542,
            93511,
            93475,
            93559,
            93491,
            93518,
            93660,
            93794,
            93555,
            93524,
            93810,
            93535,
            93618
        ]
    },
    "name": "B. Bargaining Table",
    "statement": "Bob wants to put a new bargaining table in his office. To do so he\r\nmeasured the office room thoroughly and drew its plan: Bob\u2019s office room\r\nis a rectangular room meters. Each square meter of the room is either\r\noccupied by some furniture, or free. A bargaining table is rectangular,\r\nand should be placed so, that its sides are parallel to the office\r\nwalls. Bob doesn\u2019t want to change or rearrange anything, that\u2019s why all\r\nthe squares that will be occupied by the table should be initially free.\r\nBob wants the new table to sit as many people as possible, thus its\r\nperimeter should be maximal. Help Bob find out the maximum possible\r\nperimeter of a bargaining table for his office.\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n\nint main(){\n   \n    int n,m;\n    cin>>n>>m;\n    int a[50][50];\n    int b[50][50];\n    char ch;\n    for(int i=0; i<n; i++){\n        for(int j=0; j<m; j++){\n            cin>>ch;\n            a[i][j]=ch-'0';\n            b[i][j]=a[i][j];\n        }\n    }\n    for(int i=1; i<m; i++){\n        b[0][i]+=b[0][i-1];\n    }\n    for(int i=1; i<n; i++){\n        b[i][0]+=b[i-1][0];\n    }\n    for(int i=1; i<n; i++){\n        for(int j=1; j<m; j++){\n            b[i][j]+=b[i-1][j]+b[i][j-1]-b[i-1][j-1];\n        }\n    }\n    int mx=0;\n    for(int i=0; i<n; i++){\n        for(int j=0; j<m; j++){\n            for(int x=i; x<n; x++){\n                for(int y=j; y<m; y++){\n                    int t=b[x][y];\n                    if(i-1>=0){\n                        t-=b[i-1][y];\n                    }\n                    if(j-1>=0){\n                        t-=b[x][j-1];\n                    }\n                    if(i-1>=0 && j-1>=0){\n                        t+=b[i-1][j-1];\n                    }\n                    if(t==0){\n                        mx=max(mx,2*(x-i+1+y-j+1));\n                    }\n                }\n            }\n        }\n    }\n    cout<<mx;\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Bargaining Table.json",
    "editorial_link": "https://codeforces.com//blog/entry/507",
    "editorial": "In this problem one should find the maximal perimeter of a rectangle that contains no '1'. Define these rectangles \"correct\". To solve a problem you are to check each possible rectangle for correctness and calculate its perimeter. The easiest way to check all rectangles is using 6 nested cycles. Using 4 of them you fix the coordinates while other 2 will look for '1'. So the complexity is O((n*m)3). It seems slow, but those, who wrote such a solution, says that it hasn't any problems with TL.\n\nOne may interest in much faster solution. Using simple DP solution one can get a solution with an O((n*m)2) complexity. It's clear, that rectangle with coordinates (x1, y1, x2, y2) is correct if and only if rectangles (x1, y1, x2-1, y2) and (x1, y1, x2, y2-1) are correct, and board[x2][y2] = '0'. So each of rectangles can be checked in O(1) and totally there will be O((n*m)2) operations."
}