{
    "link": "https://codeforces.com//contest/931/problem/F",
    "problemId": "162268",
    "problem_idx": "F",
    "shortId": "931F",
    "contest_number": "931",
    "problem_submissions": {
        "F": [
            35940104,
            35941465,
            35943287,
            35941080,
            35942331,
            35943653,
            35947276,
            35943719,
            35948347,
            35944673,
            35940779,
            35944545,
            35939029,
            35944604,
            35941239,
            35940667,
            35943276,
            35942053,
            35941638
        ],
        "E": [
            35935873,
            35937949,
            35939388,
            35938861,
            35938615,
            35938585,
            35938306,
            35937388,
            35944915,
            35945452,
            35936046,
            35942168,
            35938423,
            35939249,
            35936882,
            35938436
        ],
        "C": [
            35932593,
            35935542,
            35932202,
            35935230,
            35934264,
            35936847,
            35933533,
            35934506,
            35935861,
            35934976,
            35935354,
            35943273,
            35946878,
            35947399,
            35947162
        ],
        "D": [
            35930635,
            35933077,
            35934832,
            35933775,
            35935452,
            35929853,
            35935211,
            35931557,
            35934131,
            35930406,
            35933242,
            35937131,
            35943429,
            35935627,
            35932316,
            35932452
        ],
        "B": [
            35929535,
            35929870,
            35928517,
            35928303,
            35929389,
            35931362,
            35930323,
            35930011,
            35929776,
            35928105,
            35928031,
            35931499,
            35930328,
            35928842,
            35930448,
            35928972
        ],
        "A": [
            35926848,
            35929929,
            35926934,
            35926799,
            35927905,
            35929233,
            35927305,
            35927514,
            35926795,
            35926930,
            35926789,
            35928102,
            35927117,
            35926792,
            35928368,
            35926987
        ]
    },
    "name": "F. Teodor is not a liar ",
    "statement": "Young Teodor enjoys drawing. His favourite hobby is drawing segments\r\nwith integer borders inside his huge segment. One day Teodor noticed\r\nthat picture he just drawn has one interesting feature: there doesn’t\r\nexist an integer point, that belongs each of segments in the picture.\r\nHaving discovered this fact, Teodor decided to share it with Sasha.Sasha\r\nknows that Teodor likes to show off so he never trusts him. Teodor wants\r\nto prove that he can be trusted sometimes, so he decided to convince\r\nSasha that there is no such integer point in his picture, which belongs\r\nto each segment. However Teodor is lazy person and neither wills to tell\r\nSasha all coordinates of segments’ ends nor wills to tell him their\r\namount, so he suggested Sasha to ask him series of questions ’Given the\r\ninteger point , how many segments in Fedya’s picture contain that\r\npoint?’, promising to tell correct answers for this questions.Both boys\r\nare very busy studying and don’t have much time, so they ask you to find\r\nout how many questions can Sasha ask Teodor, that having only answers on\r\nhis questions, Sasha can’t be sure that Teodor isn’t lying to him. Note\r\nthat Sasha doesn’t know amount of segments in Teodor’s picture. Sure,\r\nSasha is smart person and never asks about same point twice.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tint n, m;\n\tcin >> n >> m;\n\tpriority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;\n\tfor(int i = 0; i < n; ++i) {\n\t\tint x,y;\n\t\tcin >> x >> y;\n\t\t--x;\n\t\tpq.push({x,1});\n\t\tpq.push({y,-1});\n\t}\n\tint ans[m];\n\tint it = 0;\n\tfor(int i = 0; i < m; ++i) {\n\t\twhile(pq.size() && pq.top().first == i) {\n\t\t\tit += pq.top().second;\n\t\t\tpq.pop();\n\t\t}\n\t\tans[i] = it;\n\t}\n\tint inc[m],dec[m];\n\tvector<int> V;\n\tfor(int i = 0; i < m; ++i) {\n\t\tint x = ans[i];\n\t\tint j = upper_bound(V.begin(), V.end(), x) - V.begin();\n\t\tif(j < V.size()) {\n\t\t\tV[j] = x;\n\t\t}\n\t\telse V.push_back(x);\n\t\tinc[i] = j + 1;\n\t}\n\n\tV.clear();\n\tfor(int i = m-1; i >= 0; --i) {\n\t\tint x = ans[i];\n\t\tint j = upper_bound(V.begin(), V.end(), x) - V.begin();\n\t\tif(j < V.size()) {\n\t\t\tV[j] = x;\n\t\t}\n\t\telse V.push_back(x);\n\t\tdec[i] = j + 1;\n\t}\n\tint pinc[m], pdec[m];\n\tfor(int i = 0; i < m; ++i) {\n\t\tif(i) pinc[i] = max(inc[i], pinc[i-1]);\n\t\telse pinc[i] = inc[i];\n\t}\n\n\tfor(int i = m-1; i >= 0; --i) {\n\t\tif(i != m -1) pdec[i] = max(dec[i], pdec[i+1]);\n\t\telse pdec[i] = dec[i];\n\t}\n\t// for(int i = 0; i < m; ++i) {\n\t// \tcout << pinc[i] << ' ' ;\n\t// }\n\t// cout << endl;\n\t// \tfor(int i = 0; i < m; ++i) {\n\t// \tcout << pdec[i] << ' ' ;\n\t// }\n\t// cout << endl;\n\n\tint res = 0;\n\tfor(int i = 0; i < m-1; ++i) {\n\t\tres = max(res, pinc[i] + pdec[i+1]);\n\t}\n\tcout << res << endl;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Teodor is not a liar .json",
    "editorial_link": "https://codeforces.com//blog/entry/58177",
    "editorial": "Idea. The main idea is that set of point xi is bad(meaning that Sasha can't be sure, that Teodor hasn't lied, relying only on this information)  satisfies the following property: .\n\nSolution. Firstly let's calculate cnt(xi) for each integer point in [1;m]. One way to do this is scanning line, which asymptotics is O(m?+?n). Other approach uses segment tree supporting segment addition queries. In this case asymptotics is O(n·log(m)) .\n\nNow we only need to find longest sequence satisfying this property. Let's consider all possible xi in previous inequation(element that has peak cnt(xi)). Now the answer is length of longest nondecreasing sequence ending in xi?+? length of longest nonincreasing sequence, starting in xi?-?1. Both lengths can be found in O(1) if one precalculates this lengths for each 1???i???m, using dynamic programming. Note that you should use O(m·log(m)) algorithm for calculating this dp, not O(m2), otherwise you will end up with TL verdict.\n\nTotal asymptotics of this solution is O(m·log(m)) for solution using scanning line or O((n?+?m)·log(m)) for solution using segment tree.",
    "hint": []
}