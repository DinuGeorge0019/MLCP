{
    "link": "https://codeforces.com//contest/431/problem/E",
    "problemId": "9656",
    "problem_idx": "E",
    "shortId": "431E",
    "contest_number": "431",
    "problem_submissions": {
        "D": [
            6672598,
            6676181,
            6673450,
            6673470,
            6674088,
            6674095,
            6674295,
            6674808,
            6675923,
            6675071,
            6674830,
            6674866,
            6674901,
            6674478,
            6674991,
            6674414
        ],
        "E": [
            6671267,
            6673725,
            6713420,
            6713416,
            6713362,
            6676446,
            6676376,
            6675447,
            6675215
        ],
        "C": [
            6671164,
            6669924,
            6671428,
            6670548,
            6670647,
            6671004,
            6671098,
            6672117,
            6672492,
            6671804,
            6670661,
            6670538,
            6670152,
            6671790,
            6670929,
            6672251,
            6671397,
            6672712
        ],
        "B": [
            6669392,
            6669162,
            6669814,
            6669821,
            6669379,
            6669661,
            6669742,
            6670279,
            6669311,
            6670384,
            6669700,
            6669887,
            6671526,
            6670362,
            6670035,
            6670413,
            6670132,
            6671672
        ],
        "A": [
            6668772,
            6668067,
            6668159,
            6668040,
            6668001,
            6668140,
            6668106,
            6668437,
            6668090,
            6669605,
            6668154,
            6669148,
            6670613,
            6668347,
            6668448,
            6668920,
            6668602,
            6670229
        ]
    },
    "name": "E. Chemistry Experiment",
    "statement": "One day two students, Grisha and Diana, found themselves in the\r\nuniversity chemistry lab. In the lab the students found test tubes with\r\nmercury numbered from to and decided to conduct an experiment.The\r\nexperiment consists of steps. On each step, one of the following actions\r\noccurs: Diana pours all the contents from tube number and then pours\r\nthere exactly liters of mercury. Let’s consider all the ways to add\r\nliters of water into the tubes; for each way let’s count the volume\r\n(water and mercury) in the tube with maximum amount of liquid; finally\r\nlet’s find the minimum among counted maximums. That is the number the\r\nstudents want to count. At that, the students don’t actually pour the\r\nmercury. They perform calculations without changing the contents of the\r\ntubes. Unfortunately, the calculations proved to be too complex and the\r\nstudents asked you to help them. Help them conduct the described\r\nexperiment.\r\n",
    "solutions": [
        "#include<cstring>\n#include<cstdlib>\n#include<algorithm>\n#include<cstdio>\n#include<iostream>\n#include<vector>\n#include<set>\n#include<map>\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\nstruct node{int ch[2],v,fix,sz;ll su;}t[1000005];int ndtot=0;\nvoid pu(int x){\n    t[x].su=t[t[x].ch[0]].su+t[t[x].ch[1]].su+t[x].v;\n    t[x].sz=t[t[x].ch[0]].sz+t[t[x].ch[1]].sz+1;\n}\nint root=0;\nvoid rot(int &x,int f){\n    int y=t[x].ch[!f];\n    t[x].ch[!f]=t[y].ch[f];\n    t[y].ch[f]=x;\n    pu(x);pu(y);\n    x=y;\n}\nvoid ins(int &x,int v){\n    if(x==0){\n        x=++ndtot;\n        t[x].ch[0]=t[x].ch[1]=0;\n        t[x].sz=1;\n        t[x].fix=rand();\n        t[x].v=t[x].su=v;\n    }else{\n        int f=v>=t[x].v;\n        ins(t[x].ch[f],v);\n        pu(x);\n        if(t[t[x].ch[f]].fix<t[x].fix)rot(x,!f);\n    }\n}\nvoid del(int &x){\n    if(!t[x].ch[0] && !t[x].ch[1])x=0;\n    else{\n        int f=!t[x].ch[0] || t[x].ch[1]&&t[t[x].ch[1]].fix<t[t[x].ch[0]].fix;\n        rot(x,!f);\n        del(t[x].ch[!f]);\n        pu(x);\n    }\n}\nvoid del_num(int &x,int v){\n    if(t[x].v==v)del(x);\n    else{\n        int f=v>=t[x].v;\n        del_num(t[x].ch[f],v);\n        pu(x);\n    }\n}\nint n;\nint cur[100005];\ndb queryans(db v){\n    int p=root,q;\n    ll presum=0;int presz=0;\n    while(p){\n        ll su=presum+t[t[p].ch[0]].su+t[p].v;\n        int sz=presz+t[t[p].ch[0]].sz+1;\n        if(v>=1ll*t[p].v*sz-su){\n            presum=su;\n            presz=sz;\n            p=t[p].ch[1];\n        }else p=t[p].ch[0];\n    }\n    return 1.0*(presum+v)/presz;\n}\nint main()\n{\n    t[0]=(node){{0,0},0,0,0,0};\n    int que;\n    scanf(\"%d%d\",&n,&que);\n    for (int i=1;i<=n;i++)scanf(\"%d\",&cur[i]);\n    for (int i=1;i<=n;i++)ins(root,cur[i]);\n    while(que--){\n        int opt;scanf(\"%d\",&opt);\n        if(opt==1){\n            int x,y;scanf(\"%d%d\",&x,&y);\n            del_num(root,cur[x]);\n            ins(root,cur[x]=y);\n        }else{\n            ll v;scanf(\"%I64d\",&v);\n            printf(\"%.5lf\\n\",queryans(v));\n        }\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "ternary search"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Chemistry Experiment.json",
    "editorial_link": "https://codeforces.com//blog/entry/12369",
    "editorial": "First of all letâs understand the statement. We have tubes. At the\r\nbeginning of each of them there are a few amount of mercury is poured.\r\nWe want be able to perform two types of queries: Well, actually now turn\r\nto the solution. Use binary search to find an answer, in particular,\r\nwill sort out the amount of mercury in a tubes(let it equals to ), such\r\nthat in the tubes with smaller volume of the liquid can be poured all\r\nliters of water and the maximum liquid level does not exceed . Let the\r\nnumber of tubes, with the amount of mercury less than is equal . Now the\r\nproblem is reduced to learning how to count the total amount of water\r\nthat we can to pour into each of least tubes, such that the level of the\r\nliquid in each of them is equal . Let the total amount of mercury in the\r\ntubes which exactly have liters mercury and number of tubes which the\r\nvolume of mercury is equal . Then and the total maximum amount of the\r\nwater which can be poured. If < , then obviously this space is not\r\nenough for pour all the water, otherwise quite enough and so the answer\r\nwill be no more than . When we found the smallest , we can say that the\r\nanswer is equal ( ) / . To quickly find for and , and perform queries of\r\nthe first type, you can use the Fenwick tree. : : 6676668\r\n",
    "hint": []
}