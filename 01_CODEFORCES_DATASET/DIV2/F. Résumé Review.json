{
    "link": "https://codeforces.com//contest/1345/problem/F",
    "problemId": "600712",
    "problem_idx": "F",
    "shortId": "1345F",
    "contest_number": "1345",
    "problem_submissions": {
        "E": [
            79194179,
            79196032,
            79220297,
            79200684,
            79201329,
            79219340,
            79391989,
            79268362,
            79267373,
            79247234,
            79230319,
            79193699
        ],
        "D": [
            79182685,
            79185329,
            79189475,
            79188511,
            79179864,
            79171870,
            79173915,
            79165263,
            79173257,
            79175980,
            79176898,
            79242598,
            79180486,
            79183462,
            79179438,
            79180644,
            79181066,
            79182336
        ],
        "C": [
            79166678,
            79171676,
            79174223,
            79183005,
            79155393,
            79157900,
            79170332,
            79162910,
            79161162,
            79163028,
            79162951,
            79164149,
            79160726,
            79164483,
            79165533,
            79167519,
            79166191
        ],
        "B": [
            79161444,
            79162895,
            79158056,
            79159769,
            79152511,
            79154234,
            79151562,
            79156943,
            79155510,
            79156024,
            79158727,
            79152661,
            79151997,
            79158730,
            79160284,
            79158238,
            79157754
        ],
        "A": [
            79149423,
            79162373,
            79160953,
            79149853,
            79149101,
            79148773,
            79149875,
            79150362,
            79149364,
            79149646,
            79148884,
            79148772,
            79158375,
            79151373,
            79149772,
            79149372
        ],
        "F": [
            79200676,
            79276017
        ]
    },
    "name": "F. Résumé Review",
    "statement": "You have completed many programming projects. In fact, there are exactly\r\nn types of programming projects, and you have completed a_i projects of\r\ntype i. Your r sum has limited space, but you want to carefully choose\r\nthem in such a way that maximizes your chances of getting hired.You want\r\nto include several projects of the same type to emphasize your\r\nexpertise, but you also don’t want to include so many that the\r\nlow-quality projects start slipping in. Specifically, you determine the\r\nfollowing quantity to be a good indicator of your chances of getting\r\nhired: f(b_1,\r\nldots,b_n)=\r\nsum\r\nlimits_{i=1}^n b_i(a_i-b_i^2). Here, b_i denotes the number of projects\r\nof type i you include in your r sum . Of course, you cannot include more\r\nprojects than you have completed, so you require 0\r\nle b_i\r\nle a_i for all i.Your r sum only has enough room for k projects, and you\r\nwill absolutely not be hired if your r sum has empty space, so you\r\nrequire\r\nsum\r\nlimits_{i=1}^n b_i=k.Find values for b_1,\r\nldots, b_n that maximize the value of f(b_1,\r\nldots,b_n) while satisfying the above two constraints.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define ll long long\n#define ull unsigned long long\n#define ff(i, a, b) for(int i = (a); (i <= (b)); ++i)\n#define FF(i, a, b) for(int i = (a); (i >= (b)); --i)\n#define sz(a) (int) a.size()\n#define fi first\n#define se second\n#define all(s) s.begin(), s.end()\n#define vi vector<int>\n#define pb push_back\n#define ii pair<int, int>\n#define lwb lower_bound\n#define upb upper_bound\n\nint a[100005];\n\nii cal(int x, ll mx) {\n  int l = 0, r = x - 1, t = 0;\n  while (l <= r) {\n    int m = (l + r) / 2;\n    if (x - 3ll * m * (m + 1) - 1 == mx) t = 1;\n    if (x - 3ll * m * (m + 1) - 1 >= mx) l = m + 1;\n    else r = m - 1;\n  }\n  return {l - t, l};\n}\n\nint main() {\n  ios::sync_with_stdio(0); cin.tie(0);\n\n  int n;\n  ll ans = 0, k;\n  cin >> n >> k;\n  ff(i, 0, n - 1) cin >> a[i];\n  ll L = -4e18, R = 4e18;\n  while (L <= R) {\n    ll M = (L + R) / 2, x = 0, y = 0;\n    ff(i, 0, n - 1) {\n      ii tmp = cal(a[i], M);\n      x += tmp.fi, y += tmp.se;\n    }\n    if (x > k) L = M + 1;\n    else if (y < k) R = M - 1;\n    else {\n      ll val = k - x;\n      ff(i, 0, n - 1) {\n        ii tmp = cal(a[i], M);\n        if (tmp.fi < tmp.se && val > 0) {\n          cout << tmp.se << ' '; val--;\n        }\n        else cout << tmp.fi << ' ';\n      }\n      return 0;\n    }\n  }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Résumé Review.json",
    "editorial_link": "https://codeforces.com//blog/entry/76819",
    "editorial": "If we increment some to , the value of changes by which decreases for If\r\nwe initially set all to , then greedily incrementing the best index\r\ngives an optimal solution. Since is large, we cannot afford to do this\r\none increment at a time. However, we can observe that this process\r\nincrements the values as long as for some constant . Simply binary\r\nsearch on the value of so that we increment exactly times.To compute the\r\ncutoffs for the values, we can either use the quadratic formula or do\r\nanother binary search.There may be ties for the values, but this can be\r\nhandled without too much trouble.Let . Complexity is with the quadratic\r\nformula, or with another binary search.\r\n",
    "hint": []
}