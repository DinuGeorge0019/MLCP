{
    "link": "https://codeforces.com//contest/2031/problem/D",
    "problemId": "3027239",
    "problem_idx": "D",
    "shortId": "2031D",
    "contest_number": "2031",
    "problem_submissions": {
        "C": [
            291615019,
            291592980,
            291598103,
            291592617,
            291601230,
            291594950,
            291596641,
            291598534,
            291598910,
            291597697,
            291596223,
            291592587,
            291599058,
            291603323,
            291602165,
            291609856,
            291600956,
            291601564,
            291598721,
            291601153
        ],
        "D": [
            291602113,
            291609031,
            291609392,
            291605650,
            291611553,
            291605807,
            291612841,
            291607554,
            291614197,
            291610351,
            291605780,
            291607652,
            291614506,
            291615932,
            291614172,
            291618154,
            291620240,
            291618088,
            291615701,
            291630608
        ],
        "E": [
            291599657,
            291623637,
            291622329,
            291627631,
            291620639,
            291620840,
            291625147,
            291625195,
            291625152,
            291625051,
            291667607,
            291632299,
            291624695,
            291626446,
            291625617,
            291626579,
            291626557,
            291630022,
            291630615,
            291634752,
            291621869
        ],
        "B": [
            291587323,
            291583487,
            291585012,
            291579964,
            291587433,
            291597180,
            291587403,
            291588846,
            291583266,
            291585887,
            291584391,
            291583688,
            291590002,
            291589009,
            291588475,
            291585693,
            291585389,
            291589773,
            291580876,
            291584490
        ],
        "A": [
            291582945,
            291577851,
            291577771,
            291577094,
            291581134,
            291579202,
            291579167,
            291588540,
            291578293,
            291580690,
            291578230,
            291580416,
            291578795,
            291578495,
            291588315,
            291578514,
            291578370,
            291580482,
            291577265,
            291581164
        ],
        "F": [
            291668053
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/136260",
    "editorial": "SolutionFirst, observe that a rabbit at tree can reach the highest tree;\r\nif the tree has index , then the rabbit can jump from tree to . Let\r\ndenote the tallest height reachable from tree , then .We iteratively\r\nlook at trees to . Suppose we have found the tallest height reachable\r\nfrom tree . Note that from tree we can reach the tallest tree with index\r\nbetween and , and from tree we can reach the shortest tree with index\r\nbetween and . Let and . Then if then tree is reachable from tree by the\r\nsequence . Thus, any tree reachable from tree is reachable from tree ,\r\nand vice versa; thus, On the other hand, if , then for any and , we have\r\nand . Thus, no tree between index and inclusive is reachable from any\r\ntree from and inclusive. Similar to the first paragraph, we have .Time\r\ncomplexity: Implementation: (by ACGN) 291677082\r\n",
    "name": "D. Penchick and Desert Rabbit",
    "statement": "Dedicated to pushing himself to his limits, Penchick challenged himself\r\nto survive the midday sun in the Arabian Desert!While trekking along a\r\nlinear oasis, Penchick spots a desert rabbit preparing to jump along a\r\nline of palm trees. There are n trees, each with a height denoted by\r\na_i.The rabbit can jump from the i-th tree to the j-th tree if exactly\r\none of the following conditions is true: j < i and a_j > a_i: the rabbit\r\ncan jump backward to a taller tree. j > i and a_j < a_i: the rabbit can\r\njump forward to a shorter tree. For each i from 1 to n, determine the\r\nmaximum height among all trees that the rabbit can reach if it starts\r\nfrom the i-th tree.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>//#pragma GCC optimize(\"Ofast,no-stack-protector,unroll-loops,fast-math\")//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,tune=native\")#define ll long long#define ull unsigned long long#define lll __int128#define pc __builtin_popcount#define pr pair<int,int>#define pb push_back#define mp make_pair#define x first#define y second#define lb(x) x&-xusing namespace std;mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());ll rint(ll l,ll r){return uniform_int_distribution<ll>(l,r)(rnd);}const int maxn=5e5+5;int T,n,a[maxn],ans[maxn];int t[maxn];void in(int x,int k){\twhile(x<=n) t[x]=max(t[x],k),x+=lb(x);}int find(int x){\tint rt=0;\twhile(x) rt=max(t[x],rt),x-=lb(x);\treturn rt;}int main(){    scanf(\"%d\",&T);    while(T--)    {        scanf(\"%d\",&n);        memset(t,0,(n+1)<<2);        for(int i=1;i<=n;i++)        {            scanf(\"%d\",&a[i]);            ans[i]=max(ans[i-1],a[i]);        }        for(int i=n;i;i--)        {            ans[i]=max(ans[i],find(ans[i]-1));            in(a[i],ans[i]);        }        for(int i=1;i<=n;i++) printf(\"%d \",ans[i]);        putchar('\\n');    }    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "data structures",
        "dfs and similar",
        "dp",
        "dsu",
        "greedy",
        "implementation",
        "two pointers"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Penchick and Desert Rabbit.json"
}