{
    "link": "https://codeforces.com//contest/1447/problem/F2",
    "problemId": "797268",
    "problem_idx": "F2",
    "shortId": "1447F2",
    "contest_number": "1447",
    "problem_submissions": {
        "F1": [
            98482074,
            98493054,
            99700638,
            99700288,
            98507770,
            98535197
        ],
        "E": [
            98471672,
            98487762,
            98462641,
            98467656,
            98474856,
            98475468,
            98466748,
            98471089,
            98474335,
            98473016,
            98472819,
            98475501,
            98476100,
            98473152,
            98480927,
            98480063,
            98483273,
            98472232,
            98484816
        ],
        "D": [
            98465943,
            98460161,
            98460032,
            98460272,
            98457345,
            98456392,
            98459724,
            98462491,
            98458555,
            98456607,
            98463156,
            98464783,
            98463338,
            98468636,
            98460203,
            98469147,
            98464911,
            98463572,
            98466107
        ],
        "C": [
            98461616,
            98454149,
            98456198,
            98455102,
            98451609,
            98450909,
            98449636,
            98454179,
            98454951,
            98450139,
            98456033,
            98456615,
            98452367,
            98462699,
            98462915,
            98451741,
            98459164,
            98457799,
            98456088
        ],
        "B": [
            98459424,
            98448840,
            98451090,
            98683205,
            98449593,
            98453136,
            98446655,
            98474948,
            98449629,
            98450999,
            98461566,
            98449722,
            98448167,
            106347351,
            98672986,
            98448001,
            98455222,
            98451056,
            98457032,
            98449675,
            98477349,
            98451673
        ],
        "A": [
            98453484,
            98445641,
            98444797,
            98683165,
            98445393,
            98446357,
            98444563,
            98446885,
            98447224,
            98445951,
            98458580,
            98444650,
            98444710,
            135934878,
            135934648,
            135925416,
            135925369,
            135925314,
            135925279,
            135925096,
            135925047,
            135924862,
            135924832,
            135924797,
            135924764,
            135924707,
            135924661,
            135924602,
            135924566,
            135924526,
            135924432,
            135924298,
            135924179,
            106344775,
            98672850,
            98445798,
            98445995,
            98446080,
            98454545,
            98452405,
            98445713,
            98447399
        ],
        "F2": [
            100134501,
            99704090
        ]
    },
    "name": "F2. Frequency Problem  Hard Version ",
    "statement": "You are given an array [a_1, a_2,\r\ndots, a_n]. Your goal is to find the length of the longest subarray of\r\nthis array such that the most frequent value in it is unique. In other\r\nwords, you are looking for a subarray such that if the most frequent\r\nvalue occurs f times in this subarray, then at least 2 different values\r\nshould occur exactly f times.An array c is a subarray of an array d if c\r\ncan be obtained from d by deletion of several (possibly, zero or all)\r\nelements from the beginning and several (possibly, zero or all) elements\r\nfrom the end.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxN = 200010;\nint n;\nint cnt[maxN];\nint a[maxN];\nint max_num, num[maxN];\nint most_frequent = 1;\nint ans = 0;\nint limit;\n\nbool not_unique()\n{\n    int num = 0;\n    for (int i = 1; i <= n; i++)\n        if (cnt[i] == cnt[most_frequent])\n            num++;\n    return num >= 2;\n}\n\nint first_pos[maxN*2];\n\nint fun(int x)\n{\n    int res = 0;\n    for (int i = 0; i < maxN*2; i++) first_pos[i] = INT_MAX;\n    first_pos[maxN] = 0;\n    int sum = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        if (a[i] == most_frequent) sum++;\n        if (a[i] == x) sum--;\n        if (first_pos[sum + maxN] != INT_MAX)\n            res = max(res, i - first_pos[sum + maxN]);\n        else\n            first_pos[sum + maxN] = i;\n    }\n    return res;\n}\n\nint main()\n{\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++)\n    {\n        scanf(\"%d\", &a[i]);\n        cnt[a[i]]++;\n        if (cnt[a[i]] > cnt[most_frequent]) most_frequent = a[i];\n    }\n    if (not_unique())\n    {\n        printf(\"%d\\n\", n);\n        return 0;\n    }\n    limit = min((int) sqrt(n), cnt[most_frequent]);\n\n    for (int i = 1; i <= n; i++)\n        if (cnt[i] >= limit && i != most_frequent)\n            ans = max(ans, fun(i));\n\n    for (int i = 1; i < limit; i++)\n    {\n        max_num = 0;\n        for (int j = 1; j <= n; j++) num[j] = 0;\n        num[a[1]]++;\n        if (num[a[1]] == i) max_num++;\n        int r = 1;\n        for (int l = 1; l <= n; l++)\n        {\n            while (r + 1 <= n && num[a[r+1]] + 1 <= i)\n            {\n                num[a[r+1]]++;\n                if (num[a[r+1]] == i) max_num++;\n                r++;\n            }\n            if (max_num >= 2) ans = max(ans, r - l + 1);\n            if (num[a[l]] == i) max_num--;\n            num[a[l]]--;\n        }\n    }\n\n    printf(\"%d\\n\", ans);\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F2. Frequency Problem  Hard Version .json",
    "editorial_link": "https://codeforces.com//blog/entry/82067",
    "editorial": "If an element V\n appears more than n???\n times, we can simply brute-force this pair with partial sums (D,V)\n in O(n)\n.\n\nFor the other elements, for all the appearances of V\n we'll consider only at most |V|+1\n neighboring occurrences of D\n to search for the optimal interval. We can generalize the brute-force solution to work for this case too, by writing a function that solves just for a vector of interesting positions. Don't forget to take into account extending intervals with zeroes as well.\n\nWith proper preprocessing, this gives a solution in O(|V|2)\n per value V\n. Therefore, total runtime is bounded by O(nn???)\n.",
    "hint": []
}