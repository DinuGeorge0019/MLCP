{
    "link": "https://codeforces.com//contest/1991/problem/A",
    "problemId": "2781501",
    "problem_idx": "A",
    "shortId": "1991A",
    "contest_number": "1991",
    "problem_submissions": {
        "H": [
            273210632,
            273212730,
            273219908,
            273194851,
            273200656,
            273213505,
            273204889,
            273220591,
            273225451,
            273220804,
            273226512,
            273222266,
            273229115,
            278405080,
            273216843
        ],
        "G": [
            273180456,
            273179521,
            273174064,
            273209283,
            273179708,
            273185549,
            273216085,
            273188851,
            273191410,
            273193985,
            273189153,
            273194518,
            273197531,
            273190195,
            273195818,
            273188177,
            273190908,
            273195464,
            273198241
        ],
        "F": [
            273160781,
            273160990,
            273158593,
            273158141,
            273171320,
            273168196,
            273159727,
            273170129,
            273173513,
            273170857,
            273165439,
            273182207,
            273174869,
            273166190,
            273163947,
            273173198,
            273175470,
            273163587,
            273174682,
            273170108
        ],
        "E": [
            273150868,
            273153734,
            273152235,
            273150823,
            273156934,
            273151786,
            273150935,
            273157824,
            273151366,
            273154414,
            273174335,
            273161395,
            273159133,
            273156803,
            273161464,
            273162124,
            273154749,
            273158567,
            273155964
        ],
        "D": [
            273143134,
            273144551,
            273142645,
            273141713,
            273147820,
            273143829,
            273141673,
            273145581,
            273156995,
            273145729,
            273149790,
            273146459,
            273144249,
            273145676,
            273154684,
            273150687,
            273147840,
            273144991,
            273148567
        ],
        "C": [
            273139495,
            273142387,
            273139319,
            273241170,
            273142853,
            273141897,
            273140491,
            273138783,
            273141460,
            273141958,
            273141853,
            273144830,
            273141321,
            273143714,
            273141051,
            273142758,
            273145128,
            273137630,
            273141184,
            273143400
        ],
        "B": [
            273133106,
            273134906,
            273133339,
            273134525,
            273138116,
            273135569,
            273133092,
            273135379,
            273136693,
            273135755,
            273136343,
            273135805,
            273132915,
            273135366,
            273136849,
            273139913,
            273132449,
            273135138,
            273136549
        ],
        "A": [
            273130858,
            273132065,
            273130939,
            273130875,
            273131982,
            273132539,
            273130929,
            273131106,
            273131228,
            273130992,
            273131052,
            273131178,
            273130862,
            273131382,
            273131308,
            273132778,
            273130871,
            273130965,
            273131362
        ],
        "I": [
            273238749,
            273429741
        ]
    },
    "editorial_link": "https://codeforces.com/blog/entry/132014",
    "editorial": "The answer is the maximum value of the elements at odd indices.\n\nProof\n\nAny element at an odd index can be preserved until the end.\n\nSince each element at an odd index has an even number of elements on both sides, pairs of adjacent elements can be removed from left to right until only the element at the odd index remains. For example, if you want to keep the element at the i\n-th position, you can remove the elements at positions 1\n and 2\n, 3\n and 4\n, and so on, until the elements at positions i?2\n and i?1\n are removed. Then, continue removing elements at positions i+1\n and i+2\n, and so on, until the elements at positions n?1\n and n\n are removed. Therefore, any element at an odd index can be preserved through this method.\n\nNo element at an even index can be preserved until the end.\n\nSince n\n is odd, there are more elements at odd indices than at even indices. Each operation removes one element at an odd index and one element at an even index. Since there are always more elements at odd indices, the last remaining element must be at an odd index.",
    "name": "A. Maximize the Last Element",
    "statement": "You are given an array a of n integers, where n is .In one operation,\r\nyou will remove two elements from the array a, and then concatenate the\r\nremaining parts of the array. For example, given the array [4,7,4,2,9],\r\nwe can obtain the arrays [4,2,9] and [4,7,9] by the operations [\r\nunderline{4,7}, 4,2,9]\r\nto [4,2,9] and [4,7,\r\nunderline{4,2},9]\r\nto [4,7,9] respectively. However, we cannot obtain the array [7,2,9] as\r\nit requires deleting non-adjacent elements [\r\nunderline{4},7,\r\nunderline{4},2,9].You will repeatedly perform this operation until\r\nexactly one element remains in a.Find the maximum possible value of the\r\nremaining element in a.\r\n",
    "solutions": [
        "/** *    author:  tourist *    created: 28.07.2024 10:27:35**/#include <bits/stdc++.h>\u00a0using namespace std;\u00a0#ifdef LOCAL#include \"algo/debug.h\"#else#define debug(...) 42#endif\u00a0int main() {  ios::sync_with_stdio(false);  cin.tie(nullptr);  int tt;  cin >> tt;  while (tt--) {    int n;    cin >> n;    vector<int> a(n);    for (int i = 0; i < n; i++) {      cin >> a[i];    }    int ans = a[0];    for (int i = 2; i < n; i += 2) {      ans = max(ans, a[i]);    }    cout << ans << '\\n';  }  return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Maximize the Last Element.json"
}