{"link": "https://codeforces.com//contest/1341/problem/C", "problemId": "599360", "problem_idx": "C", "shortId": "1341C", "contest_number": "1341", "problem_submissions": {"F": [77848250, 77840090], "E": [77821518, 77899755, 77823133, 77824849, 77837980, 77849952, 77843481, 77845012, 77851732, 77844281, 77827942, 77845115], "D": [77806595, 77808901, 77796444, 77812229, 77809547, 77806349, 77817033, 77812671, 77820011, 77815726, 77848086, 77830454, 77808246, 77858849, 77820964, 77813001, 77808174, 77806131, 77813874], "C": [77795777, 77791932, 77784729, 77779572, 77803941, 77795669, 77798417, 77792949, 77801051, 77799331, 77784061, 77803420, 77789866, 77799759, 77790437, 77791028, 77788622, 77785381], "B": [77784814, 77781931, 77786979, 77777635, 77777444, 77778027, 77777282, 77784813, 77787430, 77790189, 77790670, 77814054, 77777959, 77791325, 77779844, 77782238, 77778289, 77777782], "A": [77769516, 77770127, 77769168, 77771475, 77770045, 77769414, 77769437, 77772206, 77772461, 77778892, 77770438, 77804897, 77769675, 77775846, 77769311, 77769798, 77769599, 78093030, 77769512]}, "name": "C. Nastya and Strange Generator", "statement": "Denis bought a mysterious item and it was... Random permutation\r\ngenerator! Denis could not believed his luck.When he arrived home, he\r\nbegan to study how his generator works and learned the algorithm. The\r\nprocess of generating a permutation consists of n steps. At the i-th\r\nstep, a place is chosen for the number i (1\r\nleq i\r\nleq n). The position for the number i is defined as follows: For all j\r\nfrom 1 to n, we calculate r_j the minimum index such that j\r\nleq r_j\r\nleq n, and the position r_j is not yet occupied in the permutation. If\r\nthere are no such positions, then we assume that the value of r_j is not\r\ndefined. For all t from 1 to n, we calculate count_t the number of\r\npositions 1\r\nleq j\r\nleq n such that r_j is defined and r_j = t. Consider the positions that\r\nare still not occupied by permutation and among those we consider the\r\npositions for which the value in the count array is maximum. The\r\ngenerator selects one of these positions for the number i. The generator\r\ncan choose position. Let\u2019s have a look at the operation of the algorithm\r\nin the following example: Let n = 5 and the algorithm has already\r\narranged the numbers 1, 2, 3 in the permutation. Consider how the\r\ngenerator will choose a position for the number 4: The values of r will\r\nbe r = [3, 3, 3, 4,\r\ntimes], where\r\ntimes means an indefinite value. Then the count values will be count =\r\n[0, 0, 3, 1, 0]. There are only two unoccupied positions in the\r\npermutation: 3 and 4. The value in the count array for position 3 is 3,\r\nfor position 4 it is 1. The maximum value is reached only for position\r\n3, so the algorithm will uniquely select this position for number 4.\r\nSatisfied with his purchase, Denis went home. For several days without a\r\nbreak, he generated permutations. He believes that he can come up with\r\nrandom permutations no worse than a generator. After that, he wrote out\r\nthe first permutation that came to mind p_1, p_2,\r\nldots, p_n and decided to find out if it could be obtained as a result\r\nof the generator.Unfortunately, this task was too difficult for him, and\r\nhe asked you for help. It is necessary to define whether the written\r\npermutation could be obtained using the described algorithm if the\r\ngenerator always selects the position Denis needs.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nint P[110000];\n\nint main() {\n    int T; scanf(\"%d\", &T);\n    while (T--) {\n        int N;\n        scanf(\"%d\", &N);\n        for (int i = 0; i < N; ++i) scanf(\"%d\", &P[i]);\n        bool f = true;\n        for (int i = N - 1, cur = 1; i >= 0;) {\n            int j = P[i], l = i;\n            for (; j >= cur; --j, --l) {\n                if (l < 0 || P[l] != j) {\n                    f = false; goto end;\n                }\n            }\n            cur = P[i] + 1; i = l;\n        }\n        end:;\n        puts (f ? \"Yes\" : \"No\");\n    }\n}"], "input": "", "output": "", "tags": ["greedy", "implementation"], "dificulty": "1500", "interactive": false}