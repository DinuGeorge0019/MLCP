{
    "link": "https://codeforces.com//contest/456/problem/D",
    "problemId": "12125",
    "problem_idx": "D",
    "shortId": "456D",
    "contest_number": "456",
    "problem_submissions": {
        "D": [
            7394195,
            7387334,
            7388194,
            7405631,
            7391438,
            7570888,
            7392150,
            7392407,
            7393420,
            7393011,
            7390869,
            7412347,
            7393749,
            7391710,
            7395518,
            7389615
        ],
        "E": [
            7391057,
            7389574,
            7398919,
            7392485,
            7391618,
            7395429,
            7414900,
            7394901,
            7394000,
            7407156,
            7407099,
            7394565
        ],
        "C": [
            7384935,
            7379979,
            7382777,
            7382760,
            7382268,
            7385285,
            7383719,
            7382555,
            7385127,
            7383651,
            7381928,
            7379735,
            7383336,
            7384288,
            7385361,
            7383584,
            7385744,
            7383852,
            7380739
        ],
        "A": [
            7381212,
            7377201,
            7377560,
            7377220,
            7377312,
            7379694,
            7377445,
            7377742,
            7377341,
            7377480,
            7377279,
            7382703,
            7377573,
            7378438,
            7377375,
            7377583,
            7379362,
            7377853,
            7384952
        ],
        "B": [
            7380090,
            7378182,
            7380801,
            7379345,
            7379559,
            7382230,
            7379187,
            7379755,
            7379683,
            7379290,
            7381183,
            7380009,
            7380898,
            7380752,
            7380004,
            7381407,
            7380326,
            7387312
        ]
    },
    "name": "D. A Lot of Games",
    "statement": "Andrew, Fedor and Alex are inventive guys. Now they invent the game with\r\nstrings for two players.Given a group of non-empty strings. During the\r\ngame two players build the word together, initially the word is empty.\r\nThe players move in turns. On his step player must add a single letter\r\nin the end of the word, the resulting word must be prefix of at least\r\none string from the group. A player loses if he cannot move.Andrew and\r\nAlex decided to play this game times. The player who is the loser of the\r\n-th game makes the first move in the -th game. Guys decided that the\r\nwinner of all games is the player who wins the last (-th) game. Andrew\r\nand Alex already started the game. Fedor wants to know who wins the game\r\nif both players will play optimally. Help him.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <queue>\n#include <map>\n#include <set>\n#include <iostream>\n\nusing namespace std;\n\nbool G[100005], GG[100005], H[100005];\nchar A[100005];\nint ctos, k, hay=1, va;\nint S[30][100005];\n\nvoid aslo(int dnde){\n    if(!H[dnde]){\n        G[dnde]=false;\n        return ;\n    }\n    for(int i=0; i<26; i++){\n        if(S[i][dnde]>0){\n            aslo(S[i][dnde]);\n            if(!G[S[i][dnde]]){\n                G[dnde]=true;\n                break ;\n            }\n        }\n    }\n}\n\nvoid as(int dnde){\n    if(!H[dnde]){\n        GG[dnde]=true;\n        return ;\n    }\n    for(int i=0; i<26; i++){\n        if(S[i][dnde]>0){\n            as(S[i][dnde]);\n            if(!GG[S[i][dnde]]){\n                GG[dnde]=true;\n                break ;\n            }\n        }\n    }\n}\n\nint main()\n{\n    scanf(\"%d%d\",&ctos,&k);\n    for(int i=1; i<=ctos; i++){\n        scanf(\"%s\",A);\n        va=1;\n        for(int i=0; A[i]!='\\0'; i++){\n            if(S[A[i]-'a'][va]==0){\n                ++hay;\n                S[A[i]-'a'][va]=hay;\n                H[va]=true;\n            }\n            va=S[A[i]-'a'][va];\n        }\n    }\n    aslo(1);\n    if(!G[1]){\n        printf(\"Second\\n\");\n        return 0;\n    }\n    as(1);\n    if(G[1] and GG[1]){\n        printf(\"First\\n\");\n        return 0;\n    }\n    if(k%2==1){\n        printf(\"First\\n\");\n    }\n    else {\n        printf(\"Second\");\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "games",
        "strings"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. A Lot of Games.json",
    "editorial_link": "https://codeforces.com//blog/entry/13336",
    "editorial": "Solutions: 7407663, 7407670; To solve this problem we need the prefix\r\ntree(trie), which will have all the strings from the group. Next we will\r\ncalculate the two DP: win[v] Can player win if he makes a move now\r\n(players have word equal to prefix in the prefix tree(trie)). lose[v]\r\nCan player lose if he makes a move now (players have word equal to\r\nprefix in the prefix tree(trie)). if is leaf of trie, then win[v] =\r\nfalse; lose[v] = true; Else ; , such children of vertex . Let\u00e2\u0080\u0099s look at\r\na few cases: If , then second player win (first player lose all games).\r\nIf , then first player win (he can change the state of the game in his\r\nfavor). If and , then if , then first player win, else second player\r\nwin. Asymptotics .\r\n"
}