{
    "link": "https://codeforces.com//contest/332/problem/E",
    "problemId": "3363",
    "problem_idx": "E",
    "shortId": "332E",
    "contest_number": "332",
    "problem_submissions": {
        "C": [
            4155522,
            4156354,
            4153132,
            4153078,
            4154819,
            4153485,
            4154446,
            4155481,
            4155178,
            4155623,
            4155730,
            4154794,
            4156773,
            4155378,
            4156846,
            4154112
        ],
        "E": [
            4153414,
            4232674,
            4158374
        ],
        "B": [
            4150245,
            4150553,
            4152758,
            4151567,
            4149063,
            4150850,
            4150633,
            4148733,
            4149973,
            4149574,
            4149995,
            4149281,
            4152409,
            4149688,
            4152014,
            4150178,
            4149649
        ],
        "A": [
            4152890,
            4148247,
            4148387,
            4148367,
            4148085,
            4148922,
            4150814,
            4148615,
            4148406,
            4149253,
            4148257,
            4148663,
            4148588,
            4148447
        ],
        "D": [
            4150491,
            4155596,
            4158402,
            4155100
        ]
    },
    "name": "E. Binary Key",
    "statement": "Let’s assume that and are strings of positive length, called the and the\r\ncorrespondingly, string only consists of characters 0 and 1. Let’s take\r\na look at a simple algorithm that extracts from the given container :i =\r\n0;j = 0;s = <>;while i is less than the length of the string p{ if q[j]\r\n== 1, then add to the right of string s character p[i]; increase\r\nvariables i, j by one; if the value of the variable j equals the length\r\nof the string q, then j = 0; }In the given pseudocode , are integer\r\nvariables, is a string, ” is an assignment operator, ” is a comparison\r\noperation, ” is the operation of obtaining the string character with the\r\npreset index, ” is an empty string. We suppose that in all strings the\r\ncharacters are numbered starting from zero. We understand that\r\nimplementing such algorithm is quite easy, so your task is going to be\r\nslightly different. You need to construct the lexicographically minimum\r\nkey of length , such that when it is used, the algorithm given above\r\nextracts message from container (otherwise find out that such key\r\ndoesn’t exist).\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <queue>\n#include <map>\n#include <sstream>\n#include <stack>\n#include <cassert>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\n#define pb push_back\n#define sz(x) ((x).size())\n#define mp make_pair\n#define x first\n#define y second\n\nconst int N = 1000010;\nconst int M = 2000010;\nconst int inf = 0x3f3f3f3f;\nconst double eps = 1e-6;\n\nint k;\n\nchar p[N], s[N];\nchar str[2010][1010];\n\nchar C[2010][1010];\n\nint work(int x, char C[], int len){\n    for(int i = x; i >= 0; i--){\n        if(strlen(str[i]) != len) continue;\n        bool f = 1;\n        for(int j = 0; j < len; j++)\n            if(str[i][j] != C[j]) f = 0;\n        if(f) return i;\n    }\n    return -1;\n}\n\nint main(){\n    gets(p);\n    gets(s);\n    scanf(\"%d\", &k);\n    int len = strlen(p);\n    int l = strlen(s);\n    int r = 0, c = 0;\n    for(int i = 0; i < len; i++){\n        str[r++][c] = p[i];\n        if(r == k) c++, r = 0;\n        if(c > l + 2) return puts(\"0\"), 0;\n    }\n    string ans;\n    for(int i = 0; i < k; i++)\n        ans += '1';\n    bool ret = 0;\n    for(int z = 1; z <= l; z++){\n        int x = len / k;\n        if(x * z > l) break;\n        if(l - x * z > z) continue;\n        memset(C, 0, sizeof(C));\n        for(int i = 0; i < l; i++){\n            C[i % z][i / z] = s[i];\n        }\n        bool f = 1;\n        string tans = \"\";\n        for(int i = 0; i < k; i++)\n            tans += '0';\n        for(int i = k - 1, j = z - 1; j >= 0; j--){\n            int t = work(i, C[j], strlen(C[j]));\n            if(t == -1) {\n                f = 0;\n                break;\n            }\n            i = t - 1;\n            tans[t] = '1';\n        }\n        if(!f) continue;\n        ans = min(ans, tans);\n        ret = 1;\n    }\n    if(ret) cout << ans << endl;\n    else cout << 0 << endl;\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "implementation"
    ],
    "dificulty": "2400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Binary Key.json",
    "editorial_link": "https://codeforces.com/blog/entry/8447",
    "editorial": "Let s iterate through the number of ones in the key (). One can note\r\nthat can t be large than , as the keys containing more than ones can t\r\nbe lexicographically minimal. Let s consider the solution of this\r\nproblem with the fixed . Any complete pass on the key corresponds to the\r\nextracting of scanned symbols of the container, i. e. container is\r\ndivided into blocks of length , and the message is divided into blocks\r\nof length (last blocks may be shorter). We ll number the characters in\r\neach block of the message from 0 to . We ll call -suffix suffix of -th\r\nblock of the message that starts from a position in this block. Let s\r\nsolve the problem with dynamic programming: is true if there exists a\r\nkey, the first characters of which are zeros and which corresponds to\r\nthe extracting from container the string that is the result of\r\nconcatenation of all -suffixes of the message. The transitions are based\r\non the filling of i-th position of the key with zero or one (we need to\r\nchoose the minimum acceptable character). To restore the key you can\r\nkeep chosen characters for each subtask. Asymptotics of the solution .\r\nCode\r\n",
    "hint": []
}