{
    "link": "https://codeforces.com//contest/66/problem/B",
    "problemId": "347",
    "problem_idx": "B",
    "shortId": "66B",
    "contest_number": "66",
    "problem_submissions": {
        "C": [
            325739,
            327571,
            324946,
            325140,
            326366,
            326847,
            325519,
            325350,
            326429,
            326396,
            326853,
            325915,
            529168,
            325585
        ],
        "E": [
            325379,
            326033,
            326058,
            325948,
            325798,
            325317,
            326222,
            326357,
            326861,
            326864,
            325631,
            326306,
            325725,
            326990,
            326457
        ],
        "D": [
            324481,
            325094,
            324874,
            325266,
            325314,
            325879,
            326421,
            325060,
            326079,
            324758
        ],
        "B": [
            323886,
            323924,
            323929,
            324358,
            324393,
            324432,
            324043,
            324939,
            324073,
            324145,
            324109,
            323877,
            324237,
            325527,
            324082,
            324195
        ],
        "A": [
            323693,
            324098,
            323993,
            323752,
            323774,
            327293,
            323660,
            323863,
            323917
        ]
    },
    "name": "B. Petya and Countryside",
    "statement": "Little Petya often travels to his grandmother in the countryside. The\r\ngrandmother has a large garden, which can be represented as a rectangle\r\nin size, when viewed from above. This rectangle is divided into equal\r\nsquare sections. The garden is very unusual as each of the square\r\nsections possesses its own fixed height and due to the newest irrigation\r\nsystem we can create artificial rain above each section.Creating\r\nartificial rain is an expensive operation. Thatâ€™s why we limit ourselves\r\nto creating the artificial rain only above one section. At that, the\r\nwater from each watered section will flow into its neighbouring sections\r\nif their height does not exceed the height of the section. That is, for\r\nexample, the garden can be represented by a rectangle, where the section\r\nheights are equal to 4, 2, 3, 3, 2. Then if we create an artificial rain\r\nover any of the sections with the height of 3, the water will flow over\r\nall the sections, except the ones with the height of 4. See the\r\nillustration of this example at the picture: As Petya is keen on\r\nprogramming, he decided to find such a section that if we create\r\nartificial rain above it, the number of watered sections will be\r\nmaximal. Help him.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <vector>\n#include <set>\n#include <map>\n#include <cstring>\n#include <string>\n#include <ctime>\n\nusing namespace std;\n\n#define file \"b\"\n#define sqr(a) ((a)*(a))\n#define two(a) (1 << (a))\n\nint N, a[1005];\n\nvoid Load ()\n{\n    cin >> N;\n\n    for (int i = 0;i < N;i++)\n        cin >> a[i];\n}\n\nvoid Solve ()\n{\n    int ans = 0;\n\n    for (int i = 0;i < N;i++)\n    {\n        int cur = 1;\n        for (int j = i - 1;j >= 0 && a[j] <= a[j + 1];j--) cur++;\n        for (int j = i + 1;j < N && a[j] <= a[j - 1];j++) cur++;\n        ans = max (ans, cur);\n    }\n    cout << ans;\n}\n\nint main ()\n{\n    //freopen (file\".in\", \"r\", stdin);\n    //freopen (file\".out\", \"w\", stdout);\n\n    Load();\n    Solve();\n\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Petya and Countryside.json",
    "editorial_link": "https://codeforces.com//blog/entry/1452",
    "editorial": "Try to check all possibilities for creation artificial rain and calculate how many sections contain water. The maximal answer from all these possibilities is the answer for the problem. To calculate the answer for the given position we should check how many sections are to the left and to the right of the given section receive water. The complexity of this algorithm is O(N^2).\n",
    "hint": []
}