{
    "link": "https://codeforces.com//contest/1393/problem/C",
    "problemId": "693072",
    "problem_idx": "C",
    "shortId": "1393C",
    "contest_number": "1393",
    "problem_submissions": {
        "D": [
            89235864,
            89237678,
            89239942,
            89241904,
            89240571,
            89239873,
            89230308,
            89237378,
            89247700,
            89240803,
            89243160,
            89243648,
            89242883,
            89238243,
            89242864,
            89249422,
            89245780,
            89244250
        ],
        "B": [
            89221116,
            89217441,
            89220933,
            89222989,
            89220509,
            89223779,
            89220401,
            89219535,
            89219377,
            89227149,
            89220055,
            89224518,
            89222569,
            89225245,
            89223599,
            89220060,
            89222338,
            89225655
        ],
        "C": [
            89218957,
            89225521,
            89228764,
            89230329,
            89224448,
            89234176,
            89238147,
            89233693,
            89228718,
            89234223,
            89234984,
            89234287,
            89231225,
            89232086,
            89232825,
            89232005,
            89235490,
            89236144
        ],
        "A": [
            89218814,
            89212583,
            89214268,
            89213479,
            89214230,
            89213219,
            89213191,
            89220955,
            89212600,
            89213989,
            89213307,
            89215648,
            89216757,
            89215210,
            89215943,
            89213088,
            89214183
        ],
        "E1": [
            89281813
        ]
    },
    "name": "C. Pinkie Pie Eats Patty-cakes",
    "statement": "Pinkie Pie has bought a bag of patty-cakes with different fillings! But\r\nit appeared that not all patty-cakes differ from one another with\r\nfilling. In other words, the bag contains some patty-cakes with the same\r\nfilling.Pinkie Pie eats the patty-cakes one-by-one. She likes having fun\r\nso she decided not to simply eat the patty-cakes but to try not to eat\r\nthe patty-cakes with the same filling way too often. To achieve this she\r\nwants the minimum distance between the eaten with the same filling to be\r\nthe largest possible. Herein Pinkie Pie called the distance between two\r\npatty-cakes the number of eaten patty-cakes strictly between them.Pinkie\r\nPie can eat the patty-cakes in any order. She is impatient about eating\r\nall the patty-cakes up so she asks you to help her to count the greatest\r\nminimum distance between the eaten patty-cakes with the same filling\r\namongst all possible orders of eating!Pinkie Pie is going to buy more\r\nbags of patty-cakes so she asks you to solve this problem for several\r\nbags!\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\nconst ll NN = 2e5 + 5;\nll t, d[NN], has, n;\nint main()\n{\n    ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n    cin >> t;\n    while(t--)\n    {\n        cin >> n;\n        for(ll i = 1; i <= n; i++)\n            d[i] = 0;\n        for(ll i = 1; i <= n; i++)\n        {\n            ll ta;\n            cin >> ta;\n            d[ta]++;\n        }\n        sort(d + 1, d + 1 + n);\n        reverse(d + 1, d + 1 + n);\n        ll ma = d[1], ban = 0;\n        for(ll i = 1; i <= n; i++)\n            if(d[1] == d[i])\n                ban++;\n            else\n                break;\n        n -= ban;\n        n /= (ma - 1);\n        has = n - 1;\n        cout << has << \"\\n\";\n    }\n}   "
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math",
        "sortings"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Pinkie Pie Eats Patty-cakes.json",
    "editorial_link": "https://codeforces.com//blog/entry/81161",
    "editorial": "Letâs note that if you can find the arrangement with the maximum\r\ndistance , then you can also find the arrangement with the maximum\r\ndistance . It allows you to use the binary search on the answer.To check\r\nthat the answer is at least , we can use the greedy algorithm. Each time\r\nletâs use the element that we can use (we didnât use it on the last\r\nsteps) and the number of the remaining elements equal to it is as large\r\nas possible. You can store the set of elements that you can use in the\r\nsorted by the number of appearances in . This sol works .Also there is a\r\nsolution in .\r\n",
    "hint": []
}