{
    "link": "https://codeforces.com//contest/1236/problem/B",
    "problemId": "442394",
    "problem_idx": "B",
    "shortId": "1236B",
    "contest_number": "1236",
    "problem_submissions": {
        "F": [
            62811108
        ],
        "E": [
            62897948,
            62812842,
            62804306,
            62804069,
            62813891,
            62807146,
            62814095,
            62805221,
            62811322,
            62812238,
            62805891,
            62807935,
            62864987,
            62832474
        ],
        "D": [
            62802950,
            62812650,
            62812836,
            62802625,
            62815190,
            62803700,
            62813698,
            62812781,
            62814654,
            62821887,
            62803442,
            62805006,
            62803249,
            62804002,
            62802909,
            62805902,
            62806423
        ],
        "C": [
            62792622,
            62791071,
            62789610,
            62791879,
            62789897,
            62794126,
            62795764,
            62792967,
            62790282,
            62793895,
            62789462,
            62790719,
            62789824,
            62786960,
            62793187,
            62790332,
            62791408,
            62792941
        ],
        "B": [
            62786209,
            62787426,
            62787186,
            62788924,
            62792966,
            62790776,
            62793499,
            62788719,
            62790312,
            62785414,
            62786772,
            62787247,
            62786648,
            62784848,
            62788974,
            62787295,
            62787730,
            62787714
        ],
        "A": [
            62784582,
            62784627,
            62784321,
            62785968,
            62783805,
            62784292,
            62799939,
            62784596,
            62785095,
            62790291,
            62784662,
            62784215,
            62784012,
            62783846,
            62784720,
            62784658,
            62784976,
            62784753
        ]
    },
    "name": "B. Alice and the List of Presents",
    "statement": "Alice got many presents these days. So she decided to pack them into\r\nboxes and send them to her friends.There are n kinds of presents.\r\nPresents of one kind are identical (i.e. there is no way to distinguish\r\ntwo gifts of the same kind). Presents of different kinds are different\r\n(i.e. that is, two gifts of different kinds are distinguishable). The\r\nnumber of presents of each kind, that Alice has is very big, so we can\r\nconsider Alice has an infinite number of gifts of each kind.Also, there\r\nare m boxes. All of them are for different people, so they are pairwise\r\ndistinct (consider that the names of m friends are written on the\r\nboxes). For example, putting the first kind of present into the first\r\nbox but not into the second box, is different from putting the first\r\nkind of present into the second box but not into the first box.Alice\r\nwants to pack presents with the following rules: She wonâ€™t pack more\r\nthan one present of each kind into the same box, so each box should\r\ncontain presents of different kinds (i.e. each box contains a subset of\r\nn kinds, empty boxes are allowed); For each kind at least one present\r\nshould be packed into some box. Now Alice wants to know how many\r\ndifferent ways to pack the presents exists. Please, help her and\r\ncalculate this number. Since the answer can be huge, output it by modulo\r\n10^9+7.See examples and their notes for clarification.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define endl '\\n'\ntypedef long long ll;\n\n\n//returns a^pw % mod\nll fastPow(ll a, ll pw, ll mod) {\n    ll res = 1;\n    a %= mod;\n    while(pw > 0) {\n        if(pw & 1) res = (res*a)%mod;\n        a = (a*a)%mod;\n        pw >>= 1;\n    }\n    return res;\n}\n\nconst int mod = 1e9+7;\n\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    int n,m;\n    cin >> n >> m;\n    cout << fastPow((fastPow(2,m,mod)-1+mod),n,mod);\n\n\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Alice and the List of Presents.json",
    "editorial_link": "https://codeforces.com/blog/entry/70654",
    "editorial": "The answer is .If we consider each present, it may contain only in the\r\nfirst box, in the second ... both in the first and second box, in the\r\nfirst and the third one ... in the first,the second and the third one\r\n... There are ways.There are presents, so there are ways in total\r\naccording to the Multiplication Principle.\r\n",
    "hint": []
}