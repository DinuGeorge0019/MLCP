{
    "link": "https://codeforces.com//contest/1038/problem/A",
    "problemId": "216021",
    "problem_idx": "A",
    "shortId": "1038A",
    "contest_number": "1038",
    "problem_submissions": {
        "F": [
            42582709,
            42588924
        ],
        "E": [
            42575080,
            42578573,
            42575208,
            42576431,
            42577789,
            42580719,
            42575666,
            42580571,
            42583311,
            42581396,
            42582088,
            42580954,
            42583334,
            42579643,
            42582008,
            42580920,
            42583129,
            42582580,
            42583754
        ],
        "D": [
            42573485,
            42569896,
            42569634,
            42567012,
            42572149,
            42570113,
            42576120,
            42571013,
            42565752,
            42571052,
            42574327,
            42570312,
            42567294,
            42575127,
            42575057,
            42572394,
            42574539,
            42573852,
            42573051
        ],
        "C": [
            42566710,
            42563399,
            42564810,
            42563947,
            42567501,
            42564966,
            42562683,
            42566829,
            42562396,
            42564608,
            42563976,
            42565121,
            42570852,
            42564983,
            42565516,
            42568404,
            42566048,
            42568514,
            42566544
        ],
        "B": [
            42560979,
            42561635,
            42561921,
            42561073,
            42563881,
            42561586,
            42565172,
            42563091,
            42560475,
            42561602,
            42561362,
            42562336,
            42564791,
            42568121,
            42563027,
            42564081,
            42563007,
            42563149,
            42562895
        ],
        "A": [
            42559251,
            42559046,
            42559189,
            42559233,
            42563411,
            42559174,
            42559467,
            42559825,
            42558982,
            42559283,
            42559010,
            42559078,
            42560087,
            42561636,
            42561187,
            42559807,
            42559670,
            42559820,
            42559436
        ]
    },
    "name": "A. Equality",
    "statement": "You are given a string s of length n, which consists only of the first k\r\nletters of the Latin alphabet. All letters in string s are uppercase.A\r\nof string s is a string that can be derived from s by deleting some of\r\nits symbols without changing the order of the remaining symbols. For\r\nexample, \"\" and \"\" are subsequences of \"\", but \"\" is not.A subsequence\r\nof s called if the number of occurences of each of the first k letters\r\nof the alphabet is the same.Find the length of the longest good\r\nsubsequence of s.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long LL;\n\nLL read(){LL x; scanf(\"%lld\", &x); return x;}\nvoid read(char *s){scanf(\"%s\", s);}\nvoid no(){printf(\"NO\"); exit(0);}\n\n#define maxn 120000\n#define maxm\n\nchar s[maxn];\nint c[maxn];\nint main(){\n\tint n = read(), k = read(), ans = n + 1;\n\tread(s);\n\tfor(int i = 0; i < n; i += 1) c[s[i] - 'A'] += 1;\n\tfor(int i = 0; i < k; i += 1) ans = min(ans, c[i]);\n\tprintf(\"%d\", ans * k);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation",
        "strings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Equality.json",
    "editorial_link": "https://codeforces.com/blog/entry/61692",
    "editorial": "First we need to find the frequencies of the first alphabets in the\r\nstring. Let the minimum frequency among these frequencies be . Then we\r\ncannot select characters of one kind, and we can definitely select\r\ncharacters of each kind, hence the answer is given by (frequency of\r\nfirst characters) * Overall Complexity:\r\n",
    "hint": []
}