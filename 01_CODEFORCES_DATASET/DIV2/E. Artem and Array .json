{"link": "https://codeforces.com//contest/443/problem/E", "problemId": "10510", "problem_idx": "E", "shortId": "443E", "contest_number": "443", "problem_submissions": {"D": [6920325, 6916566, 6917590, 6918097, 6920177, 6917285, 6920976, 6921353, 6922229, 6919679, 6920725, 6916330, 6920984, 6916768, 6918289], "C": [6916700, 6920227, 6920927, 6921420, 6918956, 6921762, 6918294, 6918027, 6919227, 6921621, 6920532, 6921893], "B": [6914810, 6917396, 6914725, 6915203, 6915357, 6915551, 6915724, 6915492, 6915913, 6916470, 6917359, 6917333, 6915305, 6915776, 6915944, 6915992], "A": [6913586, 6913341, 6913477, 6914120, 6913376, 6913571, 6913622, 6914280, 6913834, 6913392, 6914327, 6913573, 6919949, 6913342], "E": [6948171]}, "name": "E. Artem and Array ", "statement": "Artem has an array of positive integers. Artem decided to play with it.\r\nThe game consists of moves. Each move goes like this. Artem chooses some\r\nelement of the array and removes it. For that, he gets points, where and\r\nare numbers that were adjacent with the removed number. If the number\r\ndoesn\u2019t have an adjacent number to the left or right, Artem doesn\u2019t get\r\nany points. After the element is removed, the two parts of the array\r\nglue together resulting in the new array that Artem continues playing\r\nwith. Borya wondered what maximum total number of points Artem can get\r\nas he plays this game.\r\n", "solutions": ["#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\nconst int INF = 1000000007;\nconst int N = 500010;\nint a[N], l[N], r[N];\npii p[N];\n\nint main() {\n    int n;\n    ll ans = 0;\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; i ++) {\n        scanf(\"%d\", &a[i]);\n        p[i].first = a[i];\n        p[i].second = i;\n        l[i] = i-1;\n        r[i] = i+1;\n    }\n    sort(p + 1, p + n + 1);\n    int pl = 1, pr = n;\n    for(int i = 1; i <= n-2; i ++) {\n        int pos = p[i].second;\n        if (pos == pl) {\n            ans += a[pos];\n            pl = r[pl];\n        } else if (pos == pr) {\n            ans += a[pos];\n            pr = l[pr];\n        } else {\n            ans += (long long)min(a[l[pos]], a[r[pos]]);\n            l[r[pos]] = l[pos], r[l[pos]] = r[pos];\n        }\n    }\n    printf(\"%I64d\\n\", ans);\n    return 0;\n}"], "input": "", "output": "", "tags": ["greedy"], "dificulty": "2500", "interactive": false}