{
    "link": "https://codeforces.com//contest/339/problem/D",
    "problemId": "3415",
    "problem_idx": "D",
    "shortId": "339D",
    "contest_number": "339",
    "problem_submissions": {
        "E": [
            4350288,
            4350692,
            4352701
        ],
        "D": [
            4347551,
            4348122,
            4348269,
            4346682,
            4347753,
            4347777,
            4346418,
            4348110,
            4345524,
            4347567,
            4346466,
            4344100,
            4349422,
            4345943,
            4341414,
            4344586,
            4346272,
            4344696,
            4346389,
            4346350
        ],
        "C": [
            4346199,
            4345560,
            4345573,
            4349756,
            4349561,
            4350535,
            4346192,
            4343883,
            4344992,
            4344549,
            4345429,
            4347032,
            4344235,
            4347272,
            4346342,
            4344286,
            4343699,
            4344636,
            4349580
        ],
        "B": [
            4342829,
            4340936,
            4341294,
            4343582,
            4343548,
            4342304,
            4341644,
            4342625,
            4341093,
            4341762,
            4341301,
            4342171,
            4342988,
            4342700,
            4343276,
            4342478,
            4342137,
            4345190,
            4341771,
            4347102
        ],
        "A": [
            4340544,
            4340115,
            4340169,
            4342061,
            4342695,
            4341025,
            4340145,
            4341252,
            4340204,
            4340351,
            4340621,
            4342784,
            4340896,
            4340831,
            4341165,
            4340658,
            4345500,
            4340568,
            4346745
        ]
    },
    "name": "D. Xenia and Bit Operations",
    "statement": "Xenia the beginner programmer has a sequence , consisting of\r\nnon-negative integers: . Xenia is currently studying bit operations. To\r\nbetter understand how they work, Xenia decided to calculate some value\r\nfor .Namely, it takes several iterations to calculate value . At the\r\nfirst iteration, Xenia writes a new sequence , consisting of elements.\r\nIn other words, she writes down the bit-wise OR of adjacent elements of\r\nsequence . At the second iteration, Xenia writes the bitwise OR of\r\nadjacent elements of the sequence obtained after the first iteration. At\r\nthe third iteration Xenia writes the bitwise OR of the adjacent elements\r\nof the sequence obtained after the second iteration. And so on; the\r\noperations of bitwise exclusive OR and bitwise OR alternate. In the end,\r\nshe obtains a sequence consisting of one element, and that element is\r\n.Let’s consider an example. Suppose that sequence . Then let’s write\r\ndown all the transformations . The result is .You are given Xenia’s\r\ninitial sequence. But to calculate value for a given sequence would be\r\ntoo easy, so you are given additional queries. Each query is a pair of\r\nintegers . Query means that you need to perform the assignment . After\r\neach query, you need to print the new value for the new sequence .\r\n",
    "solutions": [
        "#include <iostream>\n#include <cstring>\n#include <cstdio>\n\nusing namespace std;\n\nconst int N=200006;\n\nint n, m, A[N];\n\nstruct Segment_Tree {\n\tstruct Node {\n\t\tint s, t, dep, val;\n\t\tvoid init(int L, int R, int a) {\n\t\t\ts=L, t=R, dep=a, val=A[L];\n\t\t}\n\t} T[N<<2];\n\n\tvoid pushUp(Node &fa, Node &L, Node &R) {\n\t\tif(fa.dep&1) fa.val=L.val|R.val;\n\t\telse fa.val=L.val^R.val;\n\t}\n\n\tvoid build(int id, int dep, int L, int R) {\n\t\tT[id].init(L, R, dep);\n\t\tif(L==R) return;\n\t\tint mid=(L+R)>>1;\n\t\tbuild(id<<1, dep-1, L, mid);\n\t\tbuild(id<<1|1, dep-1, mid+1, R);\n\t\tpushUp(T[id], T[id<<1], T[id<<1|1]);\n\t}\n\n\tvoid update(int id, int pos, int val) {\n\t\tif(T[id].s==T[id].t) {\n\t\t\tT[id].val=val;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(T[id].s+T[id].t)>>1;\n\t\tif(pos<=mid) update(id<<1, pos, val);\n\t\telse update(id<<1|1, pos, val);\n\t\tpushUp(T[id], T[id<<1], T[id<<1|1]);\n\t}\n} tree;\n\nint main() {\n//\tfreopen(\"in\", \"r\", stdin);\n\tscanf(\"%d%d\", &n, &m);\n\tint old=n;\n\tn=(1<<n);\n\tfor(int i=1; i<=n; i++) scanf(\"%d\", &A[i]);\n\ttree.build(1, old, 1, n);\n\tfor(int i=0, p, q; i<m; i++) {\n\t\tscanf(\"%d%d\", &p, &q);\n\t\ttree.update(1, p, q);\n\t\tprintf(\"%d\\n\", tree.T[1].val);\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "trees"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Xenia and Bit Operations.json",
    "editorial_link": "https://codeforces.com//blog/entry/8725",
    "editorial": "Tutorial by Gerald The problem could be solved by using a typical data\r\nstructure (segment tree). The leafs of the segment tree will store the\r\nvalues of . At the vertices, the distance from which to the leafs is 1,\r\nwe will store OR of the numbers from the leafs, which are the sons of\r\nthis node in the segment tree. Similarly, vertices, the distance from\r\nwhich to the leafs is 2, we will store Xor of the numbers stored in\r\ntheir immediate sons. And so on. Then, the root of the tree will contain\r\nthe required value . There is no need to rebuild all the tree to perform\r\nan update operation. To do update, we should find a path from the root\r\nto the corresponding leaf and recalculate the values only at the tree\r\nvertices that are lying on that path. If everything is done correctly,\r\nthen each update query will be executed in time. Also we need memory.\r\n",
    "hint": []
}