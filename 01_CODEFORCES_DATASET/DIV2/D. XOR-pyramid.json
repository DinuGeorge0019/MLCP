{
    "link": "https://codeforces.com//contest/984/problem/D",
    "problemId": "183247",
    "problem_idx": "D",
    "shortId": "984D",
    "contest_number": "984",
    "problem_submissions": {
        "E": [
            38295174,
            38292597,
            38295542,
            38294481,
            38296992,
            38308491,
            38286876,
            38291550,
            38301305,
            38295842,
            38311834
        ],
        "D": [
            38281653,
            38286328,
            38283274,
            38285186,
            38284520,
            38278363,
            38278548,
            38283233,
            38283814,
            38283258,
            38285731,
            38282701,
            38285537,
            38283857,
            38282865,
            38284924,
            38285935,
            38282839,
            38284166,
            38284994
        ],
        "C": [
            38277813,
            38279909,
            38280385,
            38282567,
            38284026,
            38308575,
            38279256,
            38278014,
            38280019,
            38281587,
            38278990,
            38279032,
            38276778,
            38279263,
            38279837,
            38280121,
            38280838,
            38281513,
            38280422
        ],
        "B": [
            38277482,
            38274043,
            38276214,
            38275539,
            38274804,
            38273916,
            38280569,
            38275485,
            38274790,
            38277380,
            38303710,
            38274483,
            38273269,
            38279129,
            38273211,
            38274320,
            38274282,
            38275265,
            38276184,
            38276792
        ],
        "A": [
            38274250,
            38270894,
            38271892,
            38271406,
            38271964,
            38270942,
            38279477,
            38271611,
            38271008,
            38273380,
            38271243,
            38272415,
            38270860,
            38271217,
            38270890,
            38271184,
            38271009,
            38271766,
            38274300,
            38271231
        ]
    },
    "name": "D. XOR-pyramid",
    "statement": "For an array b of length m we define the function f as f(b) =\r\nbegin{cases} b[1] &\r\nquad\r\ntext{if } m = 1\r\nf(b[1]\r\noplus b[2],b[2]\r\noplus b[3],\r\ndots,b[m-1]\r\noplus b[m]) &\r\nquad\r\ntext{otherwise,}\r\nend{cases} where\r\noplus is bitwise exclusive OR.For example, f(1,2,4,8)=f(1\r\noplus2,2\r\noplus4,4\r\noplus8)=f(3,6,12)=f(3\r\noplus6,6\r\noplus12)=f(5,10)=f(5\r\noplus10)=f(15)=15You are given an array a and a few queries. Each query\r\nis represented as two integers l and r. The answer is the maximum value\r\nof f on all continuous subsegments of the array a_l, a_{l+1},\r\nldots, a_r.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n/*    .___.\n     /     \\\n    | O _ O |\n    /  \\_/  \\\n  .' /     \\ `.\n / _|       |_ \\\n(_/ |       | \\_)\n    \\       /\n   __\\_>-<_/__\n   ~;/     \\;~     */\n\n\n#define float double\n#define debug(x) (cerr << #x << \": \" << (x) << endl)\n\n#define int long long\n\ntypedef long long ll;\n\nusing namespace std;\n\nint32_t main() {\n    cin.tie(nullptr);\n\n    int n;\n    cin >> n;\n    vector<ll> a(n);\n    for(auto &x : a) cin >> x;\n\n    vector<vector<ll>> res(n, vector<ll>(n));\n    for(int len = 0; len < n; ++len) {\n        for(int l = 0; l+len < n; ++l) {\n            if(len == 0) res[l][l] = a[l];\n            else res[l][l+len] = res[l][l+len-1] ^ res[l+1][l+len];\n        }\n    }\n\n    vector<vector<ll>> maxi = res;\n\n    for(int l = n-1; l >= 0; --l) {\n        ll run = maxi[l][l];\n        for(int r = l; r < n; ++r) {\n            if(l + 1 < n)\n                maxi[l][r] = max(maxi[l][r], maxi[l+1][r]);\n            run = max(run, res[l][r]);\n            maxi[l][r] = max(maxi[l][r], run);\n        }\n    }\n\n\n    int q;\n    cin >> q;\n\n    for(int i = 0; i < q; ++i)\n    {\n        int l, r;\n        cin >> l >> r;\n        --l; --r;\n        cout << maxi[l][r] << \"\\n\";\n    }\n\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. XOR-pyramid.json",
    "editorial_link": "https://codeforces.com//blog/entry/59484",
    "editorial": "Let's calculate f(a)\n recursively and save arrays from each level of recursion. We get two-dimencional array dp[n][n]\n and dp[n][1]=f(a)\n. Now let's view recursive calculation for f(alar)\n. You can see what array of i\n-th level of recursion is dp[i][lr?i+1]?dp[r?l+1][l]=f(alar)\n (numbeer of levels of recursion is length of segment). To calculate maximum of all sub-segments for each segment, replace dp[i][j]\n on max(dp[i][j],dp[i?1][j],dp[i?1][j+1])\n. Now answer of question l,r\n is dp[r?l+1][l]\n. Overall time complexity is O(n2+q)\n.",
    "hint": []
}