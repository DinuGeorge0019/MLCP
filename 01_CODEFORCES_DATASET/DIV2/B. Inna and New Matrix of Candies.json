{
    "link": "https://codeforces.com//contest/400/problem/B",
    "problemId": "6824",
    "problem_idx": "B",
    "shortId": "400B",
    "contest_number": "400",
    "problem_submissions": {
        "D": [
            5942946,
            5938217,
            5938966,
            5937625,
            5935311,
            5938926,
            5940475,
            5940990,
            5937079,
            5944638,
            5955647,
            5943946,
            5937794,
            5946557,
            5936465,
            5939830,
            5950427,
            5941016
        ],
        "E": [
            5940590,
            5942014,
            5941822,
            5942894,
            5940333,
            5944467,
            5944452,
            5943295,
            5943002,
            5942790,
            5935656,
            5940436,
            5940115,
            5945285,
            5940524,
            5941127,
            5943876,
            5942957
        ],
        "C": [
            5934630,
            5936091,
            5936231,
            5935790,
            5939164,
            5935792,
            5937387,
            5938564,
            5934697,
            5938828,
            5935714,
            5935729,
            5935058,
            5936232,
            5935137,
            5934332,
            5936129,
            5935750,
            5937003
        ],
        "B": [
            5933775,
            5934595,
            5934975,
            5934196,
            5940471,
            5936516,
            5935696,
            5934075,
            5933798,
            5937278,
            5934053,
            5934760,
            5933911,
            5934786,
            5933892,
            5938918,
            5934764,
            5934389,
            5934127
        ],
        "A": [
            5933588,
            5933768,
            5934022,
            5933647,
            5933945,
            5933905,
            5933697,
            5933650,
            5933599,
            5936558,
            5933618,
            5933930,
            5933611,
            5933796,
            5933591,
            5939685,
            5933878,
            5933786,
            5933680
        ]
    },
    "name": "B. Inna and New Matrix of Candies",
    "statement": "Inna likes sweets and a game called the \"Candy Matrix\". Today, she came\r\nup with the new game \"Candy Matrix 2: Reload\".The field for the new game\r\nis a rectangle table of size . Each line of the table contains one cell\r\nwith a dwarf figurine, one cell with a candy, the other cells of the\r\nline are empty. The game lasts for several moves. During each move the\r\nplayer should choose and shout \"Let\u2019s go!\". After that, all the dwarves\r\nfrom the chosen lines start to move to the right. During each second,\r\neach dwarf goes to the adjacent cell that is located to the right of its\r\ncurrent cell. The movement continues until one of the following events\r\noccurs: some dwarf in one of the chosen lines is located in the\r\nrightmost cell of his row; some dwarf in the chosen lines is located in\r\nthe cell with the candy. The point of the game is to transport all the\r\ndwarves to the candy cells.Inna is fabulous, as she came up with such an\r\ninteresting game. But what about you? Your task is to play this game\r\noptimally well. Specifically, you should say by the given game field\r\nwhat minimum number of moves the player needs to reach the goal of the\r\ngame.\r\n",
    "solutions": [
        "#include <vector>\n#include <list>\n#include <map>\n#include <set>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <limits>\n#include <tuple>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint n, m;\nchar s[1010][1010];\nint main()\n{\n    scanf(\"%d %d\\n\", &n, &m);\n    set<int> z;\n    for (int i=0;i<n;++i)\n    {\n        gets(s[i]);\n        int G=-1, S=-1;\n        for (int j=0;j<m;++j) if (s[i][j]=='G') G=j; else if (s[i][j]=='S') S=j;\n        if (S<G) { puts(\"-1\"); return 0; }\n        z.insert(S-G);\n    }\n    printf(\"%d\\n\", int(z.size()));\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "schedules"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Inna and New Matrix of Candies.json",
    "editorial_link": "https://codeforces.com//blog/entry/10755",
    "editorial": "In the final version of statement we must choose all lines we haven\u00e2\u0080\u0099t\r\nfinish already. If it is a string where we have answer . Otherwise, the\r\nanswer is the number of distinct distances, as one step kills all\r\ndistances of the minimal length.\r\n"
}