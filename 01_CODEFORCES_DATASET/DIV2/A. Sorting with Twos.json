{
    "link": "https://codeforces.com//contest/1891/problem/A",
    "problemId": "2296088",
    "problem_idx": "A",
    "shortId": "1891A",
    "contest_number": "1891",
    "problem_submissions": {
        "E": [
            230546323,
            230549698,
            230546568,
            230560113,
            230535473,
            230555886,
            230556588,
            230572665,
            230562765,
            230571525,
            230577549,
            230577437,
            230577312,
            230576387,
            230568654,
            230542621,
            230562980,
            230569462,
            230570942,
            230569058,
            230570276,
            230567059,
            230568509,
            230570393
        ],
        "D": [
            230534861,
            230532955,
            230530542,
            230539370,
            230549040,
            230536739,
            230534616,
            230532674,
            230544623,
            230533495,
            230543589,
            230549007,
            230547762,
            230544535,
            230536524,
            230537913,
            230537614,
            230536080,
            230540544,
            230539494
        ],
        "F": [
            230528098,
            230541255,
            230552010,
            230529998,
            230540710,
            230542715,
            230590093,
            230590013,
            230545702,
            230538147,
            251594037,
            230535448,
            230545719,
            230533122,
            230519163,
            230533480,
            230536870,
            230548382,
            230551293,
            230550179,
            230543750,
            230553764,
            230541029
        ],
        "C": [
            230517325,
            230519256,
            230521040,
            230519508,
            230552157,
            230529446,
            230519957,
            230521645,
            230529295,
            230521526,
            230527664,
            230555714,
            230523852,
            230528582,
            230522749,
            230531812,
            230530352,
            230518984,
            230520316,
            230536742
        ],
        "A": [
            230515478,
            230512076,
            230512426,
            230512477,
            230513749,
            230513572,
            230511745,
            230511922,
            230513704,
            230511875,
            230512212,
            230559679,
            230512242,
            230513480,
            230512561,
            230512123,
            230512943,
            230547595,
            230512205,
            230518051
        ],
        "B": [
            230513054,
            230513705,
            230515902,
            230515002,
            230527506,
            230517573,
            230513080,
            230513453,
            230518089,
            230513986,
            230515796,
            230558558,
            230539558,
            230516521,
            230515634,
            230516319,
            230517013,
            230552749,
            230513951,
            230522884
        ]
    },
    "name": "A. Sorting with Twos",
    "statement": "You are given an array of integers a_1, a_2,\r\nldots, a_n. In one operation, you do the following: Choose a\r\nnon-negative integer m, such that 2^m\r\nleq n. Subtract 1 from a_i for all integers i, such that 1\r\nleq i\r\nleq 2^m. Can you sort the array in non-decreasing order by performing\r\nsome number (possibly zero) of operations?An array is considered\r\nnon-decreasing if a_i\r\nleq a_{i + 1} for all integers i such that 1\r\nleq i\r\nleq n - 1.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast,no-stack-protector,fast-math\",3)\nusing namespace std;\nconst int N=(1<<20)+10,M=998244353;\nusing ll=long long;\nusing ul=unsigned long long;\nvoid add(int &x,int y){(x+=y)>=M&&(x-=M);}\nvoid add(int &x,ul y,int z){x=(y*z+x)%M;}\nint T,n,m,K,ans,sum,a[N],b[N],bt;\nstring s,t;\nint main(){\n    ios::sync_with_stdio(false);\n    int i,j,k,l,r,x,y,z;\n    for(cin>>T;T--;){\n        for(i=1,cin>>n;i<=n;++i)cin>>a[i];\n        for(k=r=0;n>>k;++k){\n            for(x=(1<<k)+1,z=0;x<=(1<<k+1)&&x<=n;++x){\n                if(z>a[x]){r=1;break;}\n                z=max(z,a[x]);\n            }\n        }puts(r?\"No\":\"Yes\");\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "sortings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Sorting with Twos.json",
    "editorial_link": "https://codeforces.com//blog/entry/121876",
    "editorial": "Look at the difference array . = for each . If array is sorted, its\r\ndifference array has all of its elements non-negative. And operation is\r\nadding to if is a power of . So look at difference array. If there is\r\nsuch that is not a power of and then answer is NO . Else answer is YES .\r\nTime complexity: .\r\n"
}