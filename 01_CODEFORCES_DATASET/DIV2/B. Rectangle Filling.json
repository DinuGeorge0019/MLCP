{
    "link": "https://codeforces.com//contest/1966/problem/B",
    "problemId": "2615002",
    "problem_idx": "B",
    "shortId": "1966B",
    "contest_number": "1966",
    "problem_submissions": {
        "E": [
            258440120,
            258447865,
            258441495,
            258448292,
            258453329,
            258455007,
            258455562,
            258463703,
            258454902,
            258457920,
            258464021,
            258461311,
            258462638,
            258462895,
            258465595,
            258463312,
            258462674,
            258458699
        ],
        "B": [
            258438529,
            258422443,
            258424110,
            258425316,
            258424919,
            258422815,
            258422044,
            258421183,
            258426420,
            258424238,
            258425787,
            258424328,
            258425355,
            258428106,
            258426188,
            258424457,
            258424995,
            258442623
        ],
        "D": [
            258429599,
            258433739,
            258439478,
            258442551,
            258438117,
            258440328,
            258436731,
            258432022,
            258450610,
            258450325,
            258442193,
            258450098,
            258450833,
            258450813,
            258448974,
            258453024,
            258454359,
            258451828
        ],
        "C": [
            258425131,
            258429293,
            258430381,
            258430477,
            258430820,
            258432851,
            258429869,
            258440236,
            258434780,
            258430009,
            258432109,
            258435350,
            258435642,
            258434757,
            258435098,
            258436413,
            258434457,
            258433325
        ],
        "A": [
            258421447,
            258418791,
            258419370,
            258420086,
            258417776,
            258418880,
            258418284,
            258421321,
            258417852,
            258418112,
            258418571,
            258418222,
            258418421,
            258419544,
            258419765,
            258417953,
            258420988,
            258424462
        ],
        "F": []
    },
    "editorial_link": "https://codeforces.com//blog/entry/128914",
    "editorial": "If either pair of opposite corners is the same color, then we can choose\r\nthose corners to make everything the same color in one\r\noperation.Otherwise, we have four cases for the colors of the corners:\r\nNotice that these are all essentially rotations of each other, so we can\r\nonly consider the first case by symmetry: If any of the squares in the\r\nfirst row are black, then we can color everything black in two\r\noperations: In the same way, if any of the squares in the last row are\r\nwhite, then we can color everything white in two operations.Otherwise,\r\nthe grid looks like this: Notice that no matter how many operations we\r\ndo, all squares in the top row will remain white, and all squares in the\r\nbottom row will remain black, so we can never make everything the same\r\ncolor.So, considering the four cases from earlier, the solution is: if\r\nall squares in the top row are the same color, all squares in the bottom\r\nrow are the same color, and these two colors are different if all\r\nsquares in the leftmost column are the same color, all squares in the\r\nrightmost column are the same color, and these two colors are different\r\notherwiseComplexity:\r\n",
    "name": "B. Rectangle Filling",
    "statement": "There is an n\r\ntimes m grid of white and black squares. In one operation, you can\r\nselect any two squares of the same color, and color all squares in the\r\nsubrectangle between them that color.Formally, if you select positions\r\n(x_1, y_1) and (x_2, y_2), both of which are currently the same color c,\r\nset the color of all (x, y) where\r\nmin(x_1, x_2)\r\nle x\r\nle\r\nmax(x_1, x_2) and\r\nmin(y_1, y_2)\r\nle y\r\nle\r\nmax(y_1, y_2) to c.This diagram shows a sequence of two possible\r\noperations on a grid: Is it possible for all squares in the grid to be\r\nthe same color, after performing any number of operations (possibly\r\nzero)?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair<int,int> pii;const int N=505,Inf=1e9;int n,m;char a[N][N];signed main(){\tstd::ios::sync_with_stdio(false);\tcin.tie(0),cout.tie(0);\tint t;\tcin>>t;\twhile(t--){\t\tcin>>n>>m;\t\tfor(int i=1;i<=n;++i){\t\t\tfor(int j=1;j<=m;++j)cin>>a[i][j];\t\t}\t\tbool t1=false,t2=false,s1=false,s2=false;\t\tfor(int i=1;i<=m;++i)t1|=a[1][i]=='W',t2|=a[n][i]=='W',s1|=a[1][i]=='B',s2|=a[n][i]=='B';\t\tbool t3=false,t4=false,s3=false,s4=false;\t\tfor(int i=1;i<=n;++i)t3|=a[i][1]=='W',t4|=a[i][m]=='W',s3|=a[i][1]=='B',s4|=a[i][m]=='B';//\t\tcout<<n<<\" \"<<m<<\" \";\t\tif(t1&&t2&&t3&&t4)cout<<\"YES\\n\";\t\telse if(s1&&s2&&s3&&s4)cout<<\"YES\\n\";\t\telse cout<<\"NO\\n\";\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Rectangle Filling.json",
    "hint": []
}