{"link": "https://codeforces.com//contest/1301/problem/E", "problemId": "538758", "problem_idx": "E", "shortId": "1301E", "contest_number": "1301", "problem_submissions": {"F": [71000973, 71002227, 71047404, 71220694, 70998932, 71051995, 71028699, 71013382, 71013182, 71012775, 71025862, 71001305], "E": [70990356, 70991049, 70989982, 70995000, 71228853, 70994471, 70996484, 70997616, 70993985, 71001983, 71006041, 71000752, 71000762, 71000295, 71036031, 71006895, 71006710, 71008245, 71004278, 71001868, 71010122], "D": [70978990, 70984686, 70977541, 70983758, 70979628, 70981590, 70982372, 70984362, 70996505, 70984162, 70979443, 70993040, 70987583, 70989615, 70984290, 70988249, 70992550, 70989175, 70990934, 70988497], "C": [70971830, 70973831, 70972391, 70970695, 70971864, 70969581, 70970083, 70974438, 70974283, 70973307, 70972668, 70972796, 70978912, 70982981, 70973415, 70972561, 70970139, 70973814, 70975653, 70976409], "B": [70968569, 70967678, 70969977, 70968275, 70967585, 70973366, 70967417, 70968730, 70968327, 70969402, 70969851, 70968467, 70975325, 70966853, 70969894, 70969422, 70967771, 70969867, 70971492, 70969502], "A": [70962789, 70962641, 70962787, 70964181, 70962880, 70962945, 70962791, 70962672, 70962738, 70962693, 70965581, 70963729, 70962976, 70962686, 70963227, 70964391, 70962619, 70962496, 70966796, 70962378]}, "name": "E. Nanosoft", "statement": "Warawreh created a great company called Nanosoft. The only thing that\r\nWarawreh still has to do is to place a large picture containing its logo\r\non top of the company\u2019s building.The logo of Nanosoft can be described\r\nas four squares of the same size merged together into one large square.\r\nThe top left square is colored with red, the top right square is colored\r\nwith green, the bottom left square is colored with yellow and the bottom\r\nright square is colored with blue.An Example of some correct logos:An\r\nExample of some incorrect logos:Warawreh went to Adhami\u2019s store in order\r\nto buy the needed picture. Although Adhami\u2019s store is very large he has\r\nonly one picture that can be described as a grid of n rows and m\r\ncolumns. The color of every cell in the picture will be green (the\r\nsymbol \u201d), red (the symbol \u201d), yellow (the symbol \u201d) or blue (the symbol\r\n\u201d).Adhami gave Warawreh q options, in every option he gave him a\r\nsub-rectangle from that picture and told him that he can cut that\r\nsub-rectangle for him. To choose the best option, Warawreh needs to know\r\nfor every option the maximum area of sub-square inside the given\r\nsub-rectangle that can be a Nanosoft logo. If there are no such\r\nsub-squares, the answer is 0.Warawreh couldn\u2019t find the best option\r\nhimself so he asked you for help, can you help him?\r\n", "solutions": ["#include <bits/stdc++.h>\n\ninline int read() {\n    char c; int x; for (c = getchar(); !isdigit(c); c = getchar());\n    for (x = 0; isdigit(c); c = getchar()) { x = x * 10 + c - '0'; } return x;\n}\n\nconst int N = 505;\n\nint n, m, q, lim, ans, a[N][N], s[4][N][N], f[N][N][N];\nchar c[N][N];\n\ninline bool isFill(int x, int y, int _s, int t, int k) {\n    int fil = (_s - x + 1) * (t - y + 1);\n    int tmp = s[k][_s][t] + s[k][x - 1][y - 1] - s[k][_s][y - 1] - s[k][x - 1][t];\n    return fil == tmp;\n}\n\nint main() {\n    n = read(); m = read(); q = read();\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%s\", c[i] + 1);\n        for (int j = 1; j <= m; j++) {\n            if (c[i][j] == 'R') { a[i][j] = 0; }\n            if (c[i][j] == 'G') { a[i][j] = 1; }\n            if (c[i][j] == 'B') { a[i][j] = 2; }\n            if (c[i][j] == 'Y') { a[i][j] = 3; }\n            for (int k = 0; k < 4; k++) {\n                s[k][i][j] = s[k][i - 1][j] + s[k][i][j - 1] - s[k][i - 1][j - 1];\n                if (a[i][j] == k) { s[k][i][j]++; }\n            }\n        }\n    }\n    lim = std::min(n, m);\n    for (int len = 2; len <= lim; len++) {\n        for (int i = 1; i <= n - len + 1; i++) {\n            for (int j = 1; j <= m - len + 1; j++) {\n                f[len][i][j] = std::max(std::max(std::max(f[len - 1][i][j], f[len - 1][i + 1][j]), f[len - 1][i][j + 1]), f[len - 1][i + 1][j + 1]);\n                if (len % 2 == 0) {\n                    int x = i + len / 2, y = j + len / 2;\n                    if (isFill(i, j, x - 1, y - 1, 0) && isFill(i, y, x - 1, j + len - 1, 1) && isFill(x, y, i + len - 1, j + len - 1, 2) && isFill(x, j, i + len - 1, y - 1, 3)) {\n                        f[len][i][j] = std::max(f[len][i][j], len * len);\n                    }\n                }\n            }\n        }\n    }\n    for (int _ = 0; _ < q; _++) {\n        int x = read(), y = read(), r = read(), c = read();\n        int lenx = r - x + 1, leny = c - y + 1;\n        ans = 0;\n        if (lenx >= leny) {\n            for (int i = x; i + leny - 1 <= r; i++) {\n                ans = std::max(ans, f[leny][i][y]);\n            }\n        } else {\n            for (int i = y; i + lenx - 1 <= c; i++) {\n                ans = std::max(ans, f[lenx][x][i]);\n            }\n        }\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}"], "input": "", "output": "", "tags": ["binary search", "data structures", "dp", "implementation"], "dificulty": "2500", "interactive": false}