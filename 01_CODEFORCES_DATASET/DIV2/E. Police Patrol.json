{
    "link": "https://codeforces.com//contest/427/problem/E",
    "problemId": "9097",
    "problem_idx": "E",
    "shortId": "427E",
    "contest_number": "427",
    "problem_submissions": {
        "E": [
            6529676,
            6527850,
            6529995,
            6528507,
            6529891,
            6528022,
            6531554,
            6531662,
            6531650,
            6531698,
            6531712,
            6530455,
            6532065,
            6527906,
            6531472,
            6533495,
            6528109,
            6530245,
            6529960,
            6530613
        ],
        "D": [
            6527983,
            6529398,
            6528326,
            6530702,
            6534291,
            6529012,
            6529644,
            6529417,
            6530366,
            6530850,
            6529777,
            6528806,
            6532098,
            6529134,
            8322622,
            6531820,
            6528330
        ],
        "C": [
            6526456,
            6526319,
            6526893,
            6528943,
            6526905,
            6526400,
            6528201,
            6526648,
            6527081,
            6527815,
            6530569,
            6528401,
            6530942,
            6525719,
            6528319,
            6527086,
            6526075,
            6526591,
            6526667,
            6525971
        ],
        "B": [
            6524329,
            6524628,
            6525243,
            6524515,
            6525057,
            6524940,
            6525765,
            6524924,
            6525305,
            6528525,
            6525911,
            6525634,
            6525338,
            6523816,
            6528718,
            6524445,
            6524359,
            6525504,
            6525432,
            6526909
        ],
        "A": [
            6523077,
            6523845,
            6524661,
            6523545,
            6523918,
            6523933,
            6523978,
            6523356,
            6523252,
            6524775,
            6525360,
            6523618,
            6524309,
            6523039,
            6524259,
            6523009,
            6523402,
            6523741,
            6523222,
            6524142
        ]
    },
    "name": "E. Police Patrol",
    "statement": "Imagine that your city is an infinite 2D plane with Cartesian coordinate\r\nsystem. The only crime-affected road of your city is the -axis.\r\nCurrently, there are criminals along the road. No police station has\r\nbeen built on this road yet, so the mayor wants to build one.As you are\r\ngoing to be in charge of this new police station, the mayor has asked\r\nyou to choose a suitable position (some integer point) for building it.\r\nYou should choose the best position for the police station, so that you\r\ncould minimize the total time of your criminal catching mission. Your\r\nmission of catching the criminals will operate only from this station.\r\nThe new station will have only patrol car. You will go to the criminals\r\nby this car, carry them on the car, bring them back to the police\r\nstation and put them in prison. The patrol car can carry at most\r\ncriminals at a time. Note that, the criminals don\u2019t know about your\r\nmission. So, they will stay where they are instead of running away.Your\r\ntask is to find the position for the police station, so that total\r\ndistance you need to cover to catch all the criminals will be minimum\r\npossible. Note that, you also can built the police station on the\r\npositions where one or more criminals already exist. In such a case all\r\nthese criminals are arrested instantly.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <string.h>\n\ntypedef long long LL;\nconst int N = 1048576;\nint xi[N];\nLL cl[N];\nint nl[N];\nLL cr[N];\nint nr[N];\n\nint main()\n{\n  //freopen(\"input.txt\", \"rt\", stdin);\n  //freopen(\"output.txt\", \"wt\", stdout);\n\n  int n, m;\n  scanf(\"%d %d\", &n, &m);\n  for (int i = 0; i < n; i++)\n    scanf(\"%d\", &xi[i]);\n\n  LL sum1 = 0, sum2 = 0;\n  int cnt = 0;\n  for (int i = 0; i < n; i++)\n  {\n    cl[i] = sum1;\n    nl[i] = cnt;\n    cr[n - i - 1] = sum2;\n    nr[n - i - 1] = cnt;\n    if ((i % m) == 0)\n      sum1 += xi[i], sum2 += xi[n - i - 1], cnt++;\n  }\n\n  LL best = -1;\n  for (int i = 0; i < n; i++)\n  {\n    LL cur = LL(nl[i]) * LL(xi[i]) - cl[i] +\n             cr[i] - LL(nr[i]) * LL(xi[i]);\n    if (best < 0 || cur < best)\n      best = cur;\n  }\n\n  printf(\"%I64d\", best * 2);\n\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation",
        "math",
        "ternary search"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Police Patrol.json",
    "editorial_link": "https://codeforces.com//blog/entry/12082",
    "editorial": "Trying to place the police station on existing criminal locations is the\r\nbest strategy. Calculate the cost from the leftmost criminal location,\r\nthen sweep over the next locations. By doing some adjustments on the\r\ncost of the previous location will yield the cost of the current\r\nlocation. Model solution : 6546283\r\n"
}