{
    "link": "https://codeforces.com//contest/940/problem/D",
    "problemId": "159602",
    "problem_idx": "D",
    "shortId": "940D",
    "contest_number": "940",
    "problem_submissions": {
        "F": [
            35642079,
            35639249,
            35741635,
            36062963,
            36289513
        ],
        "E": [
            35635658,
            35633935,
            35631463,
            35633682,
            35625185,
            35633814,
            35633623,
            35626225,
            35634924,
            35632939,
            35633342,
            35637140,
            35635889,
            35635053,
            35634184,
            35633752,
            35646808,
            35646714,
            35632320,
            35632703
        ],
        "C": [
            35629972,
            35623066,
            35624318,
            35625052,
            35625312,
            35628608,
            35627465,
            35626058,
            35629009,
            35622773,
            35623814,
            35626574,
            35624743,
            35624088,
            35624644,
            35624203,
            35626389,
            35626478,
            35625921
        ],
        "A": [
            35626916,
            35619951,
            35619990,
            35620867,
            43064576,
            35620290,
            35621938,
            35620031,
            35620370,
            35620395,
            35619980,
            35620028,
            35620003,
            35619970,
            35620016,
            35620214,
            35619977,
            35620645,
            35623155,
            35620719
        ],
        "B": [
            35625745,
            35621065,
            35621588,
            35622435,
            35622147,
            35624740,
            35624541,
            35622933,
            35622325,
            35621538,
            35621447,
            35624471,
            35622193,
            35621648,
            35621812,
            35621709,
            35623702,
            35624565,
            35622680
        ],
        "D": [
            35623541,
            35626308,
            35627049,
            35628539,
            35628655,
            35631444,
            35629469,
            35628621,
            35633730,
            35625705,
            35628318,
            35630442,
            35631472,
            35627122,
            35630218,
            35630123,
            35629593,
            35629487,
            35628885
        ]
    },
    "name": "D. Alena And The Heater",
    "statement": "The array of length is obtained from the array of length and two\r\nintegers and () using the following procedure:.For all : if and if and\r\notherwise You are given arrays and of the same length. Find two integers\r\nand (), such that applying the algorithm described above will yield an\r\narray equal to .It’s guaranteed that the answer exists.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n;\nint a[100005];\nchar ch[100005];\nint b[100005];\nint main(){\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; i ++){\n\t\tscanf(\"%d\", &a[i]);\n\t}\n\tscanf(\"%s\", ch + 1);\n\tfor(int i = 1; i <= n; i ++){\n\t\tb[i] = ch[i] - '0';\n\t}\n\tint ll = -1e9, lr = 1e9, rl = -1e9, rr = 1e9;\n\tfor(int i = 5; i <= n; i ++){\n\t\tif(b[i] == 0){\n\t\t\tif(b[i - 1] == 0){\n\t\t\t\tif(b[i - 1] == b[i - 2] &&  b[i - 2] == b[i - 3] && b[i - 3] == b[i - 4]){\n\t\t\t\t\tint mx = max(a[i], max(a[i - 1], max(a[i - 2], max(a[i - 3], a[i - 4]))));\n\t\t\t\t\tlr = min(lr, mx);\n\t\t\t\t}else continue;\n\t\t\t}else{\n\t\t\t\tif(b[i - 1] == b[i - 2] &&  b[i - 2] == b[i - 3] && b[i - 3] == b[i - 4]){\n\t\t\t\t\tint mn = min(a[i], min(a[i - 1], min(a[i - 2], min(a[i - 3], a[i - 4]))));\n\t\t\t\t\trr = min(mn - 1, rr);\n\t\t\t\t}else{\n\t\t\t\t\tprintf(\"-1\\n\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}else{\n\t\t\tif(b[i - 1] == 0){\n\t\t\t\tif(b[i - 1] == b[i - 2] &&  b[i - 2] == b[i - 3] && b[i - 3] == b[i - 4]){\n\t\t\t\t\tint mx = max(a[i], max(a[i - 1], max(a[i - 2], max(a[i - 3], a[i - 4]))));\n\t\t\t\t\tll = max(ll, mx + 1);\n\t\t\t\t}else{\n\t\t\t\t\tprintf(\"-1\\n\");\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(b[i - 1] == b[i - 2] &&  b[i - 2] == b[i - 3] && b[i - 3] == b[i - 4]){\n\t\t\t\t\tint mn = min(a[i], min(a[i - 1], min(a[i - 2], min(a[i - 3], a[i - 4]))));\n\t\t\t\t\trl = max(rl, mn);\n\t\t\t\t}else continue;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d %d\\n\", ll, rr);\n\treturn 0;\n} \n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "implementation"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Alena And The Heater.json",
    "editorial_link": "https://codeforces.com//blog/entry/58033",
    "editorial": "Notice, that constraints on and generates only sequences that equals , ,\r\n, . on positions means that . on positions means that . on positions\r\nmeans that . on positions means that . After all we get some constraints\r\nfor minimum and maximum possible values of and . Since itâs guaranteed\r\nthat answer exists minimum possbile value of and maximum possible value\r\nwill always be a correct answer. Pay attention that .This solution works\r\nin .\r\n",
    "hint": []
}