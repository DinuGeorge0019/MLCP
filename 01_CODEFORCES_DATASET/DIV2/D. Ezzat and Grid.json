{"link": "https://codeforces.com//contest/1557/problem/D", "problemId": "1072435", "problem_idx": "D", "shortId": "1557D", "contest_number": "1557", "problem_submissions": {"E": [125390553, 125390734, 125392343, 125392686, 125431451, 125435877, 125406211, 125406056, 125414773, 125406063], "D": [125366097, 125368312, 125364331, 125365749, 125357934, 125344874, 125362312, 125363710, 125360139, 125365438, 125352274, 125365421, 125369984, 125368368, 125366161, 125468355, 125462031, 125368493, 125372723, 125367940, 125373215, 125366128], "B": [125339476, 125330912, 125327019, 125342138, 125325903, 125329268, 125324623, 125326695, 125334429, 125327128, 125335125, 125326339, 125327891, 125331045, 125330449, 125461492, 125334099, 125330283, 125340978, 125329869, 125325192], "A": [125335099, 125321865, 125321562, 125320952, 125321336, 125323901, 125320479, 125327602, 125322088, 125320782, 125336065, 125321115, 125321768, 125324090, 125325059, 125320563, 125324049, 125322314, 125322780, 125320582], "C": [125325238, 125355338, 125335147, 125349230, 125339333, 125363322, 125341948, 125346131, 125341447, 125343360, 125338074, 125338930, 125334666, 125347698, 125346618, 125348911, 125346966, 125353644, 125345876, 125344725]}, "name": "D. Ezzat and Grid", "statement": "Moamen was drawing a grid of n rows and 10^9 columns containing only\r\ndigits 0 and 1. Ezzat noticed what Moamen was drawing and became\r\ninterested in the minimum number of rows one needs to remove to make the\r\ngrid beautiful.A grid is beautiful if and only if for every two\r\nconsecutive rows there is at least one column containing 1 in these two\r\nrows.Ezzat will give you the number of rows n, and m segments of the\r\ngrid that contain digits 1. Every segment is represented with three\r\nintegers i, l, and r, where i represents the row number, and l and r\r\nrepresent the first and the last column of the segment in that row.For\r\nexample, if n = 3, m = 6, and the segments are (1,1,1), (1,7,8),\r\n(2,7,7), (2,15,15), (3,1,1), (3,15,15), then the grid is: Your task is\r\nto tell Ezzat the minimum number of rows that should be removed to make\r\nthe grid beautiful.\r\n", "solutions": ["#include<bits/stdc++.h>\n#include <algorithm>\n\n#ifdef _MSC_VER\n#include <intrin.h>\n#endif\n\nnamespace atcoder {\n\nnamespace internal {\n\n// @param n `0 <= n`\n// @return minimum non-negative `x` s.t. `n <= 2**x`\nint ceil_pow2(int n) {\n    int x = 0;\n    while ((1U << x) < (unsigned int)(n)) x++;\n    return x;\n}\n\n// @param n `1 <= n`\n// @return minimum non-negative `x` s.t. `(n & (1 << x)) != 0`\nint bsf(unsigned int n) {\n#ifdef _MSC_VER\n    unsigned long index;\n    _BitScanForward(&index, n);\n    return index;\n#else\n    return __builtin_ctz(n);\n#endif\n}\n\n}  // namespace internal\n\n}  // namespace atcoder\n\n#include <cassert>\n#include <iostream>\n#include <vector>\nnamespace atcoder {\n\ntemplate <class S,\n          S (*op)(S, S),\n          S (*e)(),\n          class F,\n          S (*mapping)(F, S),\n          F (*composition)(F, F),\n          F (*id)()>\nstruct lazy_segtree {\n  public:\n    lazy_segtree() : lazy_segtree(0) {}\n    lazy_segtree(int n) : lazy_segtree(std::vector<S>(n, e())) {}\n    lazy_segtree(const std::vector<S>& v) : _n(int(v.size())) {\n        log = internal::ceil_pow2(_n);\n        size = 1 << log;\n        d = std::vector<S>(2 * size, e());\n        lz = std::vector<F>(size, id());\n        for (int i = 0; i < _n; i++) d[size + i] = v[i];\n        for (int i = size - 1; i >= 1; i--) {\n            update(i);\n        }\n    }\n\n    void set(int p, S x) {\n        assert(0 <= p && p < _n);\n        p += size;\n        for (int i = log; i >= 1; i--) push(p >> i);\n        d[p] = x;\n        for (int i = 1; i <= log; i++) update(p >> i);\n    }\n\n    S get(int p) {\n        assert(0 <= p && p < _n);\n        p += size;\n        for (int i = log; i >= 1; i--) push(p >> i);\n        return d[p];\n    }\n\n    S prod(int l, int r) {\n        assert(0 <= l && l <= r && r <= _n);\n        if (l == r) return e();\n\n        l += size;\n        r += size;\n\n        for (int i = log; i >= 1; i--) {\n            if (((l >> i) << i) != l) push(l >> i);\n            if (((r >> i) << i) != r) push(r >> i);\n        }\n\n        S sml = e(), smr = e();\n        while (l < r) {\n            if (l & 1) sml = op(sml, d[l++]);\n            if (r & 1) smr = op(d[--r], smr);\n            l >>= 1;\n            r >>= 1;\n        }\n\n        return op(sml, smr);\n    }\n\n    S all_prod() { return d[1]; }\n\n    void apply(int p, F f) {\n        assert(0 <= p && p < _n);\n        p += size;\n        for (int i = log; i >= 1; i--) push(p >> i);\n        d[p] = mapping(f, d[p]);\n        for (int i = 1; i <= log; i++) update(p >> i);\n    }\n    void apply(int l, int r, F f) {\n        assert(0 <= l && l <= r && r <= _n);\n        if (l == r) return;\n\n        l += size;\n        r += size;\n\n        for (int i = log; i >= 1; i--) {\n            if (((l >> i) << i) != l) push(l >> i);\n            if (((r >> i) << i) != r) push((r - 1) >> i);\n        }\n\n        {\n            int l2 = l, r2 = r;\n            while (l < r) {\n                if (l & 1) all_apply(l++, f);\n                if (r & 1) all_apply(--r, f);\n                l >>= 1;\n                r >>= 1;\n            }\n            l = l2;\n            r = r2;\n        }\n\n        for (int i = 1; i <= log; i++) {\n            if (((l >> i) << i) != l) update(l >> i);\n            if (((r >> i) << i) != r) update((r - 1) >> i);\n        }\n    }\n\n    template <bool (*g)(S)> int max_right(int l) {\n        return max_right(l, [](S x) { return g(x); });\n    }\n    template <class G> int max_right(int l, G g) {\n        assert(0 <= l && l <= _n);\n        assert(g(e()));\n        if (l == _n) return _n;\n        l += size;\n        for (int i = log; i >= 1; i--) push(l >> i);\n        S sm = e();\n        do {\n            while (l % 2 == 0) l >>= 1;\n            if (!g(op(sm, d[l]))) {\n                while (l < size) {\n                    push(l);\n                    l = (2 * l);\n                    if (g(op(sm, d[l]))) {\n                        sm = op(sm, d[l]);\n                        l++;\n                    }\n                }\n                return l - size;\n            }\n            sm = op(sm, d[l]);\n            l++;\n        } while ((l & -l) != l);\n        return _n;\n    }\n\n    template <bool (*g)(S)> int min_left(int r) {\n        return min_left(r, [](S x) { return g(x); });\n    }\n    template <class G> int min_left(int r, G g) {\n        assert(0 <= r && r <= _n);\n        assert(g(e()));\n        if (r == 0) return 0;\n        r += size;\n        for (int i = log; i >= 1; i--) push((r - 1) >> i);\n        S sm = e();\n        do {\n            r--;\n            while (r > 1 && (r % 2)) r >>= 1;\n            if (!g(op(d[r], sm))) {\n                while (r < size) {\n                    push(r);\n                    r = (2 * r + 1);\n                    if (g(op(d[r], sm))) {\n                        sm = op(d[r], sm);\n                        r--;\n                    }\n                }\n                return r + 1 - size;\n            }\n            sm = op(d[r], sm);\n        } while ((r & -r) != r);\n        return 0;\n    }\n\n  private:\n    int _n, size, log;\n    std::vector<S> d;\n    std::vector<F> lz;\n\n    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }\n    void all_apply(int k, F f) {\n        d[k] = mapping(f, d[k]);\n        if (k < size) lz[k] = composition(f, lz[k]);\n    }\n    void push(int k) {\n        all_apply(2 * k, lz[k]);\n        all_apply(2 * k + 1, lz[k]);\n        lz[k] = id();\n    }\n};\n\n}  // namespace atcoder\n\nusing namespace std;\nusing namespace atcoder;\ntypedef long long ll;\ntypedef pair<int,int> pr;\n#define mp make_pair\npr op(pr x,pr y){\n\treturn max(x,y);\n}\npr e(){\n\treturn mp(0,0);\n}\nlazy_segtree<pr,op,e,pr,op,op,e> tr(600005);\nint n,m,b[600005],is[600005];\npr f[600005],ans;\nvector<pr> seg[600005];\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1,x,l,r;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&x,&l,&r),b[++b[0]]=l,b[++b[0]]=r,seg[x].push_back(mp(l,r));\n\t}\n\tsort(b+1,b+b[0]+1);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(auto &j:seg[i])j.first=lower_bound(b+1,b+b[0]+1,j.first)-b,j.second=lower_bound(b+1,b+b[0]+1,j.second)-b;\n\tfor(int i=1;i<=n;i++){\n\t\tf[i]=mp(1,0);\n\t\tfor(auto j:seg[i]){\n\t\t\tpr tmp=tr.prod(j.first,j.second+1);\n\t\t\tf[i]=max(f[i],mp(tmp.first+1,tmp.second));\n\t\t}\n\t\tans=max(ans,mp(f[i].first,i));\n\t\tfor(auto j:seg[i])tr.apply(j.first,j.second+1,mp(f[i].first,i));\n\t\t//cout<<i<<' '<<f[i].first<<'\\n';\n\t}\n\tcout<<n-ans.first<<'\\n';\n\tint p=ans.second;\n\twhile(p)is[p]=1,p=f[p].second;\n\tfor(int i=1;i<=n;i++)if(!is[i])cout<<i<<' ';\n}"], "input": "", "output": "", "tags": ["data structures", "dp", "greedy"], "dificulty": "2200", "interactive": false}