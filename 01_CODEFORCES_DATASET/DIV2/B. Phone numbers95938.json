{
    "link": "https://codeforces.com//contest/25/problem/B",
    "problemId": "115",
    "problem_idx": "B",
    "shortId": "25B",
    "contest_number": "25",
    "problem_submissions": {
        "E": [
            108305,
            107891,
            108459,
            109074,
            109171,
            109424,
            109005,
            109444,
            109356,
            110109,
            109944
        ],
        "D": [
            107815,
            107231,
            107893,
            107939,
            107979,
            108143,
            107913,
            108468,
            108112,
            108146,
            108477,
            108033,
            107622,
            108937,
            108395,
            108185,
            107746
        ],
        "C": [
            107542,
            107972,
            107666,
            109348,
            109330,
            109305,
            109284,
            107599,
            107695,
            109679,
            107814,
            107526,
            108085,
            109622,
            107856,
            107775,
            108767,
            108192,
            107976,
            107797,
            107728,
            107534
        ],
        "B": [
            107003,
            106875,
            107055,
            106850,
            107367,
            107390,
            107161,
            107267,
            107320,
            107286,
            107129,
            107361,
            106975,
            107251,
            107517,
            106925,
            106908
        ],
        "A": [
            106730,
            106739,
            106878,
            106704,
            106912,
            107216,
            106718,
            106909,
            107174,
            107012,
            106856,
            106840,
            106744,
            106943,
            106825,
            106728,
            106741
        ]
    },
    "name": "B. Phone numbers",
    "statement": "Phone number in Berland is a sequence of digits. Often, to make it\r\neasier to memorize the number, it is divided into groups of two or three\r\ndigits. For example, the phone number is easier to remember as . Your\r\ntask is to find for a given phone number any of its divisions into\r\ngroups of two or three digits.\r\n",
    "solutions": [
        "#include <assert.h>\n#include <map>\n#include <set>\n#include <queue>\n#include <algorithm>\n#include <stdio.h>\n#include <math.h>\n#include <string>\n#include <list>\n#include <stack>\n#include <string.h>\n#include <stdlib.h>\n#include <vector>\n#include <utility>\n#include <list>\n#define INF 0x3fffffff\n#define LINF 0x3fffffffffffffffll\n#define DINF 1e100;\n\ntypedef long long ll;\n#define PII pair<int, int>\n#define PLL pair<ll, ll>\n#define PDD pair<double, double>\n#define PIL pair<int, ll>\n#define PLI pair<ll, int>\n#define PID pair<int, double>\n#define PDI pair<double, int>\n#define PLD pair<ll, double>\n#define PDL pair<double, ll>\n\n#define NUL(x) memset(x, 0, sizeof(x))\n#define MINUS(x) memset(x, 0xff, sizeof(x))\n#define PQ(x) priority_queue< x >  //highest first\n#define PQR(x) priority_queue< x , vector< x > , greater < x > > //lowest first\n#define MP make_pair\n#define PB push_back\n#define IT(x) for (typeof((x).begin()) it = (x).begin() ; it != (x).end() ; it++)\n#define IT2(x) for (typeof((x).begin()) it2 = (x).begin() ; it2 != (x).end() ; it2++)\n#define FOR(i, a, b) for (int i = (a) ; i< (b) ; i++)\n#define DEB(x...) fprintf(stderr,x);\n//#define DEB\n\nusing namespace std;\n\nbool testc(int tc=0)\n{\n\n}\n\nchar buf[150];\nint main()\n{\n  int n;\n  scanf(\"%i \", &n);\n  gets(buf);\n  int i=0;\n  if (n%2)\n    {\n      printf(\"%c\", buf[0]);\n      i++;\n    }\n  while(i<n)\n    {\n      printf(\"%c%c\", buf[i], buf[i+1]);\n      i+=2;\n      if (i<n) printf(\"-\");\n    }\n  printf(\"\\n\");\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Phone numbers95938.json",
    "editorial_link": "https://codeforces.com//blog/entry/594",
    "editorial": "There are many ways of separating the string into clusters of 2 or 3 characters. One easy way is to output 2 characters at a time, until you have only 2 or 3 characters remaining.",
    "hint": []
}