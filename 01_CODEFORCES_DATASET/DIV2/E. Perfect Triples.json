{
    "link": "https://codeforces.com//contest/1339/problem/E",
    "problemId": "590530",
    "problem_idx": "E",
    "shortId": "1339E",
    "contest_number": "1339",
    "problem_submissions": {
        "E": [
            76376836,
            76387473,
            76384887,
            76379831,
            76388585,
            76390578,
            76396660,
            76387000,
            76387243,
            76398417,
            76396262,
            76393298,
            76399344,
            76397428,
            76394900,
            76392890,
            76397397
        ],
        "D": [
            76366206,
            76361616,
            76361489,
            76362609,
            76370115,
            76368889,
            76363614,
            76372647,
            76369118,
            76367884,
            76374852,
            76373935,
            76373663,
            76374136,
            76369373,
            76371535,
            76374633
        ],
        "C": [
            76348562,
            76344606,
            76350287,
            76349364,
            76346531,
            76351575,
            76343954,
            76360371,
            76355938,
            76349819,
            76351779,
            76350689,
            76348249,
            76354286,
            76352877,
            76346445,
            76346553
        ],
        "B": [
            76343501,
            76338131,
            76337793,
            76336924,
            76339593,
            76343198,
            76337765,
            76339336,
            76344314,
            76341691,
            76343582,
            76339210,
            76341443,
            76348496,
            76344625,
            76338360,
            76339452
        ],
        "A": [
            76339423,
            76333974,
            76334483,
            76333757,
            76334414,
            76335125,
            76333704,
            76335982,
            76335394,
            76336250,
            76335663,
            76334669,
            76335712,
            76339115,
            76336582,
            76353895,
            76335154
        ]
    },
    "name": "E. Perfect Triples",
    "statement": "Consider the infinite sequence s of positive integers, created by\r\nrepeating the following steps: Find the lexicographically smallest\r\ntriple of positive integers (a, b, c) such that a\r\noplus b\r\noplus c = 0, where\r\noplus denotes the bitwise XOR operation. a, b, c are not in s. Here\r\ntriple of integers (a_1, b_1, c_1) is considered to be lexicographically\r\nsmaller than triple (a_2, b_2, c_2) if sequence [a_1, b_1, c_1] is\r\nlexicographically smaller than sequence [a_2, b_2, c_2]. Append a, b, c\r\nto s in this order. Go back to the first step. You have integer n. Find\r\nthe n-th element of s.You have to answer t independent test cases.A\r\nsequence a is lexicographically smaller than a sequence b if in the\r\nfirst position where a and b differ, the sequence a has a smaller\r\nelement than the corresponding element in b.\r\n",
    "solutions": [
        "ï»¿#include<bits/stdc++.h>\n#include <array>\nusing namespace std;\nusing ULL = unsigned long long;\nusing UL = unsigned;\nusing LL = long long;\n#define rep(i, n) for(UL i = 0; i < (n); i++)\n\ntemplate<class Ty>\nusing passive_queue = priority_queue<Ty, vector<Ty>, greater<Ty>>;\n\nstruct Problem {\n\tvoid Loop() {\n\t\tULL N; cin >> N;\n\t\tUL dig = 0; while (1ull << (dig * 2) <= N) dig++;\n\t\tdig--;\n\t\tN -= (1ull << (dig * 2));\n\t\tULL D = N / 3, I = N % 3;\n\t\tULL ans = (I + 1) << (dig * 2);\n\n\t\tULL Tb[4][3] = { {0,0,0}, {1,2,3}, {2,3,1}, {3,1,2} };\n\t\trep(i, dig) {\n\t\t\tans |= Tb[D & 3][I] << (i * 2);\n\t\t\tD >>= 2;\n\t\t}\n\t\tcout << ans << endl;\n\t}\n\n\tvoid Solve() {\n\t\tUL T; cin >> T;\n\t\trep(t, T) Loop();\n\t}\n\n\tProblem();\n};\nint main() {\n\tunique_ptr<Problem> p(new Problem());\n\tp->Solve();\n\treturn 0;\n}\nProblem::Problem() {\n\tcout << fixed << setprecision(10);\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "implementation",
        "math"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Perfect Triples.json",
    "editorial_link": "https://codeforces.com//blog/entry/75913",
    "editorial": "Let's try mathematical induction.\n\nFirst, suppose you have fully used numbers only between 1\n and 4n?1\n inclusive. Now we are going to use all numbers between 4n\n and 4n+1?1\n inclusive by following methods. Following picture is description of a\n, b\n and c\n in bitwise manner;\n\nFirst row means we have already used all numbers until 4n?1\n. Other 3\n rows mean a\n, b\n and c\n.\nKeep in mind that a\n, b\n, and c\n are the lexicographically smallest triple, so a?b=c\n and a<b<c\n should be satisfied at the same time.\n\nObservation 1. a2n=1\n, a2n+1=0\n, b2n=0\n, b2n+1=1\n, c2n=c2n+1=1\n. Otherwise, a<b<c\n condition won't be satisfied, because top two digits of a\n, b\n, c\n are either 01\n, 10\n, and 11\n.\n\nThen we have more freedom in lower digits, because since the highest 2\n digits are all different, then we can fill lower digits of three numbers independently. Now look at picture below;\n\nThis table shows you how to fill each 2\n digits of a\n, b\n and c\n.\nObservation 2. For each 2\n digits, a\n, b\n and c\n should have form like this. Of course, you can use mathematical induction again here; Try to prove this in only 2\n digits at the first, then expand this lemma to 4\n digits, 6\n digits, ..., 2n\n digits.\n\nNow you know the pattern of digits of a\n, b\n, and c\n. Apply this pattern for each test case. Time complexity is O(logn)\n.",
    "hint": []
}