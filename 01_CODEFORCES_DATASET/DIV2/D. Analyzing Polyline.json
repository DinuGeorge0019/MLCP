{
    "link": "https://codeforces.com//contest/195/problem/D",
    "problemId": "1422",
    "problem_idx": "D",
    "shortId": "195D",
    "contest_number": "195",
    "problem_submissions": {
        "E": [
            1777341,
            1777807,
            1780602,
            1778882,
            1779695,
            1778939,
            1778079,
            1779584,
            1779643,
            1780676,
            1779994,
            1779882,
            1781688
        ],
        "D": [
            1776612,
            1777077,
            1778398,
            1777210,
            1777366,
            1777818,
            1778286,
            1778743,
            1779250,
            1776789,
            1779690,
            1779525,
            1779340,
            1779758
        ],
        "C": [
            1776366,
            1778703,
            1777228,
            1786363,
            1778918,
            1777720,
            1778071,
            1778134,
            1779053,
            1780725,
            1777787,
            1778730,
            1778503,
            1778557
        ],
        "B": [
            1775818,
            1776287,
            1776244,
            1776178,
            1776166,
            1776316,
            1776212,
            1776715,
            1776133,
            1776660,
            1776543,
            1776189,
            1776717,
            1777992,
            1776246,
            1777021,
            1776348,
            1776593
        ],
        "A": [
            1775640,
            1775659,
            1775647,
            1775756,
            1775776,
            1775645,
            1775901,
            1776042,
            1775714,
            1776301,
            1775707,
            1775754,
            1776172,
            1777471,
            1775841,
            1775942,
            1776937,
            1775764
        ]
    },
    "name": "D. Analyzing Polyline",
    "statement": "As Valeric and Valerko were watching one of the last Euro Championship\r\ngames in a sports bar, they broke a mug. Of course, the guys paid for it\r\nbut the barman said that he will let them watch football in his bar only\r\nif they help his son complete a programming task. The task goes like\r\nthat.Let’s consider a set of functions of the following form: Let’s\r\ndefine a sum of functions of the given type as function for any . It’s\r\neasy to show that in this case the graph is a polyline. You are given\r\nfunctions of the given type, your task is to find the number of angles\r\nthat do not equal 180 degrees, in the graph , that is the sum of the\r\ngiven functions.Valeric and Valerko really want to watch the next Euro\r\nChampionship game, so they asked you to help them.\r\n",
    "solutions": [
        "#include <string>\n#include <vector>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <iostream>\n#include <sstream>\n#include <cstddef>\n#include <algorithm>\n#include <utility>\n#include <iterator>\n#include <numeric>\n#include <list>\n#include <complex>\n#include <cstdio>\n#include <climits>\n#include <iostream>\n#include <fstream>\n\n/*** TEMPLATE CODE STARTS HERE ***/\n\nusing namespace std;\n\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef long long ll;\ntypedef complex<double> pnt;\ntypedef pair<int, int> pii;\n\n#define RA(x) (x).begin(), (x).end()\n#define FE(i, x) for (typeof((x).begin()) i = (x).begin(); i != (x).end(); i++)\n#define SZ(x) ((int) (x).size())\n\ntemplate<class T>\nvoid splitstr(const string &s, vector<T> &out)\n{\n    istringstream in(s);\n    out.clear();\n    copy(istream_iterator<T>(in), istream_iterator<T>(), back_inserter(out));\n}\n\ntemplate<class T> T gcd(T a, T b) { return b ? gcd(b, a % b) : a; }\n\nstatic void redirect(int argc, const char **argv)\n{\n    if (argc > 1)\n    {\n        static filebuf f;\n        f.open(argv[1], ios::in);\n        cin.rdbuf(&f);\n        if (!cin)\n        {\n            cerr << \"Failed to open '\" << argv[1] << \"'\" << endl;\n            exit(1);\n        }\n    }\n\n    if (argc > 2)\n    {\n        static filebuf f;\n        f.open(argv[2], ios::out | ios::trunc);\n        cout.rdbuf(&f);\n        if (!cout)\n        {\n            cerr << \"Failed to open '\" << argv[2] << \"'\" << endl;\n        }\n    }\n}\n\n/*** TEMPLATE CODE ENDS HERE */\n\nint main(int argc, const char **argv)\n{\n    redirect(argc, argv);\n\n    int N;\n    cin >> N;\n    set<pii> angles;\n    for (int i = 0; i < N; i++)\n    {\n        int K, B;\n        cin >> K >> B;\n        if (K != 0)\n        {\n            int g = gcd(K, B);\n            K /= g;\n            B /= g;\n            if (K < 0)\n            {\n                K = -K;\n                B = -B;\n            }\n            angles.insert(pii(K, B));\n        }\n    }\n    cout << angles.size() << '\\n';\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "geometry",
        "math",
        "sortings"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Analyzing Polyline.json",
    "editorial_link": "https://codeforces.com//blog/entry/4699",
    "editorial": "In fact in this problem we were given\nlines but negative values were replaced by zero. Your task was to find\nthe number of angles that do not equal 180 degrees in the graph s(x),\nthat is the sum of the given functions. Firstly note that sum of two\nlines is also line. Indeed is . Consider points where , that is . While\nwe assume that doesnât equal to 0. Then line number is divided in two\nlines one of which identically equals to 0. Consider all different\npoints and sort them. Then, obviously, the sum of the given functions\nbetween two consecutive points is line. Find the equation of the line.\nAssume that we consider point from the left. Then equation of the line\nbetween points and will not be equal to equation of the line between\npoints and . That is in point is formed an angle that doesnât equal 180\ndegrees. So we should find equations of lines between every pair of\npoints and . It can be easily done using two arrays with queries of\nincreasing value on the interval offline.\n",
    "hint": []
}