{
    "link": "https://codeforces.com//contest/2007/problem/B",
    "problemId": "2843728",
    "problem_idx": "B",
    "shortId": "2007B",
    "contest_number": "2007",
    "problem_submissions": {
        "F": [
            278829889,
            278836909,
            278834397,
            278833574,
            278834465,
            278838066,
            278835361,
            278842334,
            278824105,
            278831692,
            278838908,
            278836968,
            278839548,
            278831301,
            278823086,
            278840296,
            278841111,
            278842601
        ],
        "E": [
            278819100,
            278812531,
            278814740,
            278819903,
            278822295,
            278825462,
            278818230,
            278822054,
            278840929,
            278825485,
            278828447,
            278833891,
            278799229,
            278838138,
            278839019,
            278828512,
            278831250,
            278831388,
            278817583,
            278815781
        ],
        "D": [
            278799468,
            278799575,
            278803157,
            278799799,
            278806603,
            278804232,
            278798668,
            278803495,
            278817444,
            278796667,
            278805268,
            278809906,
            278809488,
            278817233,
            278829523,
            278808086,
            278804865,
            278814312,
            278803553,
            278802384
        ],
        "C": [
            278780728,
            278781086,
            278788227,
            278789504,
            278792493,
            278790375,
            278787480,
            278788281,
            278794086,
            278818650,
            278789734,
            278788169,
            278787429,
            278793363,
            278793381,
            278800135,
            278810824,
            278793278,
            278788023,
            278790440
        ],
        "B": [
            278776959,
            278776203,
            278777907,
            278784810,
            278782747,
            278782953,
            278836748,
            278778704,
            278778803,
            278775898,
            278785508,
            278778671,
            278810717,
            278784596,
            278792140,
            278786468,
            278796546,
            278777191,
            278777412,
            278786342
        ],
        "A": [
            278773744,
            278773692,
            278774098,
            278774399,
            278775464,
            278777680,
            278775772,
            278775250,
            278773819,
            278773814,
            278774248,
            278884949,
            278773664,
            278780595,
            278777213,
            278780108,
            278778288,
            278781544,
            278774028,
            278774012,
            278778642
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/133382",
    "editorial": "We take a maximum value from the initial array. Let\u00e2\u0080\u0099s call it .We can\r\nsee that will always be one of the maximum values after any number of\r\noperations. Consider the value (which should be less than or equal to )\r\nbefore a particular operation. If , then still holds after the\r\noperation. Otherwise . In the operation, the difference between and\r\ndecreases by at most , so cannot become strictly greater than . Then,\r\nremains the maximum value.So we have reduced the problem to . Each time\r\na new operation is added, we perform it only on (and then output ).Time\r\ncomplexity: .\r\n",
    "name": "B. Index and Maximum Value",
    "statement": "After receiving yet another integer array a_1, a_2,\r\nldots, a_n at her birthday party, Index decides to perform some\r\noperations on it.Formally, there are m operations that she is going to\r\nperform in order. Each of them belongs to one of the two types:\r\ntexttt{+ l r}. Given two integers l and r, for all 1\r\nleq i\r\nleq n such that l\r\nleq a_i\r\nleq r, set a_i := a_i + 1.\r\ntexttt{- l r}. Given two integers l and r, for all 1\r\nleq i\r\nleq n such that l\r\nleq a_i\r\nleq r, set a_i := a_i - 1. For example, if the initial array a = [7, 1,\r\n3, 4, 3], after performing the operation\r\ntexttt{+}\r\nspace 2\r\nspace 4, the array a = [7, 1, 4, 5, 4]. Then, after performing the\r\noperation\r\ntexttt{-}\r\nspace 1\r\nspace 10, the array a = [6, 0, 3, 4, 3].Index is curious about the\r\nmaximum value in the array a. Please help her find it after each of the\r\nm operations.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;\u00a0int main() {\tios::sync_with_stdio(0);\tcin.tie(0); cout.tie(0);\tint T;\tfor (cin >> T; T; T--) {\t\tint n, q; cin >> n >> q;\t\tint mx = 0;\t\tfor (int i = 0; i < n; i++) {\t\t\tint x; cin >> x;\t\t\tmx = max(mx, x);\t\t}\t\twhile (q--) {\t\t\tchar c;\t\t\tint x, y; cin >> c >> x >> y;\t\t\tif (mx >= x && mx <= y) {\t\t\t\tif (c == '+') mx++;\t\t\t\telse mx--;\t\t\t}\t\t\tcout << mx << ' ';\t\t}\t\tcout << '\\n';\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Index and Maximum Value.json"
}