{"link": "https://codeforces.com//contest/1136/problem/C", "problemId": "311122", "problem_idx": "C", "shortId": "1136C", "contest_number": "1136", "problem_submissions": {"E": [51189467, 51191046, 51188149, 51188855, 51190741, 51191408, 51191033, 51190850, 51194968, 51193904, 51191352, 51194243, 51193372, 51194410, 51195041, 51186939, 51301458, 51187400, 108142946], "D": [51180882, 51177336, 51181079, 51182192, 51180429, 51179730, 51184359, 51186400, 51182377, 51185059, 51181346, 51187131, 51180821, 51187135, 51188443, 51182185, 51181190, 51180808, 51185600], "C": [51175111, 51174280, 51177685, 51177311, 51177103, 51175422, 51178344, 51175375, 51179187, 51176703, 51175880, 51179438, 51181887, 51178846, 51181563, 51198833, 51176953, 51176740, 51179104], "B": [51173283, 51172239, 51175677, 51174542, 51172486, 51175496, 51178841, 51174659, 51174225, 51173330, 51175893, 51182729, 51176296, 51176824, 51173811, 51174832, 51175088, 51177269], "A": [51171549, 51171474, 51171656, 51171563, 51171471, 51172689, 51176507, 51172194, 51172348, 51171636, 51172774, 51183297, 51171952, 51174150, 51171613, 51171562, 51173429, 51171702]}, "name": "C. Nastya Is Transposing Matrices", "statement": "Nastya came to her informatics lesson, and her teacher who is, by the\r\nway, a little bit famous here gave her the following task.Two matrices A\r\nand B are given, each of them has size n\r\ntimes m. Nastya can perform the following operation to matrix A\r\nunlimited number of times: take any square of A and transpose it (i.e.\r\nthe element of the submatrix which was in the i-th row and j-th column\r\nof the submatrix will be in the j-th row and i-th column after\r\ntransposing, and the transposed submatrix itself will keep its place in\r\nthe matrix A). Nastya\u2019s task is to check whether it is possible to\r\ntransform the matrix A to the matrix B. As it may require a lot of\r\noperations, you are asked to answer this question for Nastya.A of matrix\r\nM is a matrix which consist of all elements which comes from one of the\r\nrows with indeces x, x+1,\r\ndots, x+k-1 of matrix M and comes from one of the columns with indeces\r\ny, y+1,\r\ndots, y+k-1 of matrix M. k is the size of . In other words, is the set\r\nof elements of source matrix which form a solid square (i.e. without\r\nholes).\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\nvector<int> A[1010];\nvector<int> B[1010];\nint main()\n{\n  int N, M; scanf(\"%d%d\", &N, &M);\n  for(int i=0; i<N; ++i)\n    for(int j=0; j<M; ++j)\n    {\n      int t; scanf(\"%d\", &t);\n      A[i+j].push_back(t);\n    }\n  for(int i=0; i<N; ++i)\n    for(int j=0; j<M; ++j)\n    {\n      int t; scanf(\"%d\", &t);\n      B[i+j].push_back(t);\n    }\n  for(int i=0; i<=N+M-2; ++i)\n  {\n    sort(A[i].begin(), A[i].end());\n    sort(B[i].begin(), B[i].end());\n    if(A[i]!=B[i])\n    {\n      puts(\"NO\");\n      return 0;\n    }\n  }\n  puts(\"YES\");\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "sortings"], "dificulty": "1500", "interactive": false}