{
    "link": "https://codeforces.com//contest/1549/problem/B",
    "problemId": "1062375",
    "problem_idx": "B",
    "shortId": "1549B",
    "contest_number": "1549",
    "problem_submissions": {
        "F2": [
            124954760
        ],
        "B": [
            124947565,
            124545808,
            124541593,
            124946530,
            124553166,
            124545711,
            124536914,
            124556540,
            124566832,
            124527986,
            124941325,
            124545594,
            124575237,
            124552639,
            124521339,
            124527240,
            124534396,
            124536389,
            124529098,
            124547548,
            124525326,
            124539590,
            124546541
        ],
        "A": [
            124947501,
            124518305,
            124519670,
            124946570,
            124520785,
            124519203,
            124517993,
            124517559,
            124518317,
            124518952,
            124941237,
            124534955,
            124569653,
            124519648,
            124517299,
            124518094,
            124521899,
            124520868,
            124518074,
            124519228,
            124517443,
            124519076,
            124518992
        ],
        "F1": [
            124584680,
            124595832,
            124599734,
            124593371,
            124597616,
            124593738,
            124591194,
            124592802,
            124602219,
            124602384,
            124588472,
            124753532,
            124592653,
            124603568,
            124595865
        ],
        "E": [
            124572687,
            124578681,
            124586160,
            124580564,
            124586278,
            124587026,
            124603080,
            124600315,
            124577736,
            124595081,
            124580521,
            124597748,
            124594829,
            124597255,
            124685628,
            124601974
        ],
        "D": [
            124558908,
            124554190,
            124550650,
            124565038,
            124571505,
            124565266,
            124557657,
            124634855,
            124586699,
            124566420,
            124566608,
            124571026,
            124544812,
            124558707,
            124568055,
            124617780,
            124551649,
            124555888,
            124569746,
            124549100,
            124571724,
            124554851
        ],
        "C": [
            124534727,
            124537090,
            124536290,
            124552036,
            124551687,
            124549175,
            124538153,
            124547780,
            124552849,
            124553941,
            124540508,
            124527050,
            124538078,
            124556164,
            124573095,
            124538823,
            124554597,
            124536966,
            124553733,
            124540516
        ]
    },
    "name": "B. Gregor and the Pawn Game",
    "statement": "There is a chessboard of size n by n. The square in the i-th row from\r\ntop and j-th column from the left is labelled (i,j).Currently, Gregor\r\nhas some pawns in the n-th row. There are also enemy pawns in the 1-st\r\nrow. On one turn, Gregor moves one of pawns. A pawn can move one square\r\nup (from (i,j) to (i-1,j)) if there is no pawn in the destination\r\nsquare. Additionally, a pawn can move one square diagonally up (from\r\n(i,j) to either (i-1,j-1) or (i-1,j+1)) if and only if there is an enemy\r\npawn in that square. The enemy pawn is also removed.Gregor wants to know\r\nwhat is the maximum number of his pawns that can reach row 1?Note that\r\nonly Gregor takes turns in this game, and . Also, when Gregorâ€™s pawn\r\nreaches row 1, it is stuck and cannot make any further moves.\r\n",
    "solutions": [
        "// Problem: B. Gregor and the Pawn Game\n// Contest: Codeforces - Codeforces Round #736 (Div. 2)\n// URL: https://codeforces.com/contest/1549/problem/B\n// Memory Limit: 256 MB\n// Time Limit: 1000 ms\n// \n// Powered by CP Editor (https://cpeditor.org)\n\n#include<bits/stdc++.h>\n#define pb push_back\n#define mp make_pair\n#define chkmx(a,b) ((a)=max((a),(b)))\n#define chkmn(a,b) ((a)=min((a),(b)))\nusing namespace std;\ntemplate<typename T>\ninline void read(T &x){x=0;char c=getchar();bool f=false;for(;!isdigit(c);c=getchar())f|=c=='-';for(;isdigit(c);c=getchar())x=x*10+c-'0';if(f)x=-x;}\ntemplate<typename T ,typename ...Arg>inline void read(T &x,Arg &...args){read(x);read(args...);}\ntemplate<typename T>inline void write(T x){if(x<0)putchar('-'),x=-x;if(x>=10)write(x/10);putchar(x%10+'0');}\n//#define int long long\ntypedef long long ll;\nconst int N=2e5+100;\nint t,n;char a[N],b[N];int fg[N];\nsigned main(){\n\tread(t);\n\twhile(t--){\n\t\tread(n);\n\t\tscanf(\"%s\",a+1);\n\t\tscanf(\"%s\",b+1);\n\t\ta[n+1]=b[n+1]=0;\n\t\tint ans=0;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(a[i]=='0'){\n\t\t\t\tif(b[i]=='1')\n\t\t\t\t\tans++,b[i]=0;\n\t\t\t}else if(a[i]=='1'){\n\t\t\t\tif(b[i-1]=='1')ans++,b[i-1]=0;\n\t\t\t\telse if(b[i+1]=='1')ans++,b[i+1]=0;\n\t\t\t}\n\t\t}\n\t\twrite(ans);putchar('\\n');\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "dp",
        "flows",
        "graph matchings",
        "graphs",
        "greedy",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Gregor and the Pawn Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/93586",
    "editorial": "The key insight is that due to the fact that there is only one row of enemy pawns, and those pawns never move, there are only 3\n possible columns where one of Gregor's pawns can end up in.\n\nWe can solve this problem greedily, going from column 1\n to column N\n. At the current column j\n, if Gregor has a pawn in this column, then we greedily consider 3 cases.\n\nIf there is an uncaptured enemy pawn in column j?1\n, mark that pawn as captured and increment the answer. Column j?1\n will never be looked at again, so this decision is optimal.\nIf there is no pawn in column j\n, just move Gregor's pawn forward, and increment the answer.\nIf there is an uncaptured enemy pawn in column j+1\n, mark that pawn as captured and increment the answer.\nOtherwise, this pawn will not reach the first row.\nThis greedy solution is guaranteed to produce the maximum possible answer.\n\nThe time complexity is O(N)\n.",
    "hint": [
        "Hint 1 There a very limited number of squares where each of Gregor's pawns could end up.",
        "Hint 2 Identify a greedy strategy to maximize the answer.",
        "Hint 1 Write the problem as a graph problem.",
        "Hint 2 Valid captures or valid forward moves represent edges in the graph.",
        "Hint 3 We have two sets: Gregor's pawns, and destination squares. We also have some edges between these two sets.",
        "Hint 4 Maximum Matching."
    ]
}