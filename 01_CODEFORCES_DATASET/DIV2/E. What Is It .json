{"link": "https://codeforces.com//contest/1474/problem/E", "problemId": "870484", "problem_idx": "E", "shortId": "1474E", "contest_number": "1474", "problem_submissions": {"E": [104828368, 104825250, 104827801, 104822469, 104822968, 104825131, 104832974, 104811012, 104834815, 104836057, 104786622, 104834179, 104835602, 104835107, 104819950, 104895130, 104882601, 104882491, 104822858], "D": [104803255, 104806609, 104803024, 104811001, 104809350, 104807802, 104813937, 104829181, 104824996, 104821358, 104809387, 104820702, 104821421, 104825040, 104833883, 104796190, 104794553, 104806036, 104805452, 104811623], "C": [104789142, 104791190, 104786189, 104802722, 104796149, 104800127, 104797483, 104805966, 104792346, 104794052, 104822570, 104797300, 104791406, 104805588, 104813805, 104788832, 104801037, 104795624, 104794599, 104838458], "B": [104775373, 104776212, 104776559, 104780629, 104776012, 104787737, 104785829, 104784413, 104779863, 104778330, 104827451, 104777621, 104780062, 104783179, 104774681, 104778495, 104779543, 104781042, 104777052, 104790738], "A": [104773322, 104773959, 104773453, 104773717, 104779601, 104775931, 104776918, 104778778, 104773943, 104773918, 104829555, 104773504, 104773695, 104774435, 104774622, 104773540, 104774168, 104774408, 104773478, 104781204]}, "name": "E. What Is It ", "statement": "Lunar rover finally reached planet . After landing, he met an obstacle,\r\nthat contains permutation p of length n. Scientists found out, that to\r\novercome an obstacle, the robot should make p an identity permutation\r\n(make p_i = i for all i).Unfortunately, scientists can\u2019t control the\r\nrobot. Thus the only way to make p an identity permutation is applying\r\nthe following operation to p multiple times: Select two indices i and j\r\n(i\r\nneq j), such that p_j = i and swap the values of p_i and p_j. It takes\r\nrobot (j - i)^2 seconds to do this operation. Positions i and j are\r\nselected by the robot (scientists can\u2019t control it). He will apply this\r\noperation while p isn\u2019t an identity permutation. We can show that the\r\nrobot will make no more than n operations regardless of the choice of i\r\nand j on each operation.Scientists asked you to find out the maximum\r\npossible time it will take the robot to finish making p an identity\r\npermutation (i. e. worst-case scenario), so they can decide whether they\r\nshould construct a new lunar rover or just rest and wait. They won\u2019t\r\nbelieve you without proof, so you should build an example of p and\r\nrobot\u2019s operations that maximizes the answer.For a better understanding\r\nof the statement, read the sample description.\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\nstruct item{\n\tlong long a,b;\n};\nvoid solve(){\n\tlong long n,i;\n\tcin>>n;\n\tlong long result=(n-1)*(n-1),c=1,v=n-2,last=n;\n\tlong long p[n+1];\n\tfor(i=0;i<=n;i++){\n\t\tp[i]=1;\n\t}\n\tvector<item> bucket;\n\tfor(;c+1<n;){\n\t\tif(c<n-2){\n\t\t\tresult+=2*v*v;\n\t\t\tc=c+2;\n\t\t\tv--;\n\t\t}\n\t\telse{\n\t\t\tresult+=v*v;\n\t\t\tc++;\n\t\t}\n\t}\n\tcout<<result<<endl;\n\tresult=(n+1)/2;\n\tfor(i=0;i<(n-1)/2;i++){\n\t\tp[last]=result;\n\t\titem it;\n\t\tit.a=result,it.b=n;\n\t\tbucket.emplace_back(it);\n\t\tlast=result;result--;\n\t}\n\tlast=1;result=(n+1)/2+1;\n\tfor(i=0;i<n/2;i++){\n\t\tp[last]=result;\n\t\titem it;\n\t\tit.a=result;it.b=1;\n\t\tbucket.emplace_back(it);\n\t\tlast=result;result++;\n\t}\n\tfor(i=1;i<=n;i++){\n\t\tcout<<p[i]<<' ';\n\t}\n\tcout<<endl<<n-1<<endl;\n\tfor(item it:bucket){\n\t\tcout<<it.a<<' '<<it.b<<endl;\n\t}\n}\nint main(){\n\tios_base::sync_with_stdio(0);\n\tcin.tie(NULL);\n\tcout.tie(NULL);\n\tlong long t=1;\n\tcin>>t;\n\twhile(t--){\n\t\tsolve();\n\t}\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "greedy"], "dificulty": "2500", "interactive": false}