{
    "link": "https://codeforces.com//contest/2007/problem/D",
    "problemId": "2845543",
    "problem_idx": "D",
    "shortId": "2007D",
    "contest_number": "2007",
    "problem_submissions": {
        "F": [
            278829889,
            278836909,
            278834397,
            278833574,
            278834465,
            278838066,
            278835361,
            278842334,
            278824105,
            278831692,
            278838908,
            278836968,
            278839548,
            278831301,
            278823086,
            278840296,
            278841111,
            278842601
        ],
        "E": [
            278819100,
            278812531,
            278814740,
            278819903,
            278822295,
            278825462,
            278818230,
            278822054,
            278840929,
            278825485,
            278828447,
            278833891,
            278799229,
            278838138,
            278839019,
            278828512,
            278831250,
            278831388,
            278817583,
            278815781
        ],
        "D": [
            278799468,
            278799575,
            278803157,
            278799799,
            278806603,
            278804232,
            278798668,
            278803495,
            278817444,
            278796667,
            278805268,
            278809906,
            278809488,
            278817233,
            278829523,
            278808086,
            278804865,
            278814312,
            278803553,
            278802384
        ],
        "C": [
            278780728,
            278781086,
            278788227,
            278789504,
            278792493,
            278790375,
            278787480,
            278788281,
            278794086,
            278818650,
            278789734,
            278788169,
            278787429,
            278793363,
            278793381,
            278800135,
            278810824,
            278793278,
            278788023,
            278790440
        ],
        "B": [
            278776959,
            278776203,
            278777907,
            278784810,
            278782747,
            278782953,
            278836748,
            278778704,
            278778803,
            278775898,
            278785508,
            278778671,
            278810717,
            278784596,
            278792140,
            278786468,
            278796546,
            278777191,
            278777412,
            278786342
        ],
        "A": [
            278773744,
            278773692,
            278774098,
            278774399,
            278775464,
            278777680,
            278775772,
            278775250,
            278773819,
            278773814,
            278774248,
            278884949,
            278773664,
            278780595,
            278777213,
            278780108,
            278778288,
            278781544,
            278774028,
            278774012,
            278778642
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/133382",
    "editorial": "Consider a formed string. Let's delete the useless part that doesn't contribute to the number of 01\n and 10\n substrings. We will get a string where each pair of adjacent bits is different. For example, 110001?101\n. Then the weight of a leaf depends on the parity of the length of the string. You can also see that the weight is non-zero if the value of the root is different from the value of the leaf.\n\nIf the value of the root is already decided, the strategy is quite simple: just fill the values of the leaf nodes with a value different from or equal to the root. It's easy to calculate the answer.\n\nIf the value of the root has not yet been decided, it seems optimal to fill it first. That's because some values of the leaves have already been decided. When Iris chooses to colour the root at the very beginning, she will make the initial value larger (which is the larger one of the counts of 0\n and 1\n in the leaves).\n\nHowever, this can go wrong when there are equal numbers of 0\n and 1\n in the leaf nodes. The first to colour the root may lose the advantage of being the first (and when there are odd numbers of ?\n in the initial leaf nodes, Iris will colour one node less). In this situation, the optimal choice is to colour the unimportant nodes \u0097 the nodes that are neither the root nor a leaf. If there is an odd number of ?\n in the unimportant nodes, then Dora will have to colour the root (after filling the ?\n in the unimportant nodes one by one), which will cause Iris to colour the leaves first. When Dora colours a leaf, Iris can colour another leaf with the opposite colour if there is at least one leaf left; and colour the root with the opposite colour if there is none left. So Dora will never choose to colour a leaf first in this case.\n\nTo judge whether a node is a leaf, you can record the degrees of the nodes.",
    "name": "D. Iris and Game on the Tree",
    "statement": "Iris has a tree rooted at vertex 1. Each vertex has a value of\r\nmathtt 0 or\r\nmathtt 1.Let\u2019s consider a leaf of the tree (the vertex 1 is never\r\nconsidered a leaf) and define its . Construct a string formed by the\r\nvalues of the vertices on the path starting at the root and ending in\r\nthis leaf. Then the weight of the leaf is the difference between the\r\nnumber of occurrences of\r\nmathtt{10} and\r\nmathtt{01} substrings in it.Take the following tree as an example. Green\r\nvertices have a value of\r\nmathtt 1 while white vertices have a value of\r\nmathtt 0. Let\u2019s calculate the weight of the leaf 5: the formed string is\r\nmathtt{10110}. The number of occurrences of substring\r\nmathtt{10} is 2, the number of occurrences of substring\r\nmathtt{01} is 1, so the difference is 2 - 1 = 1. Let\u2019s calculate the\r\nweight of the leaf 6: the formed string is\r\nmathtt{101}. The number of occurrences of substring\r\nmathtt{10} is 1, the number of occurrences of substring\r\nmathtt{01} is 1, so the difference is 1 - 1 = 0.The of a tree is defined\r\nas the number of leaves with non-zero weight in the tree.But the values\r\nof some vertices haven\u2019t been decided and will be given to you as\r\ntexttt{?}. Filling the blanks would be so boring, so Iris is going to\r\ninvite Dora to play a game. On each turn, one of the girls chooses any\r\nof the remaining vertices with value\r\ntexttt{?} and changes its value to\r\nmathtt{0} or\r\nmathtt{1}, . The game continues until there are no vertices with value\r\nmathtt{?} left in the tree. Iris aims to maximize the score of the tree,\r\nwhile Dora aims to minimize that.Assuming that both girls play\r\noptimally, please determine the final score of the tree.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std;\u00a0const int maxN = 110000;int ct[maxN];\u00a0int main() {\tios::sync_with_stdio(0);\tcin.tie(0); cout.tie(0);\tint T;\tfor (cin >> T; T; T--) {\t\tint n; cin >> n;\t\tfor (int i = 2; i <= n; i++)\t\t\tct[i] = 0;\t\tfor (int i = 1; i < n; i++) {\t\t\tint a, b; cin >> a >> b;\t\t\tct[a]++, ct[b]++;\t\t}\t\tstring s; cin >> s;\t\tbool f = s[0] != '?';\t\tint c0 = 0, c1 = 0, cq = 0, extra = 0;\t\tfor (int i = 2; i <= n; i++) {\t\t\tif (ct[i] == 1) {\t\t\t\tif (s[i - 1] == '0') c0++;\t\t\t\tif (s[i - 1] == '1') c1++;\t\t\t\tif (s[i - 1] == '?') cq++;\t\t\t}\t\t\telse if (s[i - 1] == '?') {\t\t\t\textra++;\t\t\t}\t\t}\t\tif (f) {\t\t\tif (s[0] == '1') {\t\t\t\tcout << c0 + (cq + 1) / 2 << '\\n';\t\t\t}\t\t\telse {\t\t\t\tcout << c1 + (cq + 1) / 2 << '\\n';\t\t\t}\t\t}\t\telse {\t\t\tif (c0 != c1) {\t\t\t\tcout << max(c0, c1) + cq / 2 << '\\n';\t\t\t}\t\t\telse if (cq % 2 == 0) {\t\t\t\tcout << c0 + cq / 2 << '\\n';\t\t\t}\t\t\telse {\t\t\t\tcout << c0 + (cq + extra % 2) / 2 << '\\n';\t\t\t}\t\t}\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games",
        "graphs",
        "greedy",
        "trees"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Iris and Game on the Tree.json"
}