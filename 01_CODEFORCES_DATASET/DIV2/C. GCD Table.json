{"link": "https://codeforces.com//contest/583/problem/C", "problemId": "37192", "problem_idx": "C", "shortId": "583C", "contest_number": "583", "problem_submissions": {"E": [13375753, 13396222], "D": [13371700, 13375834, 13375664, 13375798, 13376138, 13377993, 13375935, 13375839, 13375159, 13377276, 13376289, 13377157, 13375820, 13376745, 13376124, 13377422, 13377342, 13377605], "B": [13364674, 13365201, 13363126, 13365327, 13365425, 13364429, 13367401, 13370194, 13367295, 13364694, 13364942, 13365660, 13367313, 13366206, 13367386, 13368153, 13364343, 13366693], "A": [13362665, 13362396, 13364500, 13362804, 13362621, 13362398, 13364299, 13368142, 13363751, 13362641, 13362459, 13362661, 13364238, 13362509, 13363582, 13363832, 13362516, 13363164], "C": [13368419, 13368334, 13370522, 13369874, 13370412, 13370222, 13366293, 13372301, 13369921, 13372160, 13372319, 13372641, 13371990, 13372547, 13373001, 13368713, 13370537]}, "name": "C. GCD Table", "statement": "The GCD table of size for an array of positive integers of length is\r\ndefined by formula Let us remind you that the greatest common divisor\r\n(GCD) of two positive integers and is the greatest integer that is\r\ndivisor of both and , it is denoted as . For example, for array of\r\nlength 4 the GCD table will look as follows: Given all the numbers of\r\nthe GCD table , restore array .\r\n", "solutions": ["#include <functional>\n#include <algorithm>\n#include <iostream>\n#include <cstdlib>\n#include <cstdlib>\n#include <numeric>\n#include <iomanip>\n#include <stdio.h>\n#include <cstring>\n#include <cassert>\n#include <vector>\n#include <math.h>\n#include <queue>\n#include <stack>\n#include <ctime>\n#include <set>\n#include <map>\n\nusing namespace std;\n\ntypedef long long ll;\n\ntemplate <typename T>\nT nextInt() {\n    T x = 0, p = 1;\n    char ch;\n    do { ch = getchar(); } while(ch <= ' ');\n    if (ch == '-') {\n        p = -1;\n        ch = getchar();\n    }\n    while(ch >= '0' && ch <= '9') {\n        x = x * 10 + (ch - '0');\n        ch = getchar();\n    }\n    return x * p;\n}\n\nconst int maxN = (int)1e3 + 10;\nconst int INF = (int)1e9;\nconst int mod = (int)1e9 + 7;\nconst ll LLINF = (ll)1e18;\n\nmultiset <int> s;\nbool was[maxN][maxN];\nvector <int> answer;\n\nint gcd(int x, int y) {\n    while(x && y) {\n        if (x > y) x%=y;\n        else y%=x;\n    }\n    return x|  y;\n}\n\nint main() {\n\n   // freopen(\".in\", \"r\", stdin);\n   // freopen(\".out\", \"w\", stdout);\n\n    int n;\n    cin >> n;\n    int k = n * n;\n\n    for (int i =0; i < k; ++i) {\n        int x;\n        cin >> x;\n        s.insert(x);\n    }\n\n    answer.push_back(*--s.end());\n    s.erase(--s.end());\n\n    while(!s.empty()) {\n        int x = *--s.end();\n        s.erase(--s.end());\n        for (int y: answer) {\n            int val = gcd(x, y);\n            s.erase(s.find(val));\n            s.erase(s.find(val));\n        }\n        answer.push_back(x);\n    }\n    for (int x: answer) cout <<x << ' ';\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "number theory"], "dificulty": "1700", "interactive": false}