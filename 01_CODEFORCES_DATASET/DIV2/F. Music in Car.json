{
    "link": "https://codeforces.com//contest/746/problem/F",
    "problemId": "85374",
    "problem_idx": "F",
    "shortId": "746F",
    "contest_number": "746",
    "problem_submissions": {
        "F": [
            23098160,
            23101734,
            23098656,
            23102651,
            23103415,
            23107961,
            23097485,
            23103112,
            23103543,
            23134726,
            23104852,
            23131476
        ],
        "G": [
            23093374,
            23095345,
            23096484,
            23099554,
            23094331,
            23098793,
            32644514,
            23097257,
            23097589,
            23088737,
            23098418,
            23099935,
            23101255,
            23098493,
            23095437,
            23098070,
            23097715,
            23102940,
            23099714,
            23102329,
            23100307
        ],
        "E": [
            23090983,
            23091838,
            23090400,
            23090385,
            23091224,
            23095595,
            23092637,
            23090974,
            23092694,
            23093218,
            23092131,
            23090847,
            23094473,
            23098598,
            23094014,
            23142601,
            23096689,
            23092749,
            23095909,
            23093965,
            23096216
        ],
        "C": [
            23089009,
            23086489,
            23093136,
            23087647,
            23090881,
            23086795,
            23086617,
            23094723,
            23086814,
            23087320,
            23089539,
            23108446,
            23092756,
            23088603,
            23090345,
            23087808,
            23091627
        ],
        "D": [
            23086805,
            23088293,
            23086244,
            23094627,
            23088889,
            23093685,
            23088867,
            23088313,
            23096227,
            23088723,
            23089318,
            23104824,
            23090867,
            23090879,
            23091937,
            23088754,
            23089647,
            23091296,
            23088886,
            23089358
        ],
        "B": [
            23084224,
            23084449,
            23084370,
            23084955,
            23085227,
            23087278,
            23084159,
            23084283,
            23090451,
            23083745,
            23084649,
            23085347,
            23084771,
            23089523,
            23085956,
            23085476,
            23085206,
            23084905,
            23085967
        ],
        "A": [
            23082169,
            23082385,
            23081947,
            23082691,
            23082163,
            23085385,
            23081965,
            23082429,
            23082420,
            23082009,
            23082118,
            23082810,
            23086953,
            23088467,
            23082662,
            23082884,
            23082308,
            23082652,
            23082888
        ]
    },
    "name": "F. Music in Car",
    "statement": "Sasha reaches the work by car. It takes exactly minutes. On his way he\r\nlistens to music. All songs in his playlist go one by one, after\r\nlistening to the -th song Sasha gets a pleasure which equals . The -th\r\nsong lasts for minutes. Before the beginning of his way Sasha turns on\r\nsome song and then he listens to the songs one by one: at first, the\r\nsong , then the song , then the song number , and so on. He listens to\r\nsongs until he reaches the work or until he listens to the last song in\r\nhis playlist. Sasha can listen to each song to the end or .In the second\r\ncase he listens to the song for integer number of minutes, at least half\r\nof the song\u2019s length. Formally, if the length of the song equals\r\nminutes, Sasha listens to it for no less than minutes, then he\r\nimmediately switches it to the next song (if there is such). For\r\nexample, if the length of the song which Sasha wants to listen to,\r\nequals minutes, then he should listen to it for at least minutes, if the\r\nlength of the song equals minutes, then he should listen to it for at\r\nleast minutes.It takes no time to switch a song.Sasha wants to listen no\r\nmore than songs. If the last listened song plays for less than half of\r\nits length, then Sasha doesn\u2019t get pleasure from it and that song is not\r\nincluded to the list of listened songs. It is not allowed to skip songs.\r\nA pleasure from a song does not depend on the listening mode, for the\r\n-th song this value equals .Help Sasha to choose such and no more than\r\nsongs for listening to get the maximum pleasure. Write a program to find\r\nthe maximum pleasure Sasha can get from the listening to the songs on\r\nhis way to the work.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define ld long double\n#define N ((ll)501*1000)\n#define INF ((ll)2e9)\n#define MOD ((ll)1e9+7)\nll tavan(ll x,ll y){ll res=1;while(y){res*=y%2?x:1;res%=MOD;x*=x;x%=MOD;y/=2;}return res;}\n\nll n,w,k,a[N],t[N],ans;\nmultiset <ll> s,p;\n\nint main()\n{\n    ios_base::sync_with_stdio(0);cin.tie(0);\n    cin>>n>>w>>k;\n    for(int i=0;i<n;i++)cin>>a[i];\n    for(int i=0;i<n;i++)cin>>t[i];\n    for(ll i=0,j=0,time=0,res=0;i<n;i++)\n    {\n    \twhile(j<n)\n    \t{\n    \t\tll now=time;\n    \t\tif((ll)s.size()<w)now+=(t[j]+1)/2;\n    \t\telse if(t[j]>(*s.begin()))now+=(t[j]+1)/2+((*s.begin())-((*s.begin())+1)/2);\n    \t\telse now+=t[j];\n    \t\t\n\t\t\tif(now>k)break;\n    \t\t\n    \t\tif((ll)s.size()<w)s.insert(t[j]);\n    \t\telse if(t[j]>(*s.begin()))p.insert(*s.begin()),s.erase(s.begin()),s.insert(t[j]);\n    \t\telse p.insert(t[j]);\n    \t\t\n\t\t\ttime=now;res+=a[j];j++;\n\t\t}\n\t\tans=max(ans,res);\n\t\t\n\t\tif(j<=i){j=i+1;continue;}\n\t\tres-=a[i];\n\t\tif(t[i]<*s.begin())p.erase(p.find(t[i])),time-=t[i];\n\t\telse \n\t\t{\n\t\t\ts.erase(s.find(t[i]));\n\t\t\ttime-=(t[i]+1)/2;\n\t\t\tif(p.size())\n\t\t\t{\n\t\t\t\tauto it=p.end();it--;\n\t\t\t\ts.insert(*it);\n\t\t\t\ttime-=(*it-(*it+1)/2);\n\t\t\t\tp.erase(it);\n\t\t\t}\n\t\t}\n\t}\n\tcout<<ans;\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "two pointers"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Music in Car.json",
    "editorial_link": "https://codeforces.com//blog/entry/49160",
    "editorial": "This problem can be solved with help of two pointers. We will store two\r\nsets set with songs with full time and set with songs with partly time.\r\nHow to move left and right pointers and recalculate current answer? Let\r\nleft end of the current segment is and right end of the segment is . Let\r\nthe set of songs with partly time is and with full time . In this sets\r\nwe will store pairs time of listening each song and it number.Right end\r\nwe will move in the following way: if we can add partly song and we have\r\nenough time to listen it we take it (also add this song to ) and add to\r\ntime and add to the answer . In the other case we have two cases. First\r\nwe add current song as full song, second we add current song as partly\r\nsong. Here we need to choose case with less with the total time. Also\r\nhere we need to correctly add song to sets and update total time and the\r\nanswer. If total time became more than we are not allowed to move . Now\r\nwe need to update global answer with the current value of answer.Left\r\nend we will move in the following way: if we took song as full song we\r\ndelete it from , subtract from total time length of this song. In the\r\nother case we delete it from and subtract from the total time the .\r\nAfter that we try to take some song from . If the size of is 0, we can\r\nnot do that. If we done it we need to change total time on the songs on\r\nthe current segment.\r\n"
}