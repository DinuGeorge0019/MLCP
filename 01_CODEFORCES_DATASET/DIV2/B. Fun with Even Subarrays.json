{
    "link": "https://codeforces.com//contest/1631/problem/B",
    "problemId": "1276003",
    "problem_idx": "B",
    "shortId": "1631B",
    "contest_number": "1631",
    "problem_submissions": {
        "F": [
            144209452,
            144235790,
            144244278,
            144220136,
            144245962,
            145961629,
            144259733,
            144269650
        ],
        "D": [
            144194791,
            144225252,
            144201688,
            144230474,
            144203435,
            144220058,
            144203552,
            144209046,
            144207936,
            144210282,
            144212647,
            144207429,
            144217330,
            144216217,
            144206811,
            144214985,
            144213401,
            144219446,
            144231089,
            144231916
        ],
        "E": [
            144190789,
            144201204,
            144214332,
            144232961,
            144227054,
            144208434,
            144222982,
            144216993,
            144218442,
            144221273,
            144225660,
            144224625,
            144225131,
            144219664,
            144229917,
            144231977,
            144227225,
            144219457,
            144201695
        ],
        "C": [
            144179964,
            144189456,
            144189516,
            144215627,
            144187648,
            144180182,
            144189612,
            144193307,
            144194463,
            144187270,
            144199486,
            144195809,
            144197876,
            144203729,
            144230691,
            144197772,
            144204964,
            144199522,
            144195296,
            144214390
        ],
        "B": [
            144170872,
            144177011,
            144174808,
            144176288,
            144176678,
            144177243,
            144171384,
            144176878,
            144177419,
            144171993,
            144172891,
            144174155,
            144177241,
            144177261,
            144179565,
            144182240,
            144180906,
            144179159,
            144177073,
            144204981
        ],
        "A": [
            144168895,
            144168971,
            144169136,
            144169033,
            144169966,
            144169112,
            144168711,
            144173549,
            144170320,
            144168841,
            144168910,
            144168908,
            144169573,
            144170205,
            144173130,
            144169980,
            144175969,
            144173232,
            144169253,
            144169017
        ]
    },
    "name": "B. Fun with Even Subarrays",
    "statement": "You are given an array a of n elements. You can apply the following\r\noperation to it any number of times: Select some subarray from a of even\r\nsize 2k that begins at position l (1\r\nle l\r\nle l+2\r\ncdot{k}-1\r\nle n, k\r\nge 1) and for each i between 0 and k-1 (inclusive), assign the value\r\na_{l+k+i} to a_{l+i}. For example, if a = [2, 1, 3, 4, 5, 3], then\r\nchoose l = 1 and k = 2, applying this operation the array will become a\r\n= [3, 4, 3, 4, 5, 3].Find the minimum number of operations (possibly\r\nzero) needed to make all the elements of the array equal.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int max_n = 2e5 + 5;\n\nint a[max_n];\n\nvoid solve_tc(){\n\tint n; \n\tcin >> n;\n\tfor (int i = 1; i <= n; i++){\n\t\tcin >> a[i];\n\t}\n\t\n\tint operations = 0;\n\twhile (1){\n\t\tint similar_suffix = 0;\n\t\tfor (int i = n; i >= 1; i--){\n\t\t\tif (a[i] != a[n]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsimilar_suffix = n - i + 1;\n\t\t}\n\t\tif (similar_suffix == n){\n\t\t\tbreak;\n\t\t}\n\t\tfor (int i = max(1, n - 2 * similar_suffix + 1); i <= n; i++){\n\t\t\ta[i] = a[n];\n\t\t}\n\t\toperations++;\n\t}\n\t\n\tcout << operations << \"\\n\";\n}\n\nint main(){\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\t\n\tint tests;\n\tcin >> tests;\n\twhile (tests--){\n\t\tsolve_tc();\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Fun with Even Subarrays.json",
    "editorial_link": "https://codeforces.com//blog/entry/99384",
    "editorial": "SolutionFor simplicity, let (let be reversed). The operation transforms\r\nto select a subarray of length , so , then for all such that , set . can\r\nnot be changed with the given operation. That reduces the problem to\r\nmake all elements equal to .Let be the rightmost index such that for all\r\n, holds.The problem will be solved when .If an operation is applied with\r\n, will not change and will remain the same.The largest range with is ,\r\napplying an operation to it will lead to , so will become at least and\r\nthere is not any other range that will lead to a bigger value of .If ,\r\nit is possible to apply the operation on , after applying it and all\r\nelements will become equal.The problem can now be solved by repeatedly\r\nfinding and applying the operation on or on if . Since will become at\r\nleast in each operation but the last one, the naive implementation will\r\ntake , however, it is easy to implement it in . Code O(nlogn) Code O(n)\r\n"
}