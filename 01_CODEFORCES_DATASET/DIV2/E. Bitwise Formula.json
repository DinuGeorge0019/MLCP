{
    "link": "https://codeforces.com//contest/779/problem/E",
    "problemId": "95639",
    "problem_idx": "E",
    "shortId": "779E",
    "contest_number": "779",
    "problem_submissions": {
        "E": [
            25041597,
            25042966,
            25042647,
            25042184,
            25041738,
            25044527,
            25046776,
            25043037,
            25043576,
            25044558,
            25045642,
            25044076,
            25043684,
            25042226,
            25043678,
            25045366,
            25044333
        ],
        "C": [
            25035763,
            25034520,
            25036373,
            25034120,
            25034894,
            25035381,
            25035813,
            25032607,
            25034344,
            25034774,
            25035579,
            25035162,
            25033556,
            25036921,
            25034938,
            25034865,
            25034643
        ],
        "B": [
            25034403,
            25033009,
            25035076,
            25032745,
            25033238,
            25033475,
            25034138,
            25036437,
            25032923,
            25032280,
            25033532,
            25033250,
            25032318,
            25036213,
            25033673,
            25033347,
            25032551
        ],
        "A": [
            25033465,
            25031856,
            25033923,
            25031374,
            25031707,
            25031479,
            25032790,
            25034086,
            25031239,
            25031289,
            25031285,
            25031689,
            25031337,
            25035671,
            25032432,
            25031702,
            25031272
        ],
        "D": [
            25032517,
            25037114,
            25032438,
            25036092,
            25036499,
            25037466,
            25043534,
            25038470,
            25037495,
            25037533,
            25041359,
            25039849,
            25037140,
            25038656,
            25037700,
            25037570,
            25037825
        ]
    },
    "name": "E. Bitwise Formula",
    "statement": "Bob recently read about bitwise operations used in computers: , and . He\r\nhave studied their properties and invented a new game.Initially, Bob\r\nchooses integer , bit depth of the game, which means that all numbers in\r\nthe game will consist of bits. Then he asks Peter to choose some -bit\r\nnumber. After that, Bob computes the values of variables. Each variable\r\nis assigned either a constant -bit number or result of bitwise\r\noperation. Operands of the operation may be either variables defined\r\nbefore, or the number, chosen by Peter. After that, Peter\u2019s score equals\r\nto the sum of all variable values.Bob wants to know, what number Peter\r\nneeds to choose to get the minimum possible score, and what number he\r\nneeds to choose to get the maximum possible score. In both cases, if\r\nthere are several ways to get the same score, find the minimum number,\r\nwhich he can choose.\r\n",
    "solutions": [
        "#include <stdio.h>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <map>\n#include <set>\n#include <stdlib.h>\n#include <math.h>\n#include <string>\n#include <time.h>\n#include <string.h>\n#include <queue>\n#include <stack>\n#define sz size()\n#define pb push_back\nusing namespace std;\ntypedef long long int ll;\nll mod=1e9+7;\nll exp(ll t,ll x){if(x==0) return 1;if(x==1) return t;if(x%2==1) return (t*exp((t*t)%mod,x/2))%mod;if(x%2==0) return exp((t*t)%mod,x/2);} \nll gcd(ll x,ll y){return x%y==0?y:gcd(y,x%y);}\nll lcm(ll x,ll y){return x*(y/gcd(x,y));}\nll bsum(ll u,ll b){return u<b?u:bsum(u/b,b)+u%b;}\nll prival(ll u,ll p){int cn=0;while(u%p==0){cn++;u=u/p;}return cn;}\nbool isprime(ll x){for(ll i=2;i*i<=x;i++){if(x%i==0){return false;}}return true;}\nvoid YAY(void){cout<<\"YES\"<<endl;}\nvoid NAY(void){cout<<\"NO\"<<endl;}\nstruct var{\n\tstring id;\n\tstring val;\n\tint def; //0 -> number, 1->operation\n\tint V1, V2; // 0->? or number of string thingy\n\tstring OP;\n} num[5111];\nint temp[5111];\nmap<string, int> go;\nstring mmin, mmax;\nint n, m;\n\nint getbit(int loc, int b)\n{\n\tint i;\n\tint ret=0;\n\tfor(i=1 ; i<=n ; i++)\n\t{\n\t\ttemp[i]=0;\n\t}\n\tfor(i=1 ; i<=n ; i++)\n\t{\n\t\tif(num[i].def==0)\n\t\t{\n\t\t\tret+=num[i].val[loc]-'0';\n\t\t\ttemp[i]=num[i].val[loc]-'0';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint u, v;\n\t\t\tif(num[i].V1==0)\n\t\t\t{\n\t\t\t\tu=b;\n\t\t\t}\n\t\t\telse if(num[i].V1!=0)\n\t\t\t{\n\t\t\t\tu=temp[num[i].V1];\n\t\t\t}\n\t\t\tif(num[i].V2==0)\n\t\t\t{\n\t\t\t\tv=b;\n\t\t\t}\n\t\t\telse if(num[i].V2!=0)\n\t\t\t{\n\t\t\t\tv=temp[num[i].V2];\n\t\t\t}\n\t\t\tif(num[i].OP==\"XOR\")\n\t\t\t{\n\t\t\t\tret+=u^v;\n\t\t\t\ttemp[i]=u^v;\n\t\t\t}\n\t\t\telse if(num[i].OP==\"OR\")\n\t\t\t{\n\t\t\t\tret+=u|v;\n\t\t\t\ttemp[i]=u|v;\n\t\t\t}\n\t\t\telse if(num[i].OP==\"AND\")\n\t\t\t{\n\t\t\t\tret+=u&v;\n\t\t\t\ttemp[i]=u&v;\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=1 ; i<=n ; i++)\n\t{\n\t\ttemp[i]=0;\n\t}\n\treturn ret;\n}\n\nint main(void)\n{\n\tint i, j;\n\tcin>>n>>m;\n\tfor(i=1 ; i<=n ; i++)\n\t{\n\t\tstring s, trash, num1;\n\t\tcin>>s>>trash>>num1;\n\t\tgo[s]=i;\n\t\tnum[i].id=s;\n\t\tif(num1[0]=='0' || num1[0]=='1')\n\t\t{\n\t\t\tnum[i].def=0;\n\t\t\tnum[i].val=num1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnum[i].def=1;\n\t\t\tif(num1[0]=='?')\n\t\t\t{\n\t\t\t\tnum[i].V1=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnum[i].V1=go[num1];\n\t\t\t}\n\t\t\tstring op, num2;\n\t\t\tcin>>op>>num2;\n\t\t\tnum[i].OP=op;\n\t\t\tif(num2[0]=='?')\n\t\t\t{\n\t\t\t\tnum[i].V2=0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnum[i].V2=go[num2];\n\t\t\t}\n\t\t} \n\t}\n\tfor(i=0 ; i<=m-1 ; i++)\n\t{\n\t\tint X=getbit(i,0);\n\t\tint Y=getbit(i,1);\n\t\tif(X>Y)\n\t\t{\n\t\t\tmmin.push_back('1');\n\t\t\tmmax.push_back('0');\n\t\t}\n\t\telse if(X<Y)\n\t\t{\n\t\t\tmmin.push_back('0');\n\t\t\tmmax.push_back('1');\n\t\t}\n\t\telse if(X==Y)\n\t\t{\n\t\t\tmmin.push_back('0');\n\t\t\tmmax.push_back('0');\n\t\t}\n\t\t\n\t}\n\tcout<<mmin<<endl<<mmax;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "expression parsing",
        "greedy"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Bitwise Formula.json",
    "editorial_link": "https://codeforces.com//blog/entry/50724",
    "editorial": "Note that changing i-th bit of chosen number doesn't change any bits of any of the variables other than i-th one. Also note that the total number of values is greater, as more variables have 1 at i-th position.\n\nLet's solve for every bit independently: learn, what is the value of i-th bit of chosen number. We can try both values and simulate the given program. Choose one of the values that makes more variables to have 1 at i-th position. If both 0 and 1 give equal number of variables to have 1 at i-th position, choose 0."
}