{"link": "https://codeforces.com//contest/231/problem/C", "problemId": "1908", "problem_idx": "C", "shortId": "231C", "contest_number": "231", "problem_submissions": {"E": [2315623, 2318030, 2317938, 2318674, 2318779, 2317611, 2320585, 2319865, 2321228, 2699180], "B": [2314265, 2313607, 2314034, 2314278, 2314068, 2314153, 2313828, 2314473, 2314118, 2313793, 2314083, 2313846, 2315002, 2315695, 2314096, 2316200, 2314037, 2313902], "C": [2313829, 2314125, 2314733, 2315243, 2315319, 2313875, 2315066, 2315078, 2314341, 2315041, 2314618, 2314471, 2313703, 2314701, 2313945, 2315683, 2314609], "A": [2312031, 2312037, 2312506, 2312986, 2312060, 2312377, 2312848, 2312030, 2312702, 2312166, 2312096, 2312665, 2315132, 2312576, 2312184, 2312109, 2312683, 2312307], "D": [2315039, 2315337, 2315944, 2316047, 2314614, 2314405, 2315592, 2316024, 2314917, 2314554, 2314992, 2313590, 2314889, 2315003, 2314692, 2314435, 2315454]}, "name": "C. To Add or Not to Add", "statement": "A piece of paper contains an array of integers . Your task is to find a\r\nnumber that occurs the maximum number of times in this array.However,\r\nbefore looking for such number, you are allowed to perform not more than\r\nfollowing operations choose an arbitrary element from the array and add\r\nto it. In other words, you are allowed to increase some array element by\r\nno more than times (you are allowed to increase the same element of the\r\narray multiple times).Your task is to find the maximum number of\r\noccurrences of some number in the array after performing no more than\r\nallowed operations. If there are several such numbers, your task is to\r\nfind the minimum one.\r\n", "solutions": ["#include<vector> \n#include<list> \n#include<map> \n#include<set> \n#include<deque> \n#include<queue> \n#include<stack> \n#include<bitset> \n#include<algorithm> \n#include<functional> \n#include<numeric> \n#include<utility> \n#include<iostream> \n#include<sstream> \n#include<iomanip> \n#include<cmath> \n#include<cstdlib> \n#include<cctype> \n#include<string> \n#include<cstring> \n#include<cstdio> \n#include<ctime> \n#include<climits> \n#include<complex> \n#define sz(x) (int)((x).size()) \n#define rep(i,n) for (int i=0;i<n;i++) \n#define mp make_pair \n#define pb push_back\n#define fi first\n#define se second \n#define all(x) x.begin(),x.end() \n#define clr(x) memset((x),0,sizeof(x)) \n#define foreach(e,x) for(__typeof(x.begin()) e=x.begin();e!=x.end();++e) \nusing namespace std; \nconst double eps=1e-8; \nconst double pi=acos(-1.0); \nint dblcmp(double d){if (fabs(d)<eps)return 0;return d>eps?1:-1;} \ntypedef long long ll; \ntypedef vector<int> vi; \ntypedef vector<ll> vl; \ntypedef vector<string> vs; \ntypedef pair<int,int> pii; \ntypedef vector<pii> vpi; \nint n;\nll d,a[111111],sum[111111];\nint main()\n{\n    int i,j,k;\n    cin>>n>>d;\n    ll s=0;a[0]=sum[0]=0;\n    for (i=1;i<=n;i++)\n    {\n        cin>>a[i];sum[i]=a[i]+sum[i-1];\n    }\n    sort(a+1,a+n+1);\n    for (i=1;i<=n;i++)\n    {\n        sum[i]=a[i]+sum[i-1];\n    }\n    int x=1;\n    for (i=1;i<=n;i++)\n    {\n        int low=1,high=i,mid,ans=-1;\n        while (low<=high)\n        {\n            mid=(low+high)>>1;\n            //[mid,i]\n            ll c=(i-mid+1LL)*a[i]-(sum[i]-sum[mid-1]);\n            if (c<=d)\n            {\n                high=mid-1;\n                ans=mid;\n            }\n            else \n            {\n                low=mid+1;\n            }\n        }//if (a[i]==3)printf(\"%I64d\\n\",sum[3]-sum[0]);\n        if (ans==-1)\n        {\n            ans=1;\n        }\n        else \n        {\n            ans=i-ans+1;\n        }\n        \n        x=max(x,ans);\n    }\n    printf(\"%d \",x);\n    for (i=1;i<=n;i++)\n    {\n        int low=1,high=i,mid,ans=-1;\n        while (low<=high)\n        {\n            mid=(low+high)>>1;\n            //[mid,i]\n            ll c=(i-mid+1LL)*a[i]-(sum[i]-sum[mid-1]);\n            if (c<=d)\n            {\n                high=mid-1;\n                ans=mid;\n            }\n            else \n            {\n                low=mid+1;\n            }\n        }\n        if (ans==-1)\n        {\n            ans=1;\n        }\n        else \n        {\n            ans=i-ans+1;\n        }\n        if (ans==x)\n        {\n            printf(\"%d\\n\",(int)a[i]);\n            return 0;\n        }\n    }\n    return 0;\n}\n        "], "input": "", "output": "", "tags": ["binary search", "sortings", "two pointers"], "dificulty": "1600", "interactive": false}