{
    "link": "https://codeforces.com//contest/1691/problem/B",
    "problemId": "1416258",
    "problem_idx": "B",
    "shortId": "1691B",
    "contest_number": "1691",
    "problem_submissions": {
        "F": [
            159037796,
            159004862,
            159045351,
            159041486,
            159074626,
            159060003,
            159067904,
            159020729,
            159065774,
            159064237,
            159068264,
            159063969,
            159078050,
            159063182,
            159071648,
            159076943,
            159063472,
            159076016,
            159077857
        ],
        "B": [
            159027507,
            159038230,
            158993583,
            158988023,
            158992996,
            158994717,
            158998069,
            158998926,
            158995615,
            158994699,
            158990804,
            158993808,
            158998565,
            158999263,
            158993130,
            158999935,
            158995666,
            158999458,
            158995141
        ],
        "C": [
            159022549,
            159035573,
            159003255,
            159002225,
            159000529,
            159011268,
            159008002,
            159028212,
            159004618,
            159012184,
            158998251,
            159004574,
            159008883,
            159022667,
            159090832,
            159011554,
            159006572,
            159005346,
            159010957,
            159006486
        ],
        "D": [
            159013958,
            159031555,
            159015433,
            159028094,
            159016632,
            159019611,
            159021146,
            159042470,
            159021759,
            159030292,
            159022623,
            159025372,
            159146607,
            159023715,
            159047830,
            159026170,
            159023572,
            159028563,
            159187233,
            159031404,
            159022310
        ],
        "E": [
            159000396,
            159018557,
            159029594,
            159057177,
            159032015,
            159039937,
            159038189,
            159062074,
            159045617,
            159045245,
            159054013,
            159039162,
            209514948,
            209514832,
            209514807,
            159105644,
            159105615,
            159105572,
            159105377,
            159104884,
            159097312,
            159096514,
            159095571,
            159042066,
            159035791,
            159048242,
            159046117,
            159052677,
            159191233,
            159190974,
            159179554,
            159054650,
            159057264
        ],
        "A": [
            158985679,
            159039068,
            158986800,
            158984482,
            158984538,
            158986015,
            158985132,
            158992280,
            158986339,
            158985193,
            158984622,
            158989832,
            158990669,
            158984543,
            158985817,
            158988085,
            158998809,
            158987967
        ]
    },
    "name": "B. Shoe Shuffling",
    "statement": "A class of students got bored wearing the same pair of shoes every day,\r\nso they decided to shuffle their shoes among themselves. In this\r\nproblem, a pair of shoes is inseparable and is considered as a single\r\nobject.There are n students in the class, and you are given an array s\r\nin order, where s_i is the shoe size of the i-th student. A shuffling of\r\nshoes is valid only if and if every student gets shoes of size their\r\nsize. You have to output a permutation p of\r\n{1,2,\r\nldots,n\r\n} denoting a valid shuffling of shoes, where the i-th student gets the\r\nshoes of the p_i-th student (p_i\r\nne i). And output -1 if a valid shuffling does not exist.A permutation\r\nis an array consisting of n distinct integers from 1 to n in arbitrary\r\norder. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a\r\npermutation (2 appears twice in the array) and [1,3,4] is also not a\r\npermutation (n=3 but there is 4 in the array).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define eb emplace_back\n#define ep emplace\n#define fi first\n#define se second\n#define in read<int>()\n#define lin read<ll>()\n#define rep(i, x, y) for(int i = (x); i <= (y); i++)\n#define per(i, x, y) for(int i = (x); i >= (y); i--)\n\nusing namespace std;\n\nusing ll = long long;\nusing db = double;\nusing pii = pair < int, int >;\nusing vec = vector < int >;\nusing veg = vector < pii >;\n\ntemplate < typename T > T read() {\n\tT x = 0; bool f = 0; char ch = getchar();\n\twhile(!isdigit(ch)) f |= ch == '-', ch = getchar();\n\twhile(isdigit(ch)) x = x * 10 + (ch ^ 48), ch = getchar();\n\treturn f ? -x : x;\n}\n\ntemplate < typename T > void chkmax(T &x, const T &y) { x = x > y ? x : y; }\ntemplate < typename T > void chkmin(T &x, const T &y) { x = x < y ? x : y; }\n\nconst int N = 1e6 + 10;\n\nint n, s[N], p[N];\n\nvoid solve() {\n\tn = in; rep(i, 1, n) s[i] = in;\n\trep(i, 1, n) p[i] = i;\n\tfor(int l = 1, r; l <= n; l = r) {\n\t\tr = l; while(r <= n && s[r] == s[l]) r++;\n\t\tif(r != l + 1) {\n\t\t\trep(j, l, r - 1) p[j] = j + 1;\n\t\t\tp[r - 1] = l;\n\t\t} else return puts(\"-1\"), void();\n\t}\n\trep(i, 1, n) printf(\"%d \", p[i]); puts(\"\");\n}\n\nint main() {\n#ifdef YJR_2333_TEST\n\tfreopen(\"1.in\", \"r\", stdin);\n#endif\n\tfor(int T = in; T; T--) solve(); return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "implementation",
        "two pointers"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Shoe Shuffling.json",
    "editorial_link": "https://codeforces.com//blog/entry/103212",
    "editorial": "We can observe that the number of pairs of shoes greater than their size\r\nis limited for any student. So if student wears shoes that are greater\r\nthan their size, then some student who has a size greater than student\r\nwill compromise their size. So say a valid shuffling exists where a\r\nstudent gets shoes of size greater than their own, i.e., student got\r\nshoes of student where . Then, for all pairs of shoes of size , one pair\r\nwill go to a student whose size is smaller than . This chain will\r\ncontinue until a student with shoe size gets a pair of shoes greater\r\nthan theirs, and then there will exist a pair of shoes of size that no\r\nstudent can wear. Thus, if a valid shuffling, every student must get\r\nshoes of the same size as their own.Hence, a valid shuffling exists if\r\nmore than one student has the same size shoes for all shoe sizes. A\r\nvalid shuffling can be generated by rearranging studentsâ shoes with the\r\nsame shoe size such that no one gets their shoes. This can be done in\r\nmultiple ways, for example, cyclic rotation.\r\n",
    "hint": [
        "Hint 1 What happens to other people when a person receives a shoe greater his size?",
        "Hint 2 What happens when a person has a unique shoe size?"
    ]
}