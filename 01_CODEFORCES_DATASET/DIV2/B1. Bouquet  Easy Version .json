{
    "link": "https://codeforces.com//contest/1995/problem/B1",
    "problemId": "2772825",
    "problem_idx": "B1",
    "shortId": "1995B1",
    "contest_number": "1995",
    "problem_submissions": {
        "D": [
            272131872,
            272130569,
            272133863,
            272134415,
            272137449,
            272131543,
            272154573,
            272151706,
            272151276,
            272141813,
            272139057,
            272151246,
            272151986,
            272153217,
            272157571,
            272148679,
            272149814,
            272486180,
            272157625
        ],
        "C": [
            272114157,
            272113319,
            272111654,
            272121111,
            272111819,
            272119019,
            272113803,
            272118860,
            272116736,
            272123439,
            272121989,
            272122933,
            272112629,
            272120005,
            272111612,
            272116249,
            272108377,
            272486053,
            272120187
        ],
        "B2": [
            272102449,
            272103267,
            272100652,
            272099671,
            272128930,
            272108225,
            272104913,
            272104116,
            272101309,
            272106328,
            272112408,
            272104562,
            272129604,
            272109901,
            272102807,
            272107257,
            272115397,
            272485973,
            272104395
        ],
        "B1": [
            272096864,
            272101887,
            272104047,
            272103720,
            272094726,
            272108617,
            272105391,
            272104979,
            272103341,
            272103459,
            272111706,
            272103650,
            272098283,
            272103066,
            272101216,
            272107954,
            272116416,
            272485941,
            272098022
        ],
        "A": [
            272090620,
            272090574,
            272092410,
            272090882,
            272090527,
            272090716,
            272091404,
            272090846,
            272090748,
            272091332,
            272090661,
            272091173,
            272091300,
            272090978,
            272091057,
            272091479,
            272092003,
            272485907,
            272092660
        ],
        "E1": [
            272173791,
            272497229,
            272245140
        ],
        "E2": [
            272497185,
            272274307
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/131851",
    "editorial": "SolutionFirst, we can aggregate number of flowers with petals into (for\r\nexample, sort the array and then create array of pairs , where is the\r\nlength of segment with elements equal to ). Note that . Also note that\r\nfor every we won\u00e2\u0080\u0099t need more than flowers (otherwise total number of\r\npetals will exceed ).Then we iterate through all . Suppose that we want\r\nto assemble a bouquet with petals. We can bruteforce the amount of\r\nflowers with petals in . If we have flowers with petals, we already have\r\npetals. There are still coins which we can spend for flowers with\r\npetals. There are at most flowers with petal we can buy. So we need to\r\nfind maximum over all such . Total complexity is for finding the maximum\r\nand for sorting.\r\n",
    "name": "B1. Bouquet  Easy Version ",
    "statement": "A girl is preparing for her birthday and wants to buy the most beautiful\r\nbouquet. There are a total of n flowers in the store, each of which is\r\ncharacterized by the number of petals, and a flower with k petals costs\r\nk coins. The girl has decided that the difference in the number of\r\npetals between any two flowers she will use in her bouquet should not\r\nexceed one. At the same time, the girl wants to assemble a bouquet with\r\nthe maximum possible number of petals. Unfortunately, she only has m\r\ncoins, and she cannot spend more. What is the maximum total number of\r\npetals she can assemble in the bouquet?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#include <ext/pb_ds/assoc_container.hpp>#include <ext/pb_ds/trie_policy.hpp>using namespace std;using namespace __gnu_pbds;typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;#ifndef ONLINE_JUDGE    #include \"debug.h\"#else    #define dbg(...) 42    template<typename T>ostream&operator<<(ostream&os,vector<T>&vec){for(signed i=0;i+1<vec.size();++i){os<<vec[i]<<\" \";}if(vec.size()>0)os<<vec.back();return os;}#endif\u00a0#define all(x) x.begin(), x.end()#define rall(x) x.rbegin(), x.rend()\u00a0template<typename T>istream&operator>>(istream&is,vector<T>&vec){for(T&element:vec){is>>element;}return is;}template<typename T>void chmin(T&x,T y){x=min(x,y);}template<typename T>void chmax(T&x,T y){x=max(x,y);}\u00a0#define int int64_t\u00a0void test_case(signed ___) {    int64_t n, m;    cin >> n >> m;    vector<int> ar(n);    cin >> ar;\u00a0    sort(all(ar));\u00a0    map<int64_t, int64_t> mp;    for (int i : ar) mp[i]++;\u00a0    int64_t res = 0;\u00a0    for (auto [x, y] : mp) {        int64_t can_buy_first = min(y, m/x);        int64_t nxt = x+1;        int64_t can_buy_second = 0;        if (mp.count(nxt)) {            can_buy_second = mp[x+1];        }        for (int buy1 = 0; buy1 <= can_buy_first; ++buy1) {            int64_t buy2 = (m-buy1*x)/(x+1);            buy2 = min(buy2, can_buy_second);            res = max(res, x*buy1+(x+1)*buy2);        }    }    cout << res << \"\\n\";}\u00a0signed main(void) {    cin.tie(0)->sync_with_stdio(false);\u00a0    signed tt = 1;    cin >> tt;    while (tt--)     test_case(69420);}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "greedy",
        "sortings",
        "two pointers"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B1. Bouquet  Easy Version .json"
}