{
    "link": "https://codeforces.com//contest/1567/problem/B",
    "problemId": "1099174",
    "problem_idx": "B",
    "shortId": "1567B",
    "contest_number": "1567",
    "problem_submissions": {
        "C": [
            127974564,
            127939959,
            127954581,
            127964000,
            127952919,
            127944623,
            127939332,
            127964327,
            127943124,
            127968891,
            127947814,
            127940553,
            127945813,
            127964268,
            127942609,
            127947600,
            127945820,
            127938032,
            127948426,
            127964716
        ],
        "A": [
            127964852,
            127922278,
            127932015,
            127955526,
            127943035,
            127922628,
            127923688,
            127926840,
            127922694,
            127925712,
            127924423,
            127923731,
            127922858,
            127922205,
            127926705,
            127927113,
            127928956,
            127922373,
            127923105,
            127922692
        ],
        "B": [
            127964231,
            127928229,
            127928104,
            127960707,
            127944459,
            127929761,
            127931746,
            127932290,
            127933652,
            127938027,
            127928958,
            127942519,
            127932981,
            127927891,
            127934499,
            127937493,
            127935529,
            127926955,
            127935971,
            127930754
        ],
        "D": [
            127962995,
            127955193,
            127945755,
            127969042,
            127959015,
            127952114,
            127951882,
            127957740,
            127965163,
            127957338,
            127967067,
            128042803,
            127957487,
            127961796,
            127954276,
            127956523,
            127952133,
            127952975,
            127957557,
            127953745
        ],
        "E": [
            127956967,
            127950306,
            127967160,
            127953453,
            128966040,
            127974173,
            128003977,
            127960229,
            127963530,
            127951320,
            127958948,
            128021683,
            127976249,
            127963411,
            127950253,
            128042735,
            127964337,
            127947637,
            127967826,
            127965391,
            128541587,
            127968997,
            127966309,
            127964418,
            127961161
        ],
        "F": [
            127951988,
            127980467,
            127976901,
            127981608,
            127980938,
            128003888,
            128003811,
            128049440,
            127960253,
            128042163
        ]
    },
    "name": "B. MEXor Mixup",
    "statement": "Alice gave Bob two integers a and b (a > 0 and b\r\nge 0). Being a curious boy, Bob wrote down an array of integers with\r\noperatorname{MEX} value of all elements equal to a and\r\noperatorname{XOR} value of all elements equal to b.What is the possible\r\nlength of the array Bob wrote?Recall that the\r\noperatorname{MEX} (Minimum EXcluded) of an array is the minimum\r\nnon-negative integer that does belong to the array and the\r\noperatorname{XOR} of an array is the bitwise XOR of all the elements of\r\nthe array.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint a, b, x[333333];\nvoid solve() {\n\tscanf(\"%d%d\", &a, &b);\n\tif (x[a - 1] == b) {\n\t\tprintf(\"%d\\n\", a);\n\t} else if (x[a] != b) {\n\t\tprintf(\"%d\\n\", a + 1);\n\t} else {\n\t\tprintf(\"%d\\n\", a + 2);\n\t}\n}\n\nint main() {\n\tfor (int i = 1; i <= 300000; i++) x[i] = x[i - 1] ^ i;\n\tint T;\n\tscanf(\"%d\", &T);\n\tfor (int i = 0; i < T; i++) solve();\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "greedy"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. MEXor Mixup.json",
    "editorial_link": "https://codeforces.com//blog/entry/94581",
    "editorial": "First consider the MEX condition: the shortest array with MEX is the\r\narray , which has length . Now we\u00e2\u0080\u0099ll consider the XOR condition. Let the\r\nXOR of the array be . We have three cases.Case 1: . Then we don\u00e2\u0080\u0099t need\r\nto add any elements to the array, so the answer is .Case 2: and . Then\r\nwe can add the element to the array since , so the MEX will still be .\r\nThe XOR of the array will then be . The answer is .Case 3: and . Then we\r\ncannot add the element to the end of the array. We can just add and , so\r\nthe XOR of the array will be . The answer is .Time complexity:\r\nprecomputation and per test case if you precalculate the XOR of the\r\nnumbers from to , or if you use the well-known formula for it.\r\n"
}