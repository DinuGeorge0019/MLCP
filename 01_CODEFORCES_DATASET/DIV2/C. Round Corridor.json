{
    "link": "https://codeforces.com//contest/1200/problem/C",
    "problemId": "387083",
    "problem_idx": "C",
    "shortId": "1200C",
    "contest_number": "1200",
    "problem_submissions": {
        "F": [
            58597034,
            58604274,
            58603801,
            58604261,
            58606296,
            58609347,
            58606628,
            58603882,
            58611421,
            58614224,
            58612143,
            58659085,
            58617947,
            58615235,
            58614922,
            58618563,
            58618410,
            58819839,
            58819733,
            58614658,
            58617967,
            58616220,
            58617480
        ],
        "E": [
            58590453,
            58591974,
            58589669,
            58582754,
            58593262,
            58593765,
            58594950,
            58609042,
            58590807,
            58600501,
            58598133,
            58655621,
            58603439,
            58602117,
            58595933,
            58604924,
            58702004,
            58608728,
            58607700,
            58606886,
            58608547,
            58595823
        ],
        "D": [
            58585183,
            58587196,
            58595741,
            58592331,
            58597422,
            58600351,
            58598831,
            58588698,
            58604146,
            58596632,
            58604059,
            58594391,
            58596161,
            58605981,
            58592911,
            58594958,
            58601895,
            58602011,
            58595454,
            58607933
        ],
        "C": [
            58581348,
            58578761,
            58581508,
            58598446,
            58584753,
            58585227,
            58584309,
            58590893,
            58582665,
            58580776,
            58585592,
            58580638,
            58583883,
            58586342,
            58585762,
            58586591,
            58578435,
            58584027,
            58584223,
            58583648
        ],
        "B": [
            58580222,
            58581800,
            58579349,
            58596443,
            58582220,
            58582093,
            58584008,
            58593306,
            58580382,
            58578318,
            58581197,
            58578343,
            58580875,
            58583711,
            58582188,
            58581441,
            58581810,
            58580259,
            58599702,
            58580893
        ],
        "A": [
            58576391,
            58576584,
            58577266,
            58594056,
            58576879,
            58576717,
            58577509,
            58578116,
            58576412,
            58576423,
            58577739,
            58576429,
            58576681,
            58580309,
            58578442,
            58576553,
            58583309,
            58576504,
            58576736,
            58576406
        ]
    },
    "name": "C. Round Corridor",
    "statement": "Amugae is in a very large round corridor. The corridor consists of two\r\nareas. The inner area is equally divided by n sectors, and the outer\r\narea is equally divided by m sectors. A wall exists between each pair of\r\nsectors of same area (inner or outer), but there is no wall between the\r\ninner area and the outer area. A wall always exists at the 12 o\u2019clock\r\nposition. The inner area\u2019s sectors are denoted as (1,1), (1,2),\r\ndots, (1,n) in clockwise direction. The outer area\u2019s sectors are denoted\r\nas (2,1), (2,2),\r\ndots, (2,m) in the same manner. For a clear understanding, see the\r\nexample image above.Amugae wants to know if he can move from one sector\r\nto another sector. He has q questions.For each question, check if he can\r\nmove between two given sectors.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\t\n\tlong long n, m;\n\tint q;\n\tcin >> n >> m >> q;\n\tlong long g=__gcd(n, m);\n\twhile(q--) {\n\t\tlong long sx, sy, ex, ey;\n\t\tcin >> sx >> sy >> ex >> ey;\n\t\t--sy, --ey;\n\t\tif(sx==1)\n\t\t\tsy/=(n/g);\n\t\telse\n\t\t\tsy/=(m/g);\n\t\tif(ex==1)\n\t\t\tey/=(n/g);\n\t\telse\n\t\t\tey/=(m/g);\n\t\tcout << (sy==ey?\"YES\":\"NO\") << \"\\n\";\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "number theory"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Round Corridor.json",
    "editorial_link": "https://codeforces.com/blog/entry/69035",
    "editorial": "Denote the corridor\u00e2\u0080\u0099s length as . Then, there is a wall at . For some\r\nvalue , If there are walls at and at the same time, we can\u00e2\u0080\u0099t move from\r\nto for and . Let\u00e2\u0080\u0099s call them a \"dual wall.\"Suppose . Then dual walls\r\nexist at . So we can make groups. We can move freely in the same group,\r\nand we can\u00e2\u0080\u0099t move from one group to another group.For , belong to group\r\n, and belong to group , and so on. For , belong to group , and belong to\r\ngroup , and so on.For each query, print YES if and belong to the same\r\ngroup. Otherwise, print NO.time complexity:\r\n"
}