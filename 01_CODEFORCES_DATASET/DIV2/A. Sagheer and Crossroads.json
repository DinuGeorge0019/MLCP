{
    "link": "https://codeforces.com//contest/812/problem/A",
    "problemId": "108002",
    "problem_idx": "A",
    "shortId": "812A",
    "contest_number": "812",
    "problem_submissions": {
        "E": [
            27494142,
            27491477,
            27493766,
            27515655,
            27496725,
            27495067,
            27497471,
            27496279,
            27497446,
            27497581,
            27499309,
            27499707,
            27489928,
            27498644,
            27502197,
            27500634,
            27499517,
            27499414,
            27502641,
            27500094,
            27500259
        ],
        "B": [
            27491993,
            27495156,
            27497709,
            27512953,
            27489354,
            27496857,
            27494139,
            27493311,
            27490608,
            27494150,
            27488730,
            27492610,
            27500920,
            27493253,
            27490411,
            27496233,
            27491317,
            27491574,
            27492471,
            27492075,
            27490349
        ],
        "C": [
            27490421,
            27492136,
            27488817,
            27489120,
            27487355,
            27489159,
            27489035,
            27492785,
            27488367,
            27489931,
            27490104,
            27498191,
            27489300,
            27492185,
            27489814,
            27490763,
            27493690,
            27489337,
            27493758,
            27491206
        ],
        "A": [
            27487305,
            27493249,
            27495525,
            27491891,
            27490175,
            27487261,
            27487056,
            27487516,
            27499547,
            27493817,
            27487154,
            27503033,
            27487455,
            27486987,
            27488643,
            27487109,
            27486628,
            27487274,
            27487808,
            27486790
        ],
        "D": [
            27503386,
            27512794,
            27534240,
            27564141,
            27521512
        ]
    },
    "name": "A. Sagheer and Crossroads",
    "statement": "Sagheer is walking in the street when he comes to an intersection of two\r\nroads. Each road can be represented as two parts where each part has\r\nlanes getting into the intersection (one for each direction) and lanes\r\ngetting out of the intersection, so we have parts in total. Each part\r\nhas lights, one for each lane getting into the intersection ( left,\r\nstraight, right) and a light for a pedestrian crossing. An accident is\r\npossible if a car can hit a pedestrian. This can happen if the light of\r\na pedestrian crossing of some part and the light of a lane that can get\r\nto or from that same part are green at the same time.Now, Sagheer is\r\nmonitoring the configuration of the traffic lights. Your task is to help\r\nhim detect whether an accident is possible.\r\n",
    "solutions": [
        "#include <algorithm>\n#include <bitset>\n#include <cassert>\n#include <complex>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <iomanip>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <string>\n#if __cplusplus >= 201103L\n#include <unordered_map>\n#include <unordered_set>\n#endif\n#include <vector>\n#define pb push_back\n#define mp make_pair\n#define fst first\n#define snd second\n#define FOR(i,a,b) for(int i=a;i<(b);i++)\n#define FORN(i,b) for(int i=0;i<(b);i++)\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> ii;\ntypedef vector<int> vi;\ntypedef vector<pair<int,int> > vii;\n\nint l[4],r[4],s[4],p[4];\n\nint main(){\n\tFORN(i,4)scanf(\"%d%d%d%d\",l+i,s+i,r+i,p+i);\n\tbool a=false;\n\tFORN(i,4){\n\t\tint i0=(i+3)%4;\n\t\tint i1=(i+1)%4;\n\t\tif(p[i]&&(l[i]||r[i]||s[i]||r[i0]||l[i1]||s[(i+2)%4]))a=true;\n\t}\n\tputs(a?\"YES\":\"NO\");\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Sagheer and Crossroads.json",
    "editorial_link": "https://codeforces.com//blog/entry/52318",
    "editorial": "For pedestrian crossing (, lanes are the only lanes that can cross it.\r\nSo, we have to check that either or all mentioned lanes are .\r\nComplexity: Implementation\r\n",
    "hint": []
}