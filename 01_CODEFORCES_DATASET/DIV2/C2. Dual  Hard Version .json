{"link": "https://codeforces.com//contest/1855/problem/C2", "problemId": "2119327", "problem_idx": "C2", "shortId": "1855C2", "contest_number": "1855", "problem_submissions": {"D": [216333466, 216282930, 216304321, 216288702, 216315573, 216283245, 216277730, 216313898, 216306202, 216314199, 216313213, 216292626, 216312027, 216805668, 216805337, 216315274, 216317158, 216319074, 216320064, 216332564, 216313414], "C1": [216327527, 216265798, 216278749, 216252157, 216263595, 216261550, 216296642, 216259910, 216265017, 216265900, 216266262, 216246799, 216254795, 216264575, 216271415, 216266184, 216256689, 216266334, 216273339, 216281116], "C2": [216327433, 216333169, 216278334, 216276389, 216290961, 216261266, 216308671, 216288782, 216279381, 216300131, 216292122, 216299685, 216284770, 216286877, 216294260, 216296589, 216302878, 216296848, 216273167, 216291700], "B": [216319187, 216239575, 216251320, 216239516, 216251539, 216242319, 216247221, 216244993, 216252246, 216251732, 216255891, 216249364, 216243332, 216244237, 216260716, 216245518, 216240380, 216281460, 216248098, 216245806], "A": [216318294, 216235675, 216247364, 216235951, 216238094, 216238019, 216237152, 216237362, 216248778, 216237335, 216241402, 216238578, 216237824, 216238112, 216254438, 216237599, 216236030, 216240134, 216239210, 216238506], "E": [216307488, 216320937, 216323420, 216339638, 216487251, 216321175, 216593212, 216352369], "F": [216295921, 216331597, 216627506]}, "name": "C2. Dual  Hard Version ", "statement": "You are given an array a_1, a_2,\r\ndots, a_n of integers (positive, negative or 0). You can perform\r\nmultiple operations on the array (possibly 0 operations).In one\r\noperation, you choose i, j (1\r\nleq i, j\r\nleq n, they can be equal) and set a_i := a_i + a_j (i.e., add a_j to\r\na_i).Make the array non-decreasing (i.e., a_i\r\nleq a_{i+1} for 1\r\nleq i\r\nleq n-1) in at most 31 operations. You do not need to minimize the\r\nnumber of operations.\r\n", "solutions": ["#pragma GCC optimize(3)\n// #pragma GCC optimize(\"trapv\")\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\n \n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define all(x) begin(x), end(x)\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\nconst int N=200007;\nconst int INF=1e9;\nconst int mod=1e9+7;\nconst double pi=acos(-1);\nmt19937_64 rng(time(NULL));\n \nint n;\nint a[N];\nint sum[N];\nsigned main(){\n  ios::sync_with_stdio(false);\n  cin.tie(0), cout.tie(0);\n  int _;\n  cin>>_;\n  while (_--){\n    int n;\n    cin>>n;\n    vector<pii> ans;\n    for (int i=0;i<n;++i) cin>>a[i];\n    int cnt_pos=0,cnt_neg=0;\n    for (int i=0;i<n;++i){\n      if (a[i]>0) cnt_pos++;\n      if (a[i]<0) cnt_neg++;\n    }\n    auto ou=[&](vector<pii> &lst){\n      cout<<sz(lst)<<\"\\n\";\n      for (auto c:lst) cout<<c.first+1<<\" \"<<c.second+1<<\"\\n\";\n    };\n    if (cnt_pos>12){\n      int idx=-1;\n      for (int i=0;i<n;++i){\n        if (a[i]>0) idx=i;\n      }\n      for (int i=0;i<5;++i) ans.push_back({idx,idx});\n      for (int i=0;i<n;++i){\n        if (a[i]<0) ans.push_back({i,idx});\n      }\n      for (int i=0;i<n-1;++i) ans.push_back({i+1,i});\n      ou(ans);\n      continue;\n    }\n    if (cnt_neg>12){\n      int idx=-1;\n      for (int i=0;i<n;++i){\n        if (a[i]<0) idx=i;\n      }\n      for (int i=0;i<5;++i) ans.push_back({idx,idx});\n      for (int i=0;i<n;++i){\n        if (a[i]>0) ans.push_back({i,idx});\n      }\n      for (int i=n-2;i>-1;--i) ans.push_back({i,i+1});\n      ou(ans);\n      continue;\n    }\n    int idx=-1;\n    for (int i=0;i<n;++i){\n      if (idx==-1||abs(a[i])>abs(a[idx])) idx=i;\n    }\n    if (a[idx]<0){\n      for (int i=0;i<n;++i){\n        if (a[i]>0) ans.push_back({i,idx});\n      }\n      for (int i=n-2;i>-1;--i) ans.push_back({i,i+1});\n      ou(ans);\n    }\n    else{\n      for (int i=0;i<n;++i){\n        if (a[i]<0) ans.push_back({i,idx});\n      }\n      for (int i=0;i<n-1;++i) ans.push_back({i+1,i});\n      ou(ans);\n    }\n  }\n}  "], "input": "", "output": "", "tags": ["constructive algorithms", "math"], "dificulty": "1900", "interactive": false}