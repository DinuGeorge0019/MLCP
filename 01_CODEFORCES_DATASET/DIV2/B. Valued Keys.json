{"link": "https://codeforces.com//contest/801/problem/B", "problemId": "103101", "problem_idx": "B", "shortId": "801B", "contest_number": "801", "problem_submissions": {"E": [26431268, 26432380, 26476783, 26433724, 26434229, 26480642, 26480548, 26480348, 26494890, 26761813, 26448700, 26891853], "D": [26425044, 26425418, 26424442, 26425844, 26427999, 26423648, 26424386, 26426466, 26425527, 26426325, 26426061, 26426569, 26423135, 26426063, 26426145, 26426707, 26427444, 26427659, 26427813, 26428417], "C": [26421077, 26426753, 26422126, 26422964, 26424591, 26421294, 26422383, 26423910, 26421299, 26422965, 26423300, 26464547, 26464488, 26464472, 26462113, 26461839, 26423489, 26427796, 26421258, 26423212, 26423423, 26423078, 26423800, 26424484, 26424083], "B": [26417032, 26418855, 26417051, 26418098, 26418064, 26417323, 26417757, 26418046, 26417670, 26419595, 26417736, 26418294, 26418039, 26417940, 26419935, 26419134, 26418085, 26419132, 26418680, 26417887], "A": [26416465, 26416667, 26416492, 26416663, 26416642, 26416740, 26416470, 26416681, 26416514, 26418065, 26416666, 26417060, 26416564, 26416805, 26418618, 26417312, 26416869, 26417305, 26416921, 26416811]}, "name": "B. Valued Keys", "statement": "You found a mysterious function . The function takes two strings and .\r\nThese strings must consist only of lowercase English letters, and must\r\nbe the same length.The output of the function is another string of the\r\nsame length. The -th character of the output is equal to the minimum of\r\nthe -th character of and the -th character of .For example, \"\", \"\" = \"\",\r\nand \"\", \"\" = \"\".You found two strings and of the same length and\r\nconsisting of only lowercase English letters. Find any string such that\r\n, or print if no such string exists.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nstring x,y,z;\nint main(){\n   cin >> x >> y;\n   for(int i=0;i<x.size();i++){\n      if (x[i] < y[i]) {cout << -1; return 0;}\n      z.push_back(y[i]);\n   }\n   cout << z;\n}\n"], "input": "", "output": "", "tags": ["constructive algorithms", "greedy", "strings"], "dificulty": "900", "interactive": false}