{
    "link": "https://codeforces.com//contest/734/problem/C",
    "problemId": "80475",
    "problem_idx": "C",
    "shortId": "734C",
    "contest_number": "734",
    "problem_submissions": {
        "F": [
            22242677,
            22263963
        ],
        "D": [
            22237702,
            22238671,
            22238436,
            22238926,
            22238773,
            22237833,
            22241230,
            22239041,
            22239616,
            22240014,
            22239208,
            22240034,
            22240178,
            22236173,
            22238427,
            22246118,
            22238956,
            22239478,
            22239903,
            22238000
        ],
        "C": [
            22234888,
            22234918,
            22235409,
            22236073,
            22235114,
            22235451,
            22235615,
            22235516,
            22234702,
            22235336,
            22234636,
            22235118,
            22237525,
            22238970,
            22235561,
            22239159,
            22235440,
            22236588,
            22236772,
            22235639
        ],
        "B": [
            22228951,
            22228069,
            22228596,
            22229294,
            22228497,
            22229303,
            22229501,
            22229322,
            22228369,
            22229545,
            22228175,
            22229688,
            22229766,
            22229538,
            22230326,
            22233850,
            22229247,
            22231472,
            22229353,
            22228678
        ],
        "A": [
            22226500,
            22226334,
            22226410,
            22226760,
            22226352,
            22226714,
            22226436,
            22226603,
            22226585,
            22226921,
            22226580,
            22226632,
            22227401,
            22227664,
            22229822,
            22226975,
            22228813,
            22226738,
            22226445
        ],
        "E": [
            22241795,
            22241633,
            22241388,
            22240916,
            22242495,
            22246165,
            22242439,
            22243868,
            22243102,
            22245799,
            22245135,
            22244767,
            22245998,
            22247226,
            22236319,
            22244870,
            22244604,
            22244885,
            22244356
        ]
    },
    "name": "C. Anton and Making Potions",
    "statement": "Anton is playing a very interesting computer game, but now he is stuck\r\nat one of the levels. To pass to the next level he has to prepare\r\npotions.Anton has a special kettle, that can prepare one potions in\r\nseconds. Also, he knows spells of two types that can faster the process\r\nof preparing potions. Spells of this type speed up the preparation time\r\nof one potion. There are spells of this type, the -th of them costs\r\nmanapoints and changes the preparation time of each potion to instead of\r\n. Spells of this type immediately prepare some number of potions. There\r\nare such spells, the -th of them costs manapoints and instantly create\r\npotions. Anton can use spell of the first type and spell of the second\r\ntype, and the total number of manapoints spent should not exceed .\r\nConsider that all spells are used instantly and right before Anton\r\nstarts to prepare potions.Anton wants to get to the next level as fast\r\nas possible, so he is interested in the minimum number of time he needs\r\nto spent in order to prepare at least potions.\r\n",
    "solutions": [
        "#include <iostream>\n#include <fstream>\n#include <list>\n#include <stack>\n#include <deque>\n#include <utility>\n#include <queue>\n#include <set>\n#include <map>\n#include <bitset>\n#include <vector>\n#include <cmath>\n#include <string>\n#include <algorithm>\n#include <iomanip>\n#include <ctime>\n#include <iterator>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\n\n#define f first\n#define s second\n#define pb push_back\n#define mp make_pair\n\nconst int maxn = 200500;\nconst int inf = 2e9;\nconst double eps = 1e-8;\nconst int base = 1073676287;\n\npair < int, int > a[maxn];\npair < int, int > b[maxn];\n\nint main()\n{\n    srand( time( 0 ) );\n    // freopen( \"input.txt\", \"r\", stdin );\n    // freopen( \"output.txt\", \"w\", stdout );\n    // ios_base::sync_with_stdio(false);\n    int n, m, k;\n    scanf ( \"%d%d%d\", &n, &m, &k );\n    int x, S;\n    scanf ( \"%d%d\", &x, &S );\n    for ( int j = 1; j <= m; j++ )\n    \tscanf ( \"%d\", &a[j].s );\n    for ( int j = 1; j <= m; j++ )\n    \tscanf ( \"%d\", &a[j].f );\n\n    for ( int j = 1; j <= k; j++ )\n    \tscanf ( \"%d\", &b[j].s );\n    for ( int j = 1; j <= k; j++ )\n    \tscanf ( \"%d\", &b[j].f );\n    a[0] = mp( 0, x );\n    b[0] = mp( 0, 0 );\n    sort( a, a + m + 1 );\n    sort( b, b + k + 1 );\n    reverse( b, b + k + 1 );\n    int it = 0;\n    ll ans = 1LL * x * n;\n    pair < int, int > curMax = mp( 0, x );\n    for ( int j = 0; j <= k; j++ ) {\n    \tif ( b[j].f > S )\n    \t\tcontinue;\n    \twhile ( it <= m && a[it].f <= S - b[j].f ) {\n    \t\tif ( curMax.s > a[it].s )\n    \t\t\tcurMax = a[it];\n    \t\t++it;\n    \t}\n    \tll curAns = 1LL * curMax.s * ( max( 0, n - b[j].s ) );\n    \tans = min( curAns, ans );\n    }\n    cout << ans << endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp",
        "greedy",
        "two pointers"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Anton and Making Potions.json",
    "editorial_link": "https://codeforces.com//blog/entry/48397",
    "editorial": "At first, observe that if weâll take the -th potion of the first type\r\nand the -th potion of the second type, then we can prepare all the\r\npotions in seconds. So, we have to minimize this number.Letâs iterate\r\nover what potion of the first type weâll use. Then we must find such\r\nspell of the second type that will prepare instantly as many as possible\r\npotions, and weâll have enough manapoints for it. It can be done using\r\nbinary search, because the characteristics of potions of the second type\r\nand are sorted in non-decreasing order.Time complexity is .\r\n",
    "hint": []
}