{"link": "https://codeforces.com//contest/1358/problem/C", "problemId": "630277", "problem_idx": "C", "shortId": "1358C", "contest_number": "1358", "problem_submissions": {"A": [81620245, 81480420, 81480612, 81480397, 81480359, 81480467, 81482408, 81480978, 81483693, 81481176, 81481249, 81480468, 81481050, 81480725, 81480917, 81482628, 81486951, 92936660, 81490429, 81481121, 81482901], "B": [81620220, 81482491, 81492096, 81483797, 81489848, 81487033, 81486874, 81486697, 81490338, 81487051, 81486247, 81483724, 81497864, 81487382, 81488926, 81493163, 81491431, 81489879, 81485018, 81495301], "C": [81620191, 81486723, 81496245, 81493700, 81488612, 81493172, 81499005, 81495501, 81496996, 81496974, 81500972, 81490527, 81490630, 81502941, 81499388, 81501230, 81498487, 81501924, 81492445, 81488275], "D": [81620172, 81495934, 81509733, 81505892, 81500534, 81507831, 81509665, 81506130, 81511830, 81510707, 81513684, 81511927, 81510294, 81510451, 81513883, 81514506, 81510412, 81512029, 81504276, 81514742], "E": [81620156, 81517050, 81519733, 81518214, 81524639, 164155905, 81522702, 81522902, 81522151, 81525693, 81527065, 81524408, 81527151, 81529704, 81528088, 81526351, 81527385, 81530473, 81528982, 81538269, 81532727], "F": [81620132, 81539358, 81693390, 81570956, 81570691, 81537746, 81550859, 164160232, 81580050, 81553047]}, "name": "C. Celex Update", "statement": "During the quarantine, Sicromoft has more free time to create the new\r\nfunctions in \"\". The developers made a new function , which infinitely\r\nfills an infinite table to the right and down from the upper left corner\r\nas follows: The cell with coordinates (x, y) is at the intersection of\r\nx-th row and y-th column. Upper left cell (1,1) contains an integer\r\n1.The developers of the function don\u2019t sleep either. Because of the\r\nboredom, they teamed up with the developers of the function, so they\r\nadded the ability to calculate the sum on an arbitrary path from one\r\ncell to another, moving down or right. Formally, from the cell (x,y) in\r\none step you can move to the cell (x+1, y) or (x, y+1). After another\r\nDinwows update, Levian started to study \"\" (because he wants to be an\r\naccountant!). After filling in the table with the function, he asked you\r\nto calculate the quantity of possible different amounts on the path from\r\na given cell (x_1, y_1) to another given cell (x_2, y_2), if you can\r\nonly move one cell down or right.Formally, consider all the paths from\r\nthe cell (x_1, y_1) to cell (x_2, y_2) such that each next cell in the\r\npath is located either to the down or to the right of the previous one.\r\nCalculate the number of different sums of elements for all such paths.\r\n", "solutions": ["// Author : PinkRabbit\n#include<bits/stdc++.h>\nusing namespace std;\n#define F(i,a,b) for(int i=a;i<=(b);++i)\n#define F2(i,a,b) for(int i=a;i<(b);++i)\n#define dF(i,a,b) for(int i=a;i>=(b);--i)\n#define debug(...) fprintf(stderr,__VA_ARGS__)\n#define Debug debug(\"Passing [%s] in LINE %d\\n\",__FUNCTION__,__LINE__)\n#define MN 300005\n#define MM 600005\n#define ll long long\n#define mod 998244353\n#define inf 0x3f3f3f3f\n#define infll 0x3f3f3f3f3f3f3f3f\ntypedef pair<int,int> pii;\n#define pb push_back\n#define mkp make_pair\n#define fi first\n#define se second\ninline int qpow(int b,ll e,int m=mod){int a=1;for(;e;e>>=1,b=(ll)b*b%m)if(e&1)a=(ll)a*b%m;return a;}\nint n,m,q,k;\nint a[MN],b[MN],f[MN],g[MN];\nvector<int>G[MN];\nint h[MN],nxt[MM],to[MM],tot;\ninline void ins(int x,int y){nxt[++tot]=h[x];to[tot]=y;h[x]=tot;}\nint main(){int tests=1;scanf(\"%d\",&tests);\nwhile(tests--){\n\tint a,b,c,d,x,y;\n\tscanf(\"%d%d%d%d\",&a,&b,&c,&d);\n\tx=c-a,y=d-b;\n\tprintf(\"%lld\\n\",(ll)x*y+1);\n}\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["math"], "dificulty": "1600", "interactive": false}