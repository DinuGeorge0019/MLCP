{"link": "https://codeforces.com//contest/157/problem/C", "problemId": "966", "problem_idx": "C", "shortId": "157C", "contest_number": "157", "problem_submissions": {"E": [1248565, 1248604, 1249847, 1249719, 1249198, 1252963, 7284608, 1259710, 1249969, 1357727, 1250326, 1253342], "D": [1247682, 1249793, 1248218, 1248230, 1248147, 1248671, 1248386, 1249291, 1249183, 1248872, 1249391, 1249679, 1246812, 1248518], "C": [1246074, 1248822, 1246490, 1617831, 1246429, 1247018, 1245946, 1246282, 1247472, 1246694, 1246096, 1281859, 1245531, 1247798], "B": [1244973, 1245596, 1245015, 1246109, 1246844, 1245147, 1245069, 1244930, 1245121, 1245571, 1244946, 1244729, 1245625, 1244883, 1246390], "A": [1244274, 1244154, 1245191, 1246058, 1244171, 1244215, 1244186, 1244383, 1244640, 1244109, 1244087, 1244512, 1244835]}, "name": "C. Message", "statement": "Dr. Moriarty is about to send a message to Sherlock Holmes. He has a\r\nstring . String is called a of string if you can read it starting from\r\nsome position in the string . For example, string \"\" has six substrings:\r\n\"\", \"\", \"\", \"\", \"\", \"\".Dr. Moriarty plans to take string and cut out\r\nsome substring from it, let\u2019s call it . Then he needs to the substring\r\nzero or more times. As a result, he should obtain a fixed string (which\r\nis the string that should be sent to Sherlock Holmes). One change is\r\ndefined as making one of the following actions: Insert one letter to any\r\nend of the string. Delete one letter from any end of the string. Change\r\none letter into any other one. Moriarty is very smart and after he\r\nchooses some substring , he always makes the minimal number of changes\r\nto obtain . Help Moriarty choose the best substring from all substrings\r\nof the string . The substring should minimize the number of changes\r\nMoriarty should make to obtain the string from it.\r\n", "solutions": ["#include<iostream>\n#include<vector>\n#include<string>\n#include<stack>\n#include<algorithm>\n#include<cmath>\n#include<set>\n#include<queue>\n#include<sstream>\n#include<utility>\n\nusing std::pair;\nusing std::stringstream;\nusing std::next_permutation;\nusing std::sqrt;\nusing std::priority_queue;\nusing std::sort;\nusing std::stack;\nusing std::string;\nusing std::vector;\nusing std::cin;\nusing std::cout;\nusing std::endl;\nusing std::min;\nusing std::max;\nusing std::set;\nusing std::swap;\nusing std::random_shuffle;\nusing std::queue;\nusing std::sin;\nusing std::cos;\nusing std::make_pair;\n\ntypedef long long ll; \ntypedef pair<ll, ll> pll;\nconst double PI = 3.14159265358979323846;  \n\n\n\nint main() {\n\tstring s, u;\n\tcin >> s >> u;\n\tint us = u.size();\n\tfor (int i = 0; i < us; ++i) {\n\t\ts = '.' + s + '.';\n\t}\n\tint mini = us;\n\tfor (int i = 0; i < s.size() - u.size() + 1; ++i) {\n\t\tint cur = 0;\n\t\tfor (int j = 0; j < u.size(); ++j) {\n\t\t\tif (s[i + j] != u[j])\n\t\t\t\t++cur;\n\t\t}\n\t\tmini = min(mini, cur);\n\t}\n\tcout << mini << endl;\n\treturn 0;\t\n}\n                                             \n"], "input": "", "output": "", "tags": ["brute force", "dp", "strings"], "dificulty": "1700", "interactive": false}