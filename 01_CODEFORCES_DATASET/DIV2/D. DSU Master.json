{"link": "https://codeforces.com//contest/1806/problem/D", "problemId": "1836409", "problem_idx": "D", "shortId": "1806D", "contest_number": "1806", "problem_submissions": {"F2": [197973089, 198042031, 198041907], "F1": [197947040, 197980157, 198042001, 198041678], "C": [197937230, 197916115, 197928489, 197944944, 197938210, 197926089, 197926689, 197929494, 197933106, 197948564, 197926881, 197937572, 197932222, 197941848, 199801603, 197957943, 197942490, 197930745, 197946610, 197928372, 197924952], "E": [197933006, 197929125, 197915365, 197935988, 197962774, 197948774, 197963264, 197949722, 197943372, 197943303, 197949562, 197950582, 197950806, 240170072, 197967439, 199801822, 199801762, 197952145, 197987791, 197987740, 197972228, 201450127, 197970212, 197959737, 197938806, 197943810], "B": [197912589, 197908884, 197909602, 197911369, 197910208, 197914190, 197910559, 197911156, 197917129, 197921982, 197914483, 197917557, 197912987, 197915302, 197915210, 197914864, 197912863, 197911859, 197911664, 197911113], "A": [197912419, 197906490, 197911639, 197906984, 197907218, 197908571, 197907286, 197906740, 197907744, 197907020, 197928349, 197908011, 197912765, 197906883, 197908367, 197906657, 197906703, 197906672, 197907002, 197906587], "D": [197942295, 197971270, 197966565, 197946069, 197958331, 197952013, 197968711, 197966060, 197967070, 197965611, 197969051, 197967288, 197953250, 199801511, 197971493, 197965795, 197972473, 197971611, 198035510, 198035241]}, "name": "D. DSU Master", "statement": "You are given an integer n and an array a of length n-1 whose elements\r\nare either 0 or 1.Let us define the of a permutation^\r\ndagger p of length m-1 (m\r\nleq n) by the following process.Let G be a graph of m vertices labeled\r\nfrom 1 to m that does not contain any edges. For each i from 1 to m-1,\r\nperform the following operations: define u and v as the (unique)\r\nvertices in the weakly connected components^\r\nddagger containing vertices p_i and p_i+1 respectively with only\r\nincoming edges^{\r\ndagger\r\ndagger}; in graph G, add a directed edge from vertex v to u if\r\na_{p_i}=0, otherwise add a directed edge from vertex u to v (if\r\na_{p_i}=1). Note that after each step, it can be proven that each weakly\r\nconnected component of G has a unique vertex with only incoming\r\nedges.Then, the value of p is the number of incoming edges of vertex 1\r\nof G.For each k from 1 to n-1, find the sum of values of all k!\r\npermutations of length k. Since this value can be big, you are only\r\nrequired to compute this value under modulo 998\r\n,244\r\n,353. ^\r\ndagger A permutation of length n is an array consisting of n distinct\r\nintegers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray), and [1,3,4] is also not a permutation (n=3 but there is 4 in the\r\narray).^\r\nddagger The weakly connected components of a directed graph is the same\r\nas the components of the undirected version of the graph. Formally, for\r\ndirected graph G, define a graph H where for all edges a\r\nto b in G, you add an undirected edge a\r\nleftrightarrow b in H. Then the weakly connected components of G are the\r\ncomponents of H.^{\r\ndagger\r\ndagger} Note that a vertex that has no edges is considered to have only\r\nincoming edges.\r\n", "solutions": ["#pragma GCC optimize(2)\n#include <bits/stdc++.h>\nusing namespace std;\nconst int mod = 998244353;\nint n;\ntypedef long long ll;\n#define int ll\ninline int fastpow(int a, int n)\n{\n\tint ans = 1;\n\twhile(n)\n\t{\n\t\tif(n & 1)\n\t\t\tans = ans * a % mod;\n\t\ta = a * a % mod, n >>= 1;\n\t}\n\treturn ans;\n}\ninline int inv(int x)\n{\n\treturn fastpow(x, mod - 2);\n}\nint fac[500010], ifac[500010];\n\ninline void InitFac(int n)\n{\n\tfac[0] = 1;\n\tfor(int i = 1; i <= n; i++)\n\t\tfac[i] = fac[i - 1] * i % mod;\n\tifac[n] = inv(fac[n]);\n\tfor(int i = n; i >= 1; i--)\n\t\tifac[i - 1] = ifac[i] * i % mod;\n}\nint a[500010], f[500010], ans[500010];\nsigned main()\n{\n\tint T;\n\tscanf(\"%lld\", &T);\n\tInitFac(500000);\n\twhile(T--)\n\t{\n\t\tint n;\n\t\tscanf(\"%lld\", &n);\n\t\tfor(int i = 1; i < n; i++)\n\t\t\tscanf(\"%lld\", &a[i]);\n\t\tf[1] = !a[1], ans[0] = 0;\n\t\tfor(int i = 1; i < n; i++)\n\t\t{\n\t\t\tif(i > 1)\n\t\t\t{\n\t\t\t\tif(!a[i])\n\t\t\t\t\tf[i] = f[i - 1] * i % mod;\n\t\t\t\telse\n\t\t\t\t\tf[i] = f[i - 1] * (i - 1) % mod;\n\t\t\t}\n\t\t\tans[i] = ans[i - 1];\n\t\t\tif(!a[i])\n\t\t\t\tans[i] = (ans[i] + f[i] % mod * ifac[i] % mod * inv(i)) % mod;\n\t\t}\n\t\tfor(int i = 1; i < n; i++)\n\t\t\tprintf(\"%lld \", ans[i] * fac[i] % mod);\n\t\tputchar('\\n');\n\t}\n\treturn 0;\n}\n"], "input": "", "output": "", "tags": ["combinatorics", "dp", "dsu", "math"], "dificulty": "2500", "interactive": false}