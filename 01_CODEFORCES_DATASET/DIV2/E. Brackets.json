{
    "link": "https://codeforces.com//contest/124/problem/E",
    "problemId": "661",
    "problem_idx": "E",
    "shortId": "124E",
    "contest_number": "124",
    "problem_submissions": {
        "D": [
            830516,
            831052,
            830260,
            830876,
            831073,
            831039,
            830521,
            831685,
            831637,
            830707,
            830117,
            831656,
            831924,
            830160
        ],
        "C": [
            829966,
            828434,
            832481,
            830195,
            830289,
            830286,
            831243,
            829787,
            830553,
            831437,
            830908,
            830422,
            830664,
            830957
        ],
        "B": [
            828282,
            830142,
            828624,
            828524,
            828126,
            828773,
            828303,
            828596,
            828124,
            828824,
            831632,
            829528,
            828350,
            831819
        ],
        "A": [
            826975,
            827420,
            827298,
            826788,
            826903,
            827255,
            826640,
            827252,
            826692,
            827048,
            828119,
            827326,
            826716,
            828544
        ],
        "E": [
            831333,
            875691,
            838710
        ]
    },
    "name": "E. Brackets",
    "statement": "A two dimensional array is called a array if each grid contains one of\r\nthe two possible brackets \"(\" or \")\". A path through the two dimensional\r\narray cells is called if any two consecutive cells in the path are\r\nside-adjacent and each cell of the path is located below or to the right\r\nfrom the previous one. A two dimensional array whose size equals is\r\ncalled a array, if any string formed by writing out the brackets on some\r\nmonotonous way from cell to cell forms a correct bracket sequence. Let’s\r\ndefine the operation of comparing two correct bracket arrays of equal\r\nsize ( and ) like that. Let’s consider a given two dimensional array of\r\npriorities () a two dimensional array of same size, containing different\r\nintegers from to . Let’s find such position in the two dimensional\r\narray, that . If there are several such positions, let’s choose the one\r\nwhere number is minimum. If \"(\", then , otherwise . If the position is\r\nnot found, then the arrays are considered equal.Your task is to find a\r\n-th two dimensional correct bracket array. It is guaranteed that for the\r\ngiven sizes of and there will be no less than two dimensional correct\r\nbracket arrays.\r\n",
    "solutions": [
        "#include<iostream>\n#include<algorithm>\n#include<cstring>\n#define x first\n#define y second\nusing namespace std;\ntypedef long long ll;\nconst ll MAXN=1000000000000000001LL;\nchar ANS[201];\nll dp[201][201],ff;\npair<long,long> P[10001];\nlong n,m,i,j,k,l;\ninline void add(ll &X,const ll Y){\n\tX+=Y;\n\tif(MAXN<X) X=MAXN;\n}\ninline bool check(){\n\tmemset(dp,0,sizeof(dp));\n\tdp[0][1]=1;\n\tlong ii,jj;\n\tfor(ii=1;ii<=n+m-2;++ii){\n\t\tif(ANS[ii]!='('){\n\t\t\tfor(jj=0;jj<l;++jj)\n\t\t\t\tadd(dp[ii][jj],dp[ii-1][jj+1]);\n\t\t\t}\n\t\tif(ANS[ii]!=')'){\n\t\t\tfor(jj=1;jj<=l;++jj)\n\t\t\t\tadd(dp[ii][jj],dp[ii-1][jj-1]);\n\t\t\t}\n\t\t}\n\treturn dp[n+m-2][0]<ff;\n}\nint main(){\n\tANS[0]='(';\n\tcin>>n>>m>>ff;\n\tfor(i=0;i<n;++i)\n\t\tfor(j=0;j<m;++j)\n\t\t\tcin>>k,P[k].x=i,P[k].y=j;\n\tANS[n+m-2]=')',l=(n+m-1)/2;\n\tfor(i=1;i<=n*m;++i)\n\t\tif(!ANS[P[i].x+P[i].y]){\n\t\t\tANS[P[i].x+P[i].y]='(';\n\t\t\tif(check()){\n\t\t\t\tANS[P[i].x+P[i].y]=')',ff-=dp[n+m-2][0];\n\t\t\t\t}\n\t\t\t}\n\tfor(i=0;i<n;++i){\n\t\tfor(j=0;j<m;++j)\n\t\t\tcout<<ANS[i+j];\n\t\tcout<<endl;\n\t\t}\n\tcin>>n;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Brackets.json",
    "editorial_link": "https://codeforces.com//blog/entry/3047",
    "editorial": null
}