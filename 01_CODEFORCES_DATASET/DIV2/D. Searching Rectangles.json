{
    "link": "https://codeforces.com//contest/714/problem/D",
    "problemId": "71343",
    "problem_idx": "D",
    "shortId": "714D",
    "contest_number": "714",
    "problem_submissions": {
        "D": [
            20590320,
            20583180,
            20585303,
            20591178,
            20598481,
            20603112,
            20603107,
            20591657,
            20607398,
            20594965
        ],
        "E": [
            20583639,
            20591013,
            20594645,
            20595036,
            20594100,
            20588546,
            20589480,
            20591788,
            20590582,
            20590355,
            20591414,
            20592977,
            20591323,
            20595335,
            20593848,
            20593101,
            20594938,
            20593282
        ],
        "C": [
            20581597,
            20576253,
            20580207,
            20579112,
            20581726,
            20579957,
            20581444,
            20580430,
            20584899,
            20580286,
            20587146,
            20580603,
            20583085,
            20584188,
            20580648,
            20582009,
            20574786,
            20581508,
            20603553,
            20603507,
            20587376,
            20575278
        ],
        "B": [
            20575974,
            20573949,
            20572686,
            20574205,
            20575669,
            20574973,
            20577284,
            20574274,
            20576588,
            20584157,
            20576158,
            20574917,
            20576728,
            20573716,
            20575150,
            20576582,
            20572425,
            20574534,
            20578364,
            20572180
        ],
        "A": [
            20572717,
            20571323,
            20571430,
            20572051,
            20572511,
            20571569,
            20573550,
            20571884,
            20571837,
            20577675,
            20571701,
            20571878,
            20578985,
            20571577,
            20572052,
            20571803,
            20571360,
            20572597,
            20575524,
            20571322
        ]
    },
    "name": "D. Searching Rectangles",
    "statement": "Filya just learned new geometry object rectangle. He is given a field\r\nconsisting of unit cells. Rows are numbered from bottom to top with\r\ninteger from to . Columns are numbered from left to right with integers\r\nfrom to . Cell, located at the intersection of the row and column is\r\ndenoted as . Filya has painted two rectangles, such that their sides are\r\nparallel to coordinate axes and each cell lies fully inside or fully\r\noutside each of them. Moreover, no cell lies in both rectangles.Later,\r\nhedgehog Filya became interested in the location of his rectangles but\r\nwas unable to find the sheet of paper they were painted on. They were\r\ntaken by Sonya and now she wants to play a little game with Filya. He\r\ntells her a query rectangle and she replies with the number of initial\r\nrectangles that lie the given query rectangle. The query rectangle\r\nshould match the same conditions as initial rectangles. Rectangle lies\r\nfully inside the query if each o its cells lies inside the query.Filya\r\nknows Sonya really well, so is sure that if he asks more than questions\r\nshe will stop to reply.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <set>\n#include <cstring>\n\nusing namespace std;\n\nint Contain(int a1, int b1, int a2, int b2, int x1, int y1, int x2, int y2) {\n    if (a1 <= x1 && x2 <= a2 && b1 <= y1 && y2 <= b2)\n        return 1;\n    return 0;\n}\n\nint main() {\n    //freopen(\"tema.in\", \"r\", stdin);\n    //freopen(\"tema.out\", \"w\", stdout);\n    int n;\n    int x11, y11, x12, y12, x21, y21, x22, y22;\n    scanf(\"%d\", &n);\n    int left = 1, right = n, answer;\n    while (left <= right) {\n        int middle = (left + right) / 2;\n        printf(\"? %d %d %d %d\\n\", middle, 1, n, n);\n        fflush(stdout);\n        int ok;\n        scanf(\"%d\", &ok);\n        if (ok >= 1) {\n            answer = middle;\n            left = middle + 1;\n        }\n        else\n            right = middle - 1;\n    }\n    x11 = answer;\n    left = x11, right = n, answer;\n    while (left <= right) {\n        int middle = (left + right) / 2;\n        printf(\"? %d %d %d %d\\n\", x11, 1, middle, n);\n        fflush(stdout);\n        int ok;\n        scanf(\"%d\", &ok);\n        if (ok >= 1) {\n            answer = middle;\n            right = middle - 1;\n        }\n        else\n            left = middle + 1;\n    }\n    x12 = answer;\n    left = 1, right = n, answer;\n    while (left <= right) {\n        int middle = (left + right) / 2;\n        printf(\"? %d %d %d %d\\n\", x11, middle, x12, n);\n        fflush(stdout);\n        int ok;\n        scanf(\"%d\", &ok);\n        if (ok >= 1) {\n            answer = middle;\n            left = middle + 1;\n        }\n        else\n            right = middle - 1;\n    }\n    y11 = answer;\n    left = y11, right = n, answer;\n    while (left <= right) {\n        int middle = (left + right) / 2;\n        printf(\"? %d %d %d %d\\n\", x11, y11, x12, middle);\n        fflush(stdout);\n        int ok;\n        scanf(\"%d\", &ok);\n        if (ok >= 1) {\n            answer = middle;\n            right = middle - 1;\n        }\n        else\n            left = middle + 1;\n    }\n    y12 = answer;\n\n\n    left = 1, right = n, answer;\n    while (left <= right) {\n        int middle = (left + right) / 2;\n        printf(\"? %d %d %d %d\\n\", middle, 1, n, n);\n        fflush(stdout);\n        int ok;\n        scanf(\"%d\", &ok);\n        int subtract = Contain(middle, 1, n, n, x11, y11, x12, y12);\n        if (ok - subtract >= 1) {\n            answer = middle;\n            left = middle + 1;\n        }\n        else\n            right = middle - 1;\n    }\n    x21 = answer;\n    left = x21, right = n, answer;\n    while (left <= right) {\n        int middle = (left + right) / 2;\n        printf(\"? %d %d %d %d\\n\", x21, 1, middle, n);\n        fflush(stdout);\n        int ok;\n        scanf(\"%d\", &ok);\n        int subtract = Contain(x21, 1, middle, n, x11, y11, x12, y12);\n        if (ok - subtract >= 1) {\n            answer = middle;\n            right = middle - 1;\n        }\n        else\n            left = middle + 1;\n    }\n    x22 = answer;\n    left = 1, right = n, answer;\n    while (left <= right) {\n        int middle = (left + right) / 2;\n        printf(\"? %d %d %d %d\\n\", x21, middle, x22, n);\n        fflush(stdout);\n        int ok;\n        scanf(\"%d\", &ok);\n        int subtract = Contain(x21, middle, x22, n, x11, y11, x12, y12);\n        if (ok - subtract >= 1) {\n            answer = middle;\n            left = middle + 1;\n        }\n        else\n            right = middle - 1;\n    }\n    y21 = answer;\n    left = y21, right = n, answer;\n    while (left <= right) {\n        int middle = (left + right) / 2;\n        printf(\"? %d %d %d %d\\n\", x21, y21, x22, middle);\n        fflush(stdout);\n        int ok;\n        scanf(\"%d\", &ok);\n        int subtract = Contain(x21, y21, x22, middle, x11, y11, x12, y12);\n        if (ok - subtract >= 1) {\n            answer = middle;\n            right = middle - 1;\n        }\n        else\n            left = middle + 1;\n    }\n    y22 = answer;\n    printf(\"! %d %d %d %d %d %d %d %d\\n\", x11, y11, x12, y12, x21, y21, x22, y22);\n    fflush(stdout);\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "interactive"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Searching Rectangles.json",
    "editorial_link": "https://codeforces.com//blog/entry/47094",
    "editorial": "Assume we have just one rectangle. First we can find its right side. In binary search we check is out rectangle to the left of some line x2 using function get(1,1,x2,n). As soon as we found right coordinate we can 'cut' everything to the right of the line, because there is nothing to look. In the same way we will find all sides.\n\nO(12?*?logN):\n\nMain idea is to find a line which will split space in the way that rectangles will lie in different parts, as rectangles are not intersected it is always possible.\n\nWe can assume that intersected line is parallel to y coordinate and use binary search by x. On each step of search we will count amount of rectangles on each side. If we have pair (1, 1) then line is found. If we have pair (0, 0) then intersected line is parallel to x coordinate. Otherwise we should search in the half where we have some rectangles.\n\nIn worst case we will have 2 searches each will take 2?*?log(n) time, also we have 4?*?log(n) time to find separated rectangle. In total we 2?*?2?*?log(n) + 2?*?4?*?log(n)?=?12?*?log(n).\n\nO(8?*?logN):\n\nWe can find first rectangle assuming that here is just one rectangle. In each of four of our search we will assume that rectangle is present if get will return 1 or 2.\n\nWhen we have one rectangle we can search second assuming that we can modify get function to get2, which will assume coordinates of first rectangle and decrease original value if it is required."
}