{
    "link": "https://codeforces.com//contest/2028/problem/A",
    "problemId": "3015765",
    "problem_idx": "A",
    "shortId": "2028A",
    "contest_number": "2028",
    "problem_submissions": {
        "F": [
            290935691,
            290949712,
            290955148,
            290955187,
            290957184,
            292391424
        ],
        "E": [
            290922245,
            290922480,
            290920424,
            290927233,
            290924245,
            290933073,
            290931752,
            290929839,
            290930222,
            290933477,
            290938776,
            290925205,
            290935230,
            290939685,
            290935948,
            290940043,
            290940956,
            290939742,
            290941596
        ],
        "D": [
            290914114,
            290910753,
            290911155,
            290918762,
            290914432,
            290916818,
            290919264,
            290917594,
            290919639,
            290918811,
            290925900,
            290936103,
            290915690,
            290926820,
            290971789,
            290922189,
            290916679,
            290927684,
            290928018,
            290925322
        ],
        "C": [
            290904384,
            290896368,
            290900564,
            290905625,
            290896283,
            290906809,
            290893283,
            290905680,
            290908077,
            290905220,
            290900117,
            290902591,
            290910230,
            290901329,
            290904962,
            290902731,
            290903557,
            290906063,
            290905134
        ],
        "B": [
            290895606,
            290891907,
            290894947,
            290900151,
            290892659,
            290894607,
            290903522,
            290896362,
            290901510,
            290898064,
            290894885,
            290895319,
            290897887,
            290896070,
            290896548,
            290895196,
            290898108,
            290896215
        ],
        "A": [
            290889080,
            290888110,
            290888845,
            290888449,
            290888344,
            290888834,
            290895010,
            290888416,
            290888296,
            290888948,
            290888415,
            290888738,
            290892035,
            290889212,
            290888467,
            290903576,
            290888326,
            290888321,
            290889167
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/136096",
    "editorial": "We can run the whole pattern times, which gives a total runtime of (be\r\ncareful in that running the pattern only 10 times is not enough!)To\r\nprove that repeats suffices, suppose that Aliceâs steps on the first run\r\nof the pattern are (we will take for convenience) Then, Alice ends up at\r\nposition if there exists a (the number of extra repeats) such that for\r\nsome , and . Certainly, if , we only need one repeat so assume WLOG that\r\n. Then, it must be the case that . However, (since ) and , so and\r\ntherefore repeats always suffice.In fact, the above proof shows that we\r\ncan solve each testcase in time .\r\n",
    "name": "A. Alice s Adventures in  Chess ",
    "statement": "Alice is trying to meet up with the Red Queen in the countryside! Right\r\nnow, Alice is at position (0, 0), and the Red Queen is at position (a,\r\nb). Alice can only move in the four cardinal directions (north, east,\r\nsouth, west). More formally, if Alice is at the point (x, y), she will\r\ndo one of the following: go north (represented by ), moving to (x, y+1);\r\ngo east (represented by ), moving to (x+1, y); go south (represented by\r\n), moving to (x, y-1); or go west (represented by ), moving to (x-1, y).\r\nAlice’s movements are predetermined. She has a string s representing a\r\nsequence of moves that she performs from left to right. Once she reaches\r\nthe end of the sequence, she repeats the same pattern of moves\r\nforever.Can you help Alice figure out if she will ever meet the Red\r\nQueen?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>#define ll long longusing namespace std;long long read(){    long long x=0,f=1;char ch=getchar();    while(!isdigit(ch))    {if(ch=='-') f=-1;ch=getchar();}    while(isdigit(ch)){x=x*10+ch-48;ch=getchar();}    return x*f;}void write(long long x){    if(x<0) putchar('-'),x=-x;    if(x>9) write(x/10);    putchar(x%10+'0');}const int N=2e5+10;int T,n;int a,b;char s[N];int main(){    //freopen(\".in\",\"r\",stdin);    //freopen(\".out\",\"w\",stdout);    T=read();    while(T--){        n=read();        cin>>a>>b;        int x=0,y=0;        bool fl=0;        if(x==a&&y==b)fl=1;                for(int i=1;i<=n;i++){            cin>>s[i];        }        for(int i=1;i<=1000;i++){            for(int j=1;j<=n;j++){                if(s[j]=='N')y++;                if(s[j]=='S')y--;                if(s[j]=='E')x++;                if(s[j]=='W')x--;                if(x==a&&y==b)fl=1;            }        }        if(fl)puts(\"YES\");        else puts(\"NO\");    }    return 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation",
        "math"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Alice s Adventures in  Chess .json",
    "hint": [
        "Hint How many times do you have to repeat the string until you know for certain whether Alice will ever reach the Red Queen?"
    ]
}