{
    "link": "https://codeforces.com//contest/835/problem/C",
    "problemId": "116348",
    "problem_idx": "C",
    "shortId": "835C",
    "contest_number": "835",
    "problem_submissions": {
        "D": [
            29372323,
            29063139,
            29065486,
            29070406,
            29071972,
            29065004,
            29066901,
            29072296,
            29065942,
            29065319,
            29066211,
            29066423,
            29075382,
            29067277,
            29065713,
            29073319,
            29071645,
            29059686
        ],
        "F": [
            29082635,
            29069949,
            29070481,
            29064958,
            29071364,
            29065236,
            29070446,
            29064892,
            29066866,
            29074301,
            29064205,
            29065410
        ],
        "E": [
            29073719,
            29074800,
            29065648,
            29071559,
            29118023,
            29074000,
            29070288,
            29074317,
            29074268,
            29072935,
            29075101,
            29066717
        ],
        "C": [
            29058240,
            29062830,
            29058737,
            29063335,
            29056792,
            29060472,
            29066295,
            29062534,
            29061132,
            29058860,
            29063690,
            29065693,
            29064050,
            29057954,
            29069770,
            29060762,
            29065225,
            29063124,
            29064200,
            29068485
        ],
        "B": [
            29056834,
            29060334,
            29054848,
            29057576,
            29053644,
            29056903,
            29057508,
            29057673,
            29056074,
            29075847,
            29059991,
            29061445,
            29056492,
            29073726,
            29059387,
            29100665,
            29056240,
            29055742,
            29057065,
            29080041,
            29054530
        ],
        "A": [
            29052216,
            29052753,
            29051567,
            29054419,
            29051774,
            29054501,
            29055498,
            29051558,
            29052865,
            29055926,
            29056006,
            29052148,
            29051882,
            29054461,
            29085374,
            29052881,
            29053437,
            29053701,
            29066515,
            29051895
        ]
    },
    "name": "C. Star sky",
    "statement": "The Cartesian coordinate system is set in the sky. There you can see\r\nstars, the -th has coordinates (, ), a maximum brightness , equal for\r\nall stars, and an initial brightness ().Over time the stars twinkle. At\r\nmoment the -th star has brightness . Let at moment some star has\r\nbrightness . Then at moment this star will have brightness , if , and ,\r\notherwise.You want to look at the sky times. In the -th time you will\r\nlook at the moment and you will see a rectangle with sides parallel to\r\nthe coordinate axes, the lower left corner has coordinates (, ) and the\r\nupper right (, ). For each view, you want to know the total brightness\r\nof the stars lying in the viewed rectangle.A star lies in a rectangle if\r\nit lies on its border or lies strictly inside it.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<ctime>\n#include<cstdlib>\n#include<utility>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pii;\nint f[20][110][110];\nint main()\n{\n\tint n,q,c;\n\tscanf(\"%d%d%d\",&n,&q,&c);\n\tc++;\n\tint x,y,s;\n\tint i,j,k;\n\tmemset(f,0,sizeof f);\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&x,&y,&s);\n\t\tfor(j=0;j<c;j++)\n\t\t\tf[j][x][y]+=(s+j)%c;\n\t}\n\tfor(i=0;i<c;i++)\n\t\tfor(j=1;j<=100;j++)\n\t\t\tfor(k=1;k<=100;k++)\n\t\t\t\tf[i][j][k]+=f[i][j-1][k]+f[i][j][k-1]-f[i][j-1][k-1];\n\tint t,x1,y1,x2,y2;\n\tfor(i=1;i<=q;i++)\n\t{\n\t\tscanf(\"%d%d%d%d%d\",&t,&x1,&y1,&x2,&y2);\n\t\tt%=c;\n\t\tint ans=f[t][x2][y2]-f[t][x1-1][y2]-f[t][x2][y1-1]+f[t][x1-1][y1-1];\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "implementation"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Star sky.json",
    "editorial_link": "https://codeforces.com//blog/entry/53588",
    "editorial": "The brightness of the -th star in moment is , where is modulo\r\noperator.Let\u00e2\u0080\u0099s precalc for each , , the number of stars with the initial\r\nbrightness in the rectangle (; )-(; ). It is calculated like calcuating\r\nof partial sums: .Then the total brightness of stars at the -th view is\r\n, where is the number of stars with the initial brightness in the given\r\nrectangle. This number can be calculated using array , using the\r\ninclusion-exclusion principle: .Let is the maximum coordinate. Time\r\ncomplexity: . Memory complexity: .\r\n"
}