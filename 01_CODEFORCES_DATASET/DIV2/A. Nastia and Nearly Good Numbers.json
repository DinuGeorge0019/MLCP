{
    "link": "https://codeforces.com//contest/1521/problem/A",
    "problemId": "977643",
    "problem_idx": "A",
    "shortId": "1521A",
    "contest_number": "1521",
    "problem_submissions": {
        "D": [
            115581818,
            115594850,
            115598612,
            115603691,
            115599448,
            115601993,
            115608478,
            115569159,
            115612872,
            115604589,
            115610795,
            115602271,
            115608146,
            115607408,
            115599985
        ],
        "C": [
            115571933,
            115576814,
            115571686,
            115575287,
            115554792,
            115578008,
            115583346,
            115581715,
            115563254,
            115563941,
            115569253,
            115571673,
            115577961,
            115579502,
            115578223,
            115583699
        ],
        "B": [
            115555782,
            115541222,
            115542122,
            115539078,
            115535984,
            115537884,
            115535617,
            115535973,
            115540952,
            115589944,
            115543027,
            115535929,
            115532822,
            115550853,
            115551249,
            115536556,
            115547431,
            115535420
        ],
        "A": [
            115533383,
            115523492,
            115530232,
            115525696,
            115523586,
            115527609,
            115525343,
            115525115,
            115586248,
            115523901,
            115524582,
            115523559,
            115530582,
            115527602,
            115524514,
            115526011,
            115524612
        ],
        "E": [
            115603853,
            115608158,
            115614666,
            116024421,
            115649428,
            115659057,
            115613282,
            115649743,
            115610712
        ]
    },
    "name": "A. Nastia and Nearly Good Numbers",
    "statement": "Nastia has 2 positive integers A and B. She defines that: The integer is\r\ngood if it is divisible by A\r\ncdot B; Otherwise, the integer is nearly good, if it is divisible by A.\r\nFor example, if A = 6 and B = 4, the integers 24 and 72 are good, the\r\nintegers 6, 660 and 12 are nearly good, the integers 16, 7 are neither\r\ngood nor nearly good.Find 3 positive integers x, y, and z such that of\r\nthem is good and the 2 are nearly good, and x + y = z.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define _FORTIFY_SOURCE 0\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native\")\n#pragma GCC optimize(\"fast-math\")\n#define int long long\n\nusing namespace std;\n\nmt19937 rnd(time(nullptr));\n\nvoid solve() {\n   int a, b;\n   cin >> a >> b;\n   if (b == 1) {\n        cout << \"NO\\n\";\n        return;\n   }\n   if (b == 2) {\n        cout << \"YES\\n\";\n        cout << a << \" \" << 3 * a << \" \" << 4 * a << \"\\n\";\n        return;\n   }\n   cout << \"YES\\n\";\n   cout << a * (b - 1) << \" \" << a << \" \" << a * b << \"\\n\";\n}\n\nint32_t main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    int t;\n    cin >> t;\n    while (t--)\n        solve();\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math",
        "number theory"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Nastia and Nearly Good Numbers.json",
    "editorial_link": "https://codeforces.com//blog/entry/90477",
    "editorial": "There are cases:if , then the answer doesn\u00e2\u0080\u0099t exist. Here we cannot get\r\nthe nearly good numbers at all.Otherwise, we can construct the answer as\r\n.\r\n"
}