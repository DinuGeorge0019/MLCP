{"link": "https://codeforces.com//contest/1058/problem/C", "problemId": "223735", "problem_idx": "C", "shortId": "1058C", "contest_number": "1058", "problem_submissions": {"F": [43329652, 43322741, 43327075, 43339320, 43397318], "E": [43317169, 43335127, 43311536, 43318971, 43319046, 43349236, 43325041, 43322181, 43322626, 43309860, 43322794, 43327406, 43321904, 43323656, 43323747, 43323713, 43316209, 43327281, 43327505], "B": [43314909, 43299015, 43298589, 43304743, 43300553, 43310414, 43301962, 43300188, 43303702, 43317695, 43301396, 43299393, 43301629, 43300037, 43301041, 43302979, 43330380, 43303019, 43303281], "C": [43311113, 43302266, 43300372, 43301786, 43303858, 43309140, 43303996, 43302098, 43308312, 43301537, 43306280, 43302496, 43303833, 43303884, 43307063, 43311748, 43303475, 43307737, 43305316], "D": [43306998, 43306866, 43307236, 43307768, 43312416, 43307189, 43309783, 43309198, 43312128, 43330363, 43309334, 43310807, 43315529, 43315808, 43314759, 43307976, 43322616, 43315377, 43313629], "A": [43304464, 43296152, 43295312, 43296932, 43295838, 43311418, 43296719, 43295347, 43301760, 43297317, 43296398, 43295888, 43295686, 43295956, 43297191, 43296417, 43297679, 43297174, 43295748]}, "name": "C. Vasya and Golden Ticket", "statement": "Recently Vasya found a golden ticket a sequence which consists of n\r\ndigits a_1a_2\r\ndots a_n. Vasya considers a ticket to be lucky if it can be divided into\r\ntwo or more non-intersecting segments with equal sums. For example,\r\nticket 350178 is lucky since it can be divided into three segments 350,\r\n17 and 8: 3+5+0=1+7=8. Note that each digit of sequence should belong to\r\none segment.Help Vasya! Tell him if the golden ticket he found is lucky\r\nor not.\r\n", "solutions": ["//Williams Wu\n/*#include <EGE.h> //\ufffd\ufffd\u037c\u0377\ufffd\u013c\ufffd\n#define SHOW_CONSOLE*/\n/*#include <cstdio> //\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <iostream> //\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffd\ufffd\n#include <algorithm> //STL\u0368\ufffd\ufffd\ufffd\u3de8\n#include <cmath> //\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0467\ufffd\ufffd\ufffd\ufffd\n#include <cstdlib> //\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ueeaf\ufffd\ufffd\ufffd\ufffd\ufffd\u06b4\ufffd\ufffd\ufffd\u4eaf\ufffd\ufffd\n#include <cstring> //\ufffd\u05b7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <string> //\ufffd\u05b7\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <ctime> //\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u02b1\ufffd\ufffd\u013a\ufffd\ufffd\ufffd*/\n/*#include <bitset> //STL\u03bb\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <cstype> //\ufffd\u05b7\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <cerrno> //\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <complex> //\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <clocale> //\ufffd\ufffd\ufffd\u5c7e\ufffd\u063b\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <deque> //STL\u02eb\ufffd\u02f6\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <exception> //\ufffd\ucce3\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <fstream> //\ufffd\u013c\ufffd\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffd\ufffd\n#include <functional> //STL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u3eaf\ufffd\ufffd(\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd)\n#include <limits> //\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u05b5\ufffd\ufffd\ufffd\ufffd\n#include <listt> //STL\ufffd\ufffd\ufffd\ufffd\ufffd\u0431\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <mapp> //STL\u04f3\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <iomanip> //\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffd\ufffd\n#include <ios> //\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffd\ufffd\u05a7\ufffd\ufffd\n#include <iosfwd> //\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffd\ufffd\u03f5\u0373\u02b9\ufffd\u00f5\ufffd\u01f0\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <istream> //\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <ostream> //\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <queue> //STL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <sett> //STL\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <sstream> //\ufffd\ufffd\ufffd\ufffd\ufffd\u05b7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <stackk> //STL\ufffd\ufffd\u057b\ufffd\ufffd\ufffd\ufffd\n#include <stdexcept> //\ufffd\ufffd\u05fc\ufffd\ucce3\ufffd\ufffd\n#include <streambuf> //\ufffd\u05f2\ufffd\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffd\ufffd\u05a7\ufffd\ufffd\n#include <utility> //STL\u0368\ufffd\ufffd\u0123\ufffd\ufffd\ufffd\ufffd\n#include <vector> //STL\ufffd\ufffd\u032c\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n#include <cwchar.h> //\ufffd\ufffd\ufffd\u05b7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffd\ufffd\n#include <cwctype.h> //\ufffd\ufffd\ufffd\u05b7\ufffd\ufffd\ufffd\ufffd\ufffd*/\n#include <bits/stdc++.h>\nusing namespace std;\n#define rep(u,v,nxt) for(int u=(v);(u)<=(nxt);(u)++)\n#define rep_(u,v,nxt) for(int u=(v);(u)<(nxt);(u)++)\n#define repf(u,v,nxt) for(int u=(v);(u)>=(nxt);(u)--)\n#define repf_(u,v,nxt) for(int u=(v);(u)>(nxt);(u)--)\n#define inf 0x3f3f3f3f  //0x7fffffff\n#define cle(u) memset(u,0,sizeof(u))\n#define clemin(u) memset(u,-1,sizeof(u))\n#define clemax(u) memset(u,0x3f,sizeof(u))  //127\nconst double PI=3.14159265358979323846264338327950288419716939937510;\nconst double E=2.7182818284590452353602874713526624977572470936999596;\nconst double eps=0.000000001;\ntypedef long long LL;\ninline int max(int u,int v){return u>v?u:v;}\ninline int min(int u,int v){return u<v?u:v;}\ninline LL gcd(LL u,LL v){return v?gcd(v,u%v):u;}\n///////////////////////optimize//////////////////////////\ntemplate <typename T>\ninline void read(T& u){char id;u=0;bool used=0;id=getchar();\nwhile(id>'9'||id<'0'){if(id=='-')used=1;id=getchar();}\nwhile((id<='9'&&id>='0')){u=u*10+id-'0';id=getchar();}if(used)u*=-1;}\ntemplate <typename T>\ninline void read(T& u,T& v){read(u);read(v);}\ntemplate <typename T>\ninline void read(T& u,T& v,T& tmp){read(u);read(v);read(tmp);}\n/////////////////variables&functions/////////////////////\n\nchar str[110];\nint num[110];\n\nint main() \n{\n    int n;\n    read(n);\n    scanf(\"%s\",str+1);\n    int sum=0;\n    rep(i,1,n) \n    {\n        num[i]=str[i]-'0';\n        sum+=num[i];\n    }\n    bool flag=1;\n    rep(i,1,n)\n        if(num[i])    \n            flag=0;\n    if(flag)   \n    {\n        puts(\"YES\");\n        return 0;\n    }\n    rep_(k,1,sum)\n        if(sum%k==0) \n        {\n            int noww=0;\n            rep(i,1,n) \n            {\n                noww+=num[i];\n                if(noww==k) noww=0;\n                    else if(noww>k)\n                    {\n                        noww=inf;\n                        break;\n                    }\n            }\n            if(noww==0)  \n            {\n                puts(\"YES\");\n                return 0;\n            }\n        }\n    puts(\"NO\");\n    return 0;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], "input": "", "output": "", "tags": ["brute force", "implementation"], "dificulty": "1300", "interactive": false}