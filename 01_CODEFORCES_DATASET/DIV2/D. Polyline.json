{
    "link": "https://codeforces.com//contest/617/problem/D",
    "problemId": "46106",
    "problem_idx": "D",
    "shortId": "617D",
    "contest_number": "617",
    "problem_submissions": {
        "B": [
            15525292,
            15520241,
            15520782,
            15519093,
            15520541,
            15518993,
            15520816,
            15520328,
            15522323,
            15519740,
            15519199,
            15519236,
            15522269,
            15520061,
            15520921,
            15520553,
            15521134
        ],
        "E": [
            15524504,
            15533637,
            15536969,
            15529659,
            15535325,
            15529489,
            15527806,
            15532273,
            19715009,
            15542654,
            15534610,
            15534856,
            53538378,
            15532458
        ],
        "D": [
            15522122,
            15524102,
            15527458,
            15532675,
            15531424,
            15537486,
            15523234,
            15528078,
            15529838,
            15539257,
            15526873,
            15536074,
            15530391,
            15531537,
            15525866,
            15527771,
            15525195,
            15535593
        ],
        "A": [
            15518850,
            15516543,
            15516542,
            15517397,
            15516883,
            15518022,
            15517052,
            15517168,
            15516689,
            15517881,
            15517750,
            15516596,
            15516595,
            15516666,
            15516591,
            15517486,
            15517447,
            15518711
        ],
        "C": [
            15527346,
            15535776,
            15522904,
            15520819,
            15525590,
            15541637,
            15525965,
            15525876,
            15534504,
            15523565,
            15522950,
            15532930,
            15526671,
            15524426,
            15522962,
            15532766
        ]
    },
    "name": "D. Polyline",
    "statement": "There are three points marked on the coordinate plane. The goal is to\r\nmake a simple polyline, without self-intersections and self-touches,\r\nsuch that it passes through all these points. Also, the polyline must\r\nconsist of only segments parallel to the coordinate axes. You are to\r\nfind the minimum number of segments this polyline may consist of.\r\n",
    "solutions": [
        "#include<stdio.h>\n#include<iostream>\n#include<vector>\n#include<cmath>\n#include<algorithm>\n#include<memory.h>\n#include<map>\n#include<set>\n#include<queue>\n#include<list>\n#include<sstream>\n#include<cstring>\n#define mp make_pair\n#define pb push_back      \n#define F first\n#define S second\n#define SS stringstream\n#define sqr(x) ((x)*(x))\n#define m0(x) memset(x,0,sizeof(x))\n#define m1(x) memset(x,63,sizeof(x))\n#define CC(x) cout << (x) << endl\n#define pw(x) (1ll<<(x))\n#define buli(x) __builtin_popcountll(x)\n#define forn(i, n) for(int i = 0 ; (i) < (n) ; ++i)\n#define M 1000000007\n#define N 10\n\n#define TASK \"1\"\n\nusing namespace std;\ntypedef pair<int,int> pt;\n\nint x[N], y[N];\n\nbool check() {\n    for (int i = 0; i < 3; i++) if (y[(i + 1) % 3] == y[(i + 2) % 3]) {\n        if ((x[i] >= x[(i + 1) % 3] && x[i] >= x[(i + 2) % 3]) || (x[i] <= x[(i + 1) % 3] && x[i] <= x[(i + 2) % 3])) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main(){\n//  freopen(TASK\".in\",\"r\",stdin);   \n//  freopen(TASK\".out\",\"w\",stdout);\n    for (int i = 0; i < 3; i++) cin >> x[i] >> y[i];\n    if ((x[0] == x[1] && x[1] == x[2]) || (y[0] == y[1] && y[1] == y[2])) {\n        cout << 1 << endl;\n    } else {\n        if (check()) {\n            cout << 2 << endl;\n            return 0;\n        }\n        for (int i = 0; i < 3; i++) swap(x[i], y[i]);\n        if (check()) {\n            cout << 2 << endl;\n            return 0;\n        }\n        cout << 3 << endl;\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Polyline.json",
    "editorial_link": "https://codeforces.com//blog/entry/22971",
    "editorial": "Answer equals to one if all coordinates x or y of points are same. When\r\nanswer equals to two? Letâs iterate over all pairs of points. Let first\r\npoint in pair is beginning of polyline, second point is end. Only one or\r\ntwo such polylines with answer two exist. If third point is on the\r\npolyline it belongs to rectangle with corners in first two points. We\r\ncan just check it. Else answer equals to three. We can build vertical\r\nlines which contains the most left and the most right point and\r\nhorizontal line through third point. If we erase some excess rays we\r\nwill get polyline. Solution 15550843\r\n",
    "hint": []
}