{"link": "https://codeforces.com//contest/812/problem/D", "problemId": "108005", "problem_idx": "D", "shortId": "812D", "contest_number": "812", "problem_submissions": {"E": [27494142, 27491477, 27493766, 27515655, 27496725, 27495067, 27497471, 27496279, 27497446, 27497581, 27499309, 27499707, 27489928, 27498644, 27502197, 27500634, 27499517, 27499414, 27502641, 27500094, 27500259], "B": [27491993, 27495156, 27497709, 27512953, 27489354, 27496857, 27494139, 27493311, 27490608, 27494150, 27488730, 27492610, 27500920, 27493253, 27490411, 27496233, 27491317, 27491574, 27492471, 27492075, 27490349], "C": [27490421, 27492136, 27488817, 27489120, 27487355, 27489159, 27489035, 27492785, 27488367, 27489931, 27490104, 27498191, 27489300, 27492185, 27489814, 27490763, 27493690, 27489337, 27493758, 27491206], "A": [27487305, 27493249, 27495525, 27491891, 27490175, 27487261, 27487056, 27487516, 27499547, 27493817, 27487154, 27503033, 27487455, 27486987, 27488643, 27487109, 27486628, 27487274, 27487808, 27486790], "D": [27503386, 27512794, 27534240, 27564141, 27521512]}, "name": "D. Sagheer and Kindergarten", "statement": "Sagheer is working at a kindergarten. There are children and different\r\ntoys. These children use well-defined protocols for playing with the\r\ntoys: Each child has a lovely set of toys that he loves to play with. He\r\nrequests the toys one after another at distinct moments of time. A child\r\nstarts playing if and only if he is granted all the toys in his lovely\r\nset. If a child starts playing, then sooner or later he gives the toys\r\nback. No child keeps the toys forever. Children request toys at distinct\r\nmoments of time. No two children request a toy at the same time. If a\r\nchild is granted a toy, he never gives it back until he finishes playing\r\nwith his lovely set. If a child is not granted a toy, he waits until he\r\nis granted this toy. He can\u2019t request another toy while waiting. If two\r\nchildren are waiting for the same toy, then the child who requested it\r\nfirst will take the toy first.Children don\u2019t like to play with each\r\nother. That\u2019s why they never share toys. When a child requests a toy,\r\nthen granting the toy to this child depends on whether the toy is free\r\nor not. If the toy is free, Sagheer will give it to the child.\r\nOtherwise, the child has to wait for it and can\u2019t request another\r\ntoy.Children are smart and can detect if they have to wait forever\r\nbefore they get the toys they want. In such case they start crying. In\r\nother words, a crying set is a set of children in which each child is\r\nwaiting for a toy that is kept by another child in the set.Now, we have\r\nreached a scenario where all the children made all the requests for\r\ntheir lovely sets, except for one child that still has one last request\r\nfor his lovely set. Some children are playing while others are waiting\r\nfor a toy, but no child is crying, and no one has yet finished playing.\r\nIf the child is currently waiting for some toy, he makes his last\r\nrequest just after getting that toy. Otherwise, he makes the request\r\nright away. When child will make his last request, how many children\r\nwill start crying?You will be given the scenario and queries. Each query\r\nwill be of the form meaning that the last request of the child is for\r\nthe toy . Your task is to help Sagheer find the size of the crying set\r\nwhen child makes his last request.\r\n", "solutions": ["/*\n\n         o###########oo\n      o##\"          \"\"##o\n    o#\"                \"##\n  o#\"                    \"#o\n #\"  ##              ##   \"##\n#\"                          ##\n#  ###################       #\n#                            #\n#                            #\n#                            #\n#                            #\n#                            #\n#                            #\n#o                           #\n\"#o                         ##\n \"#o                       ##\n  \"#o                    o#\"\n   \"#o                  ##\n     \"#o              o#\"\n       \"#ooo      ooo#######oo\n        ###############   \"######o\n     o###\"\"        \"###o      # ###\n   o###o     oooo    ###    oo####\"\n o###**#     #**#   ############\"\n \"\"##\"\"\"\"\"\"\"\"\"\"###########    #\n    # oooooooo#\"#**     ##    #\n    # #       # # **    ##    #\n    #o#       #o#  *****###ooo#\n                        ##\n                        ##   o###o\n                        ## o##***##\n               o########## #***#**##o\n             o##\"   \"\"###  #***##***#\n o#######o  ###   oo####   ##**####*#\no##\"  \"\"#############\"\"     ##****###\n##\"         ##              ##*##*###\n##          ###              ##### ##\n##           ###              # ##  #\n##            ##                 #\n##             ##\n##             ###\n##              ###oo\n###              \"\"###\n ###\n  ###\n*/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\ntypedef long double ld;\n\nll AR = 19, BR = 13, CR = 23, XR = 228, YR = 322, MOD = 1e9 + 993;\n\nll myrand(){\n    ll ZR = (XR * AR + YR * BR + CR) % MOD;\n    XR = YR;\n    YR = ZR;\n    return ZR;\n}\n\nll sqr(ll x){\n    return x * x;\n}\n\nconst ll llinf = 2e18;\n\nconst ld EPS = 1e-9;\n\nconst int maxn = 1e5 + 100, inf = 1e9 + 100, sq = 300;\n\nint n, m, k, zap;\n\nint req[maxn];\n\nvector<int> e[maxn];\n\npair<int, int> zaps[maxn];\n\nint last[maxn];\n\nbool good[maxn];\n\nint sz[maxn];\n\nint root[maxn], h[maxn];\n\nint tin[maxn], tout[maxn], tinnow, toutnow;\n\nvoid dfs(int v){\n    sz[v] = 1;\n    tin[v] = tinnow;\n    tinnow++;\n    for (int i = 0; i < e[v].size(); i++)\n        root[e[v][i]] = root[v], h[e[v][i]] = h[v] + 1, dfs(e[v][i]), sz[v] += sz[e[v][i]];\n    tout[v] = toutnow;\n    toutnow++;\n}\n\nint answer;\n\nint main()\n{\n    #ifdef ONPC\n    //ifstream cin(\"a.in\");\n    //ofstream cout(\"a.out\");\n    freopen(\"a.in\", \"r\", stdin);\n    freopen(\"a.out\", \"w\", stdout);\n    #else\n    //ifstream cin(\"a.in\");\n    //ofstream cout(\"a.out\");\n    //freopen(\"trap.in\", \"r\", stdin);\n    //freopen(\"trap.out\", \"w\", stdout);\n    #endif // ONPC\n    ios::sync_with_stdio(0);\n    scanf(\"%d %d %d %d\", &n, &m, &k, &zap);\n    for (int i = 0; i < k; i++)\n        scanf(\"%d %d\", &zaps[i].first, &zaps[i].second), zaps[i].first--, zaps[i].second--, last[zaps[i].first] = i;\n    for (int i = 0; i < m; i++)\n        req[i] = -1;\n    for (int i = 0; i < n; i++)\n        good[i] = 1;\n    for (int i = 0; i < k; i++){\n        int x = zaps[i].first, y = zaps[i].second;\n        if (last[x] == i)\n            if (req[y] != -1)\n                e[req[y]].push_back(x), good[x] = 0;\n        req[y] = x;\n    }\n    for (int i = 0; i < n; i++)\n        if (good[i])\n            tinnow = 0, toutnow = 0, root[i] = i, dfs(i);\n    for (int i = 0; i < zap; i++){\n        int x, y;\n        scanf(\"%d %d\", &x, &y);\n        x--;\n        y--;\n        int to;\n        if (req[y] == -1){\n            printf(\"0\\n\");\n            continue;\n        }\n        to = req[y];\n        if (to == x){\n            printf(\"0\\n\");\n            continue;\n        }\n        if (root[to] == root[x] && tin[x] <= tin[to] && tout[x] >= tout[to])\n            printf(\"%d\\n\", sz[x]);\n        else\n            printf(\"0\\n\");\n    }\n}\n"], "input": "", "output": "", "tags": ["dfs and similar", "graphs", "implementation", "trees"], "dificulty": "2700", "interactive": false}