{
    "link": "https://codeforces.com//contest/681/problem/C",
    "problemId": "62559",
    "problem_idx": "C",
    "shortId": "681C",
    "contest_number": "681",
    "problem_submissions": {
        "E": [
            18473617,
            18479418
        ],
        "D": [
            18465030,
            18465518,
            18465862,
            18467403,
            18466936,
            18467028,
            18466296,
            18466578,
            18464030,
            18470842,
            18472466,
            18467659,
            18469382,
            18468431,
            18468146,
            18474068,
            18472044,
            18469596,
            18470424
        ],
        "C": [
            18461194,
            18461464,
            18461743,
            18461928,
            18464405,
            18461875,
            18462398,
            18461641,
            18467308,
            18461870,
            18461760,
            18464265,
            18463730,
            18463224,
            18460036,
            18461042,
            18464863,
            18463886,
            18462766
        ],
        "B": [
            18458177,
            18458124,
            18456973,
            18457752,
            18459469,
            18459156,
            18458143,
            18457120,
            18457840,
            18462206,
            18457571,
            18458202,
            18457782,
            18458846,
            18457327,
            18456130,
            18460750,
            18458949,
            18458321
        ],
        "A": [
            18456291,
            18456107,
            18458037,
            18456137,
            18457389,
            18456748,
            18456511,
            18456015,
            18456218,
            18456056,
            18455988,
            18456198,
            18456050,
            18456723,
            18456074,
            18457095,
            18458719,
            18456145,
            18456265
        ]
    },
    "name": "C. Heap Operations",
    "statement": "Petya has recently learned data structure named \"Binary heap\".The heap\r\nhe is now operating with allows the following operations: put the given\r\nnumber into the heap; get the value of the minimum element in the heap;\r\nextract the minimum element from the heap; Thus, at any moment of time\r\nthe heap contains several integers (possibly none), some of them might\r\nbe equal.In order to better learn this data structure Petya took an\r\nempty heap and applied some operations above to it. Also, he carefully\r\nwrote down all the operations and their results to his event log,\r\nfollowing the format: put the element with value in the heap; the value\r\nof the minimum element contained in the heap was equal to ; the minimum\r\nelement was extracted from the heap (only one instance, if there were\r\nmany). All the operations were correct, i.e. there was at least one\r\nelement in the heap each time or operations were applied.While Petya was\r\naway for a lunch, his little brother Vova came to the room, took away\r\nsome of the pages from Petya’s log and used them to make paper boats.Now\r\nVova is worried, if he made Petya’s sequence of operations inconsistent.\r\nFor example, if one apply operations one-by-one in the order they are\r\nwritten in the event log, results of operations might differ from the\r\nresults recorded by Petya, and some of or operations may be incorrect,\r\nas the heap is empty at the moment they are applied.Now Vova wants to\r\nadd some new operation records to the event log in order to make the\r\nresulting sequence of operations correct. That is, the result of each\r\noperation is equal to the result in the record, and the heap is\r\nnon-empty when ad are applied. Vova wants to complete this as fast as\r\npossible, as the Petya may get back at any moment. He asks you to add\r\nthe least possible number of operation records to the current log. Note\r\nthat arbitrary number of operations may be added at the beginning,\r\nbetween any two other operations, or at the end of the log.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\nint n;\nmultiset<int> ss;\n\nchar buf[100];\n\nvector<pair<char, int> > vv;\n\nint main() {\n\tscanf(\"%d\", &n);\n\tfor (int i = 0; i < n; ++i) {\n\t\tscanf(\" %s\", buf);\n\t\tint x;\n\t\tif (buf[0] == 'i') {\n\t\t\tscanf(\"%d\", &x);\n\t\t\tss.insert(x);\n\t\t\tvv.push_back(make_pair('i', x));\n\t\t}\n\t\telse if (buf[0] == 'g') {\n\t\t\tscanf(\"%d\", &x);\n\t\t\twhile (!ss.empty() && *ss.begin() < x)\n\t\t\t\tvv.push_back(make_pair('r', 0)), ss.erase(ss.begin());\n\t\t\tif (ss.empty() || *ss.begin() > x)\n\t\t\t\tvv.push_back(make_pair('i', x)), ss.insert(x);\n\t\t\tvv.push_back(make_pair('g', x));\n\t\t}\n\t\telse {\n\t\t\tif (ss.empty())\n\t\t\t\tss.insert(1), vv.push_back(make_pair('i', 1));\n\t\t\tss.erase(ss.begin());\n\t\t\tvv.push_back(make_pair('r', 0));\n\t\t}\n\t}\n\tprintf(\"%d\\n\", (int)vv.size());\n\tfor (auto i: vv) {\n\t\tif (i.first == 'i')\n\t\t\tprintf(\"insert %d\\n\", i.second);\n\t\telse if (i.first == 'g')\n\t\t\tprintf(\"getMin %d\\n\", i.second);\n\t\telse\n\t\t\tprintf(\"removeMin\\n\");\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Heap Operations.json",
    "editorial_link": "https://codeforces.com//blog/entry/45425",
    "editorial": "Letâs solve this problem with greedy approach. Letâs apply operations\r\nfrom log in given order. If current operation is , then add element to\r\nheap. If current operation is , then if heap is not empty, then simply\r\nremove minimal element, otherwise if heap is empty, add operation ,\r\nwhere can be any number, and then apply If current operation is then do\r\nfollows: In order to fit time limit, you need to use data structure,\r\nwhich allows you to apply given operations in time, where is a number of\r\nelements in it. For example, std::priority_queue or std::multiset. Code\r\n",
    "hint": []
}