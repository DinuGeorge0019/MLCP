{
    "link": "https://codeforces.com//contest/1805/problem/F2",
    "problemId": "1861357",
    "problem_idx": "F2",
    "shortId": "1805F2",
    "contest_number": "1805",
    "problem_submissions": {
        "F1": [
            200439106,
            200443524,
            200424069,
            200446588,
            200467490,
            200437348,
            200464508,
            200464351,
            200463340,
            209038123,
            200557576,
            200463298
        ],
        "C": [
            200413348,
            200408313,
            200430286,
            200414727,
            200402344,
            200408784,
            200395896,
            200428904,
            200404720,
            200402863,
            200404086,
            200425916,
            200413389,
            200409508,
            200408670,
            200409948,
            200401611,
            200399297,
            200403669
        ],
        "B": [
            200409525,
            200389992,
            200432442,
            200395023,
            200391231,
            200403848,
            200389421,
            200391233,
            200390818,
            200392560,
            200392816,
            200391784,
            200391655,
            200392657,
            200391007,
            200395691,
            200393122,
            200390776,
            200392459
        ],
        "A": [
            200408080,
            200387988,
            200433504,
            200390983,
            200388843,
            200402551,
            200387906,
            200388117,
            200387935,
            200388566,
            200388387,
            200388650,
            200388558,
            200388007,
            200388011,
            200389948,
            200389103,
            200388194,
            200388689
        ],
        "D": [
            200406761,
            200528793,
            200401484,
            200399149,
            200420505,
            200419712,
            200416986,
            200406203,
            200414310,
            200416697,
            200410720,
            200413945,
            200420475,
            200409512,
            200419982,
            200414162,
            200411839,
            200411433,
            200405601,
            200415016
        ],
        "E": [
            200397032,
            200427084,
            200411961,
            200433750,
            200593267,
            200592726,
            200467387,
            200400294,
            200428962,
            200409350,
            200426292,
            200428409,
            200434434,
            200414709,
            200432234,
            214976359,
            200427846,
            200430477,
            200431439,
            200435575,
            200437915,
            200434896
        ],
        "F2": [
            200479147,
            200478731,
            200478432,
            200478085,
            200477991,
            200477963,
            200476470,
            200447442,
            209038798
        ]
    },
    "name": "F2. Survival of the Weakest  hard version ",
    "statement": "Let a_1, a_2,\r\nldots, a_n be an array of non-negative integers. Let F(a_1, a_2,\r\nldots, a_n) be the sorted in the non-decreasing order array of n - 1\r\nsmallest numbers of the form a_i + a_j, where 1\r\nle i < j\r\nle n. In other words, F(a_1, a_2,\r\nldots, a_n) is the sorted in the non-decreasing order array of n - 1\r\nsmallest sums of all possible pairs of elements of the array a_1, a_2,\r\nldots, a_n. For example, F(1, 2, 5, 7) = [1 + 2, 1 + 5, 2 + 5] = [3, 6,\r\n7].You are given an array of non-negative integers a_1, a_2,\r\nldots, a_n. Determine the single element of the array\r\nunderbrace{F(F(F\r\nldots F}_{n-1}(a_1, a_2,\r\nldots, a_n)\r\nldots)). Since the answer can be quite large, output it modulo 10^9+7.\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"\nusing namespace std;\nusing ll = long long;\n\nconst ll mod = 1e9 + 7;\nconst ll mod2 = mod * mod;\n\nll smp(ll x, ll y) {\n    x += y;\n    x -= x < mod2 ? 0 : mod2;\n    return x;\n}\n\nint main() {\n    cin.tie(0); cout.tie(0); cin.sync_with_stdio(0); cout.sync_with_stdio(0);\n    ll a; cin >> a;\n    vector<ll> m(a);\n    for (auto& c : m) cin >> c;\n    if (a == 2) cout << (m[0] + m[1]) % mod, exit(0);\n    sort(m.begin(), m.end());\n    const ll N = min(a, (ll)50);\n    for (int i = 0; i < a - 1; ++i) {\n        priority_queue<array<ll, 2>, vector<array<ll, 2>>, greater<array<ll, 2>>> pq;\n        vector<ll> gde(m.size());\n        for (int i = 0; i + 1 < m.size(); ++i) {\n            pq.push({smp(m[i], m[i + 1]), i});\n            gde[i] = i + 1;\n        }\n        vector<ll> n;\n        while (n.size() < N) {\n            auto [x, i] = pq.top(); pq.pop();\n            n.push_back(x);\n            if (++gde[i] != m.size()) {\n                pq.push({smp(m[i], m[gde[i]]), i});\n            }\n        }\n        m = n;\n    }\n    cout << m[0] % mod;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "sortings",
        "two pointers"
    ],
    "dificulty": "3100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F2. Survival of the Weakest  hard version .json",
    "editorial_link": "https://codeforces.com//blog/entry/114644",
    "editorial": "Firstly, we will sort the array , and in the future we will always\r\nassume that all arrays in this problem are sorted.Letâs solve the\r\nproblem for .It may seem that with such constraints, the problem is\r\nsolved quite trivially: we implement the function for , and run it times\r\nto get an answer. But there is one nuance, with each iteration of , the\r\nnumbers in the array can increase by times (for example, if the array\r\nconsists entirely of identical numbers), which means that after only\r\noperations, we may have an overflow. Note that it is impossible to take\r\nthe numbers by modulo in the function itself, since then the sorted\r\norder will be lost, and it will be impossible (or very difficult) to\r\nrestore it using the remainder when dividing by instead of the numbers\r\nthemselves.To avoid this, we note an important property of the function\r\n:The intuition of this property is that if you subtract the same number\r\nfrom all the elements, then the relative order of the elements will not\r\nchange, and will not change when using the function. Just after the\r\nfirst iteration of , will be subtracted from all the numbers, then , ,\r\netc., in the end, the original answer will be minus . This property can\r\nbe proved more strictly by induction on .What does this wonderful\r\nproperty give us? Now we can subtract the same number from all the\r\nelements by first adding to the answer. It would be logical enough in\r\nany situation to subtract the minimum of the array from all its\r\nelements. Thanks to this, the minimum of the array will always be , and\r\nnow we can work with arrays whose minimum element is , which greatly\r\nsimplifies our life. This is one of the two key ideas in this problem.So\r\nletâs notice something interesting about the array .Observation: . The\r\nproof is obvious (let me remind you that the array is\r\nsorted).Observation: .Proof: since has length , has length . Among all\r\npairs of array elements there are pairs of the form , and . This means\r\nthat the original array has pairs in which the sum is . So, observation\r\nis proved.These two observations give us that . And after subtracting\r\nthe minimum .Thus, if we always subtract the minimum, each time after\r\napplying the function, the maximum in the array will be . Which allows\r\nus to work only with arrays of numbers from to , where there naturally\r\ncan be no problems with overflow.So, we got the solution for . Letâs\r\nimprove it to .The cornerstone in our previous solution is that we\r\nimplement the function for , which is pretty slow. Letâs learn how to\r\nimplement it for . This is a fairly standard problem.Note that if some\r\npair of the form is included in the array , then all pairs will also be\r\nincluded in the array , since the sum in these pairs is no more than .We\r\nwill build the array one element at a time, starting with the smallest.\r\nLetâs denote the array in which we will add these numbers for ,\r\ninitially is empty. For each index , we will store the minimum index\r\nsuch that the pair is still in . Initially, .We will mantain all numbers\r\nof the form in std::priority_queue. Then to add the next element to , we\r\nwill remove the minimum element from the queue, then increase the\r\ncorresponding by one and add the element to the queue again. After of\r\nsuch iteration we will get . Each iteration takes , which means that the\r\nasymptotics of finding the function is .In total, we learned how to\r\nsolve the problem in .Now we move on to the full solution, for .First we\r\nwill show what the solution looks like and intuition behind it, and a\r\nmore strict proof will be at the end.Letâs ask ourselves: when does the\r\nlast element of the array affect the answer to the problem?Very often we\r\nwill lose any mention of the element after the first transition: .The\r\nminimum sum of a pair of elements including is . And there is an pair\r\nwith not bigger sum: , , ..., .So the only case when will enter the\r\narray is if , because otherwise the pair will be less than , and there\r\nwill be pairs with a sum less than pairs of the form and the pair .Well,\r\nletâs assume it really happened that . Then .After subtracting the\r\nminimum: .If we run on this array again, we get: . After subtracting the\r\nminimum: .But remember that . Which means . Which means .It turns out\r\nthat if somehow remains in the array after two applications of the\r\nfunctions, then the last element of the array will be reduced by at\r\nleast half!This means that after just iterations of the function, either\r\nthe element will be completely evicted from the array, or the array will\r\nshrink into ! In both cases, the original element will be taken into\r\naccount in the final answer. In no way!The total number of times when\r\nthe maximum is halved is no more than , which means intuitively it is\r\napproximately clear that elements with indexes greater than will not\r\naffect the answer in any way.Therefore, the full solution would be to\r\nleave the first elements of the array . (a little more than ).Then apply\r\nthe function to this array times, but writing out minimal elements, not\r\n.After that, the length of the real array will also be equal to , and it\r\nremains only to run the function times to get the final answer.Final\r\nasymptotics: , where .Now letâs give a strict proof that this solution\r\nworks.We are following minimal elements .Technically, there are also\r\nelements in the array. But we have no information about their values.\r\nHowever, we know that all these elements are since we maintain sorted\r\norder. This means that the minimum sum of a pair of elements about which\r\nwe have no information is also . The whole proof is based on this simple\r\nobservation.Firstly, it is not difficult to understand that minimum\r\nelements are exactly enough to recalculate minimum element in . Since we\r\nhave pairs of elements , , ..., . And the sum in each of these pairs is\r\nno more than , which means no more than the sum in any pair about which\r\nwe have no information.Therefore, in any incomprehensible situation, we\r\ncan recalculate with the loss of one of the elements. Letâs see when it\r\nis possible to recalculate all minimal elements.Again, the minimum\r\nelement about which we have no information from is . So if we find\r\nelements that , then we can recalculate minimal elements of through\r\nminimal elements of . We have a pair of the form , as well as a pair .\r\nSo if , then we can recalculate all minimal elements.And if\r\nrecalculation is not possible, then is executed. Then, having\r\nencountered such a situation, we will recalculate twice with the loss of\r\nthe last element, thus reducing by . After such a recalculation, the\r\nlast element will be at least half as small as it was before (this is\r\npart of the main tutorial). So after of such element removals, the array\r\nwill slide into and everything is clear. And if the number of removals\r\nis less than , then one of the elements will certainly live to the end,\r\nand will be the answer to the problem. Thus, the correctness of the\r\nsolution has been successfully proved.Bonus for those who are still\r\nalive: find a more accurate estimate for and build a test on which this\r\nsolution, but keeping track of the minimum element (one less than\r\nnecessary), will give the wrong answer.\r\n",
    "hint": [
        "Hint 1 Figure out how to implement the function in",
        "Hint 1.1 You'll need or",
        "Hint 2 If you run for times, we'll get the solution in . However, the numbers in the array can grow very fast. Can you somehow modify the numbers in the array so that changes in a predictable way?",
        "Hint 2.2",
        "Hint 3 How to solve the problem if ? ? Can you notice anything about these solutions?",
        "Hint 4 If is large enough, then where any number , in other words: the largest element is useless for the final answer",
        "Hint 5 Only a small number of the smallest elements of the original array will affect the answer"
    ]
}