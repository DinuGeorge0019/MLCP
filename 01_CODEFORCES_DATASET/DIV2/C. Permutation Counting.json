{
    "link": "https://codeforces.com//contest/1972/problem/C",
    "problemId": "2620257",
    "problem_idx": "C",
    "shortId": "1972C",
    "contest_number": "1972",
    "problem_submissions": {
        "E": [
            258907706,
            258906689,
            258908735,
            258886738,
            258901485,
            258906022,
            258913488,
            258911752,
            258913907,
            258913999,
            258916450,
            258914641,
            258910690,
            258920127,
            258912063,
            258910772,
            258915135,
            258914430
        ],
        "D2": [
            258898687,
            258895159,
            258892501,
            258911037,
            258914022,
            258908970,
            258902827,
            258898337,
            258897157,
            258907327,
            258896398,
            258902164,
            258918202,
            258887350,
            258904678,
            258922033,
            258908345,
            258904117
        ],
        "D1": [
            258879224,
            258887924,
            258886804,
            258889175,
            258886155,
            258888199,
            258887247,
            258892352,
            258882986,
            258888686,
            258890551,
            258888559,
            258871438,
            258899829,
            258888037,
            258891042,
            258898086
        ],
        "C": [
            258877059,
            258881081,
            258882446,
            258885988,
            258877387,
            258876397,
            258878529,
            258880771,
            258878031,
            258885936,
            258887870,
            258877926,
            258892416,
            258887161,
            258883084,
            258878181,
            258887720
        ],
        "B": [
            258867491,
            258869795,
            258867759,
            258890058,
            258867358,
            258869952,
            258866940,
            258871940,
            258871253,
            258870378,
            258871631,
            258870002,
            258877290,
            258868779,
            258871179,
            258886225,
            258878415
        ],
        "A": [
            258864858,
            258865079,
            258865742,
            258864993,
            258865457,
            258865824,
            258864584,
            258865871,
            258870891,
            258866770,
            258865991,
            258864627,
            258872625,
            258865600,
            258867355,
            258871468,
            258864633
        ],
        "F": [
            258956362
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129027",
    "editorial": "Iâm not sure if that was the right approach for the misread verison, but\r\nafter realizing my mistake, simply disabling the outer loop to handle\r\nonly case made it AC. 258896138 Wouldâve been great for me if the\r\nproblem was actually about the misread one :)\r\n",
    "name": "C. Permutation Counting",
    "statement": "You have some cards. An integer between 1 and n is written on each card:\r\nspecifically, for each i from 1 to n, you have a_i cards which have the\r\nnumber i written on them.There is also a shop which contains unlimited\r\ncards of each type. You have k coins, so you can buy k new cards in\r\ntotal, and the cards you buy can contain any integer between 1 and\r\nn.After buying the new cards, you rearrange all your cards in a line.\r\nThe score of a rearrangement is the number of (contiguous) subarrays of\r\nlength n which are a permutation of [1, 2,\r\nldots, n]. What’s the maximum score you can get?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>using namespace std; #define int int64_t#define pb push_back#define pii pair<int, int>#define st first#define nd second#define sz(x) (int)(x).size()#define all(x) (x).begin(), (x).end() const int MAXN = 200'009; int tab[MAXN]; void solve() {\tint n, K;\tcin >> n >> K;\tfor(int i=1;i<=n;i++) {\t\tcin >> tab[i];\t}\tint s = 0;\tint e = 1e13;\tint ans = 0;\twhile(e-s>1) {\t\tint m = (e+s)/2;\t\tint cost = 0;\t\tint ile_mniej = 0;\t\tfor(int i=1;i<=n;i++) {\t\t\tcost += max((int)0, m-tab[i]);\t\t\tif(tab[i]<=m) ile_mniej++;\t\t}\t\tif(cost>K) {\t\t\te = m;\t\t} else {\t\t\ts = m;\t\t\tans = max(ans, m*n);\t\t}\t}\tfor(int i=1;i<=n;i++) {\t\tK -= max((int)0, s-tab[i]);\t}\tfor(int i=1;i<=n;i++) {\t\tif(tab[i]>s) ans++;\t\telse {\t\t\tif(K) {\t\t\t\tK--;\t\t\t\tans++;\t\t\t} \t\t}\t}\tcout << ans-n+1 << \"\\n\";} int32_t main() {\tios_base::sync_with_stdio(false);\tcin.tie(NULL);\t\tint t;\tcin >> t;\twhile(t--) {\t\tsolve();\t}}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "constructive algorithms",
        "greedy",
        "implementation",
        "math",
        "sortings"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Permutation Counting.json",
    "hint": []
}