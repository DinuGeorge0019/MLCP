{
    "link": "https://codeforces.com//contest/1152/problem/B",
    "problemId": "335381",
    "problem_idx": "B",
    "shortId": "1152B",
    "contest_number": "1152",
    "problem_submissions": {
        "C": [
            53244845,
            53230927,
            53233766,
            53235808,
            53234198,
            53234839,
            53238158,
            53233895,
            53244428,
            53238661,
            53245124,
            53237428,
            53241947,
            53255111,
            53240873,
            53232261,
            53233767,
            53232829
        ],
        "E": [
            53239734,
            53245640,
            53249082,
            53237299,
            53252319,
            53253962,
            53269982,
            53253449,
            53252636,
            53255804,
            53252841,
            53252353,
            53235804,
            53253519,
            53250724,
            53255613,
            53476482
        ],
        "D": [
            53233906,
            53239025,
            53240632,
            53250831,
            53239012,
            53242704,
            53250969,
            53239158,
            53239278,
            53243068,
            53249440,
            53254093,
            53239872,
            53249862,
            53242480,
            53247260,
            53236086,
            53237628,
            53240315
        ],
        "B": [
            53229253,
            53234506,
            53230572,
            53231304,
            53231144,
            53231405,
            53233565,
            53231636,
            53233110,
            53231852,
            53233634,
            53233426,
            53232376,
            53236011,
            53235559,
            53230731,
            53230129,
            53231640,
            53230247
        ],
        "A": [
            53226242,
            53226637,
            53226146,
            53227612,
            53226534,
            53227116,
            53228309,
            53228363,
            53226234,
            53226947,
            53228169,
            53229011,
            53227021,
            53226493,
            53226176,
            53226318,
            53226306,
            53226785
        ],
        "F2": [
            53255434,
            139447309
        ],
        "F1": [
            53255396
        ]
    },
    "name": "B. Neko Performs Cat Furrier Transform",
    "statement": "Cat Furrier Transform is a popular algorithm among cat programmers to\r\ncreate longcats. As one of the greatest cat programmers ever exist, Neko\r\nwants to utilize this algorithm to create the perfect longcat.Assume\r\nthat we have a cat with a number x. A perfect longcat is a cat with a\r\nnumber equal 2^m - 1 for some non-negative integer m. For example, the\r\nnumbers 0, 1, 3, 7, 15 and so on are suitable for the perfect\r\nlongcats.In the Cat Furrier Transform, the following operations can be\r\nperformed on x: (Operation A): you select any non-negative integer n and\r\nreplace x with x\r\noplus (2^n - 1), with\r\noplus being a bitwise XOR operator. (Operation B): replace x with x + 1.\r\nThe first applied operation must be of type A, the second of type B, the\r\nthird of type A again, and so on. Formally, if we number operations from\r\none in the order they are executed, then odd-numbered operations must be\r\nof type A and the even-numbered operations must be of type B.Neko wants\r\nto produce perfect longcats at industrial scale, thus for each cat Neko\r\nonly wants to perform at most 40 operations. Can you help Neko writing a\r\ntransformation plan?Note that it is to minimize the number of\r\noperations. You just need to use no more than 40 operations.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define st first\n#define nd second\n#define pb push_back\n#define pf push_front\n#define ppb pop_back\n#define ppf pop_front\n#define umax(x,y) x=max(x,y)\n#define umin(x,y) x=min(x,y)\n#define ll long long \n#define ii pair<int,int>\n#define iii pair<ii,int>\n#define iiii pair<ii,ii>\n#define sz(x) ((int) x.size())\n#define orta ((bas+son)/2)\n#define all(x) x.begin(),x.end()\n#define pw(x) (1<<(x))\n#define inf 100000009\n#define MOD 1000003 \n#define N 100005\n#define M 1000003\n#define LOG 20\n#define KOK 300\n#define EPS 0.0000001\nusing namespace std;\n\nbool ok(int x) {\n\n\twhile(x) {\n\n\t\tif(x%2==0) return 0;\n\n\t\tx>>=1;\n\n\t}\n\n\treturn 1;\n\n}\n\nint main() {\n\n\tint n;\n\tint cnt=0;\n\n\tscanf(\"%d\",&n);\n\n\tvector<int> op;\n\n\tfor(int i=20;i>0;i--) {\n\n\t\tif(n&pw(i-1)) continue ;\n\n\t\top.pb(i);\n\n\t\tn^=(pw(i)-1);\n\n\t\t++cnt;\n\n\t\tif(ok(n)) break ;\n\n\t\tn++;\n\n\t\t++cnt;\n\n\t}\n\n\tprintf(\"%d\\n\",cnt);\n\n\tfor(int i:op) printf(\"%d \",i);\n\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "dfs and similar",
        "math"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Neko Performs Cat Furrier Transform.json",
    "editorial_link": "https://codeforces.com/blog/entry/66696",
    "editorial": "There are various greedy solutions possible. Iâll only cover one of\r\nthem.Weâll perform a loop as follows: If , stop the process (since itâs\r\nalready correct). If (), perform operation A with . Obviously, the\r\nresulting will be , which satisfies the criteria, so we stop the\r\nprocess. Otherwise, letâs denote as the position/exponential of the most\r\nsignificant bit of (for example, ). Weâll perform operation A with . If\r\nafter this phase is not a valid number, weâll then perform operation B\r\nand return to the beginning of the loop.This will never take more than\r\nqueries, since each iteration removes the most significant bit (and it\r\nwould never reappear after later steps), and can only have at most bits\r\ninitially.Also, it is possible to solve this problem by finding exactly\r\nshortest operation sequence by using a BFS. However, this was not\r\nrequired.\r\n",
    "hint": []
}