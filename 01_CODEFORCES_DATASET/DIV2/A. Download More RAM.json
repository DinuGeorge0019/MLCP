{
    "link": "https://codeforces.com//contest/1629/problem/A",
    "problemId": "1270550",
    "problem_idx": "A",
    "shortId": "1629A",
    "contest_number": "1629",
    "problem_submissions": {
        "E": [
            143691687,
            143672752,
            143687137,
            143663655,
            143674506,
            143679445,
            143862635,
            143682492,
            143680665,
            143680424,
            143685684,
            143684891,
            143753002,
            143685619,
            143692185,
            143689230,
            143685863,
            143687115,
            143695099,
            143693974
        ],
        "F2": [
            143688718,
            143726329,
            143690987
        ],
        "F1": [
            143676123,
            143697164,
            143692998,
            143741879,
            143678223,
            143750588,
            143750365
        ],
        "D": [
            143667461,
            143661533,
            143674891,
            143656107,
            143648676,
            143665361,
            143663909,
            143668220,
            143661278,
            143662732,
            143656926,
            143668180,
            143668746,
            143665526,
            143669234,
            143667378,
            143676861,
            143663591,
            143664123
        ],
        "C": [
            143651046,
            143647499,
            143659885,
            143651714,
            143662268,
            143651456,
            143647120,
            143654421,
            143646086,
            143650221,
            143697555,
            143656282,
            143655178,
            143644392,
            143657665,
            143654804,
            143651022,
            143650097,
            143652583
        ],
        "B": [
            143642034,
            143637040,
            143638720,
            143651837,
            143664772,
            143638989,
            143637268,
            143641201,
            143638312,
            143634980,
            143632383,
            143644246,
            143635339,
            143635326,
            143637617,
            143639992,
            143639371,
            143640785,
            143642627
        ],
        "A": [
            143633916,
            143631168,
            143632391,
            143651906,
            143666062,
            143631304,
            143631044,
            143630886,
            143631218,
            143630607,
            143639841,
            143633922,
            143630487,
            143630572,
            143630653,
            143631188,
            143630505,
            143635250,
            143635282
        ]
    },
    "name": "A. Download More RAM",
    "statement": "Did you know you can download more RAM? There is a shop with n different\r\npieces of software that increase your RAM. The i-th RAM increasing\r\nsoftware takes a_i GB of memory to run (), and gives you an additional\r\nb_i GB of RAM (permanently). Your PC currently has k GB of RAM.Note that\r\nyou can\u2019t use a RAM-increasing software if it takes more GB of RAM to\r\nuse than what you currently have.Since RAM is the most important thing\r\nin the world, you wonder, what is the maximum possible amount of RAM\r\nachievable?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define mod 998244353\nll read() {\n\tll x=0,f=1;char ch=getchar();\n\tfor(;!isdigit(ch);ch=getchar()) if(ch=='-') f=-1;\n\tfor(;isdigit(ch);ch=getchar()) x=x*10+ch-'0';\n\treturn x*f;\n}\nstruct Data {\n\tint a,b;\n\tbool operator <(const Data tmp) const {\n\t\treturn a<tmp.a;\n\t}\n}t[1010];\nint T;\nint n,k;\nint main() {\n\tT=read();\n\twhile(T--) {\n\t\tn=read(),k=read();\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tt[i].a=read();\n\t\t}\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tt[i].b=read();\n\t\t}\n\t\tsort(t+1,t+n+1);\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tif(k>=t[i].a) k+=t[i].b;\n\t\t\t\n\t\t}\n\t\tcout<<k<<'\\n';\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "sortings"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Download More RAM.json",
    "editorial_link": "https://codeforces.com//blog/entry/99276",
    "editorial": "Using some software is never bad. It always ends up increasing your RAM\r\nif you can use it. And for any possible order to use a set of software\r\nin, they all result in the same amount RAM in the end. So we can\r\ngreedily go through the list, using software if you have enough RAM for\r\nit. After going through the list, your RAM may have increased, so maybe\r\nsome of the software you couldn\u00e2\u0080\u0099t use at the start is now usable.\r\nTherefore we have to go through the list again (now with the used\r\nsoftware removed) until the RAM doesn\u00e2\u0080\u0099t increase anymore. This results\r\nin time complexity , which is fine for these constraints.It turns out we\r\ndon\u00e2\u0080\u0099t actually need to go through the list of software more than once if\r\nwe sort it by . This results in time complexity.\r\n"
}