{
    "link": "https://codeforces.com//contest/1998/problem/C",
    "problemId": "2808661",
    "problem_idx": "C",
    "shortId": "1998C",
    "contest_number": "1998",
    "problem_submissions": {
        "E2": [
            275597415,
            275585523,
            275585603,
            275624432,
            275607882,
            275614357,
            275595887,
            275619832,
            275623737,
            275625136,
            275600639,
            275623825,
            275627451,
            275623692,
            275628307,
            275623705,
            275626791,
            275625619,
            275628722,
            275612227
        ],
        "E1": [
            275597010,
            275587241,
            275585991,
            275593723,
            275608426,
            275614274,
            275560961,
            275612542,
            275602427,
            275605651,
            275567685,
            275618625,
            275609795,
            275605031,
            275592538,
            275623999,
            275627361,
            275625758,
            275620522,
            275607421
        ],
        "D": [
            275586064,
            275606706,
            275611517,
            275606418,
            275612571,
            275598942,
            275628023,
            275600312,
            275614869,
            275612903,
            275613506,
            275603714,
            275617537,
            275620550,
            275622209,
            275606375,
            275604352,
            275608175,
            275610636,
            275618730
        ],
        "C": [
            275572305,
            275570533,
            275637129,
            275635205,
            275624349,
            275572002,
            275579268,
            275577783,
            275618992,
            275588428,
            275579740,
            275597585,
            275619380,
            275587772,
            275578283,
            275590393,
            275603888,
            275598655,
            275576819,
            275599430,
            275594072,
            275589195
        ],
        "B": [
            275543162,
            275540617,
            275553706,
            275541326,
            275549095,
            275544297,
            275571979,
            275551098,
            275551147,
            275547296,
            275620850,
            275549937,
            275541075,
            275551747,
            275543184,
            275550406,
            275547364,
            275572048,
            275560766,
            275545023
        ],
        "A": [
            275538909,
            275538891,
            275539594,
            275538822,
            275542591,
            275539447,
            275539471,
            275541785,
            275545969,
            275543154,
            275621852,
            275552627,
            275538828,
            275539052,
            275540124,
            275543325,
            275540250,
            275542995,
            275540086
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/132512",
    "editorial": "My solution is a bit overkill, check out neal submission 275613185 Video\r\neditorial\r\n",
    "name": "C. Perform Operations to Maximize Score",
    "statement": "satyam343’s biggest fanYou are given an array a of length n and an\r\ninteger k. You are also given a binary array b of length n. You can\r\nperform the following operation at most k times: Select an index i (1\r\nleq i\r\nleq n) such that b_i = 1. Set a_i = a_i + 1 (i.e., increase a_i by 1).\r\nYour is defined to be\r\nmax\r\nlimits_{i = 1}^{n}\r\nleft( a_i +\r\noperatorname{median}(c_i)\r\nright), where c_i denotes the array of length n-1 that you get by\r\ndeleting a_i from a. In other words, your score is the maximum value of\r\na_i +\r\noperatorname{median}(c_i) over all i from 1 to n.Find the maximum score\r\nthat you can achieve if you perform the operations optimally.For an\r\narbitrary array p,\r\noperatorname{median}(p) is defined as the\r\nleft\r\nlfloor\r\nfrac{|p|+1}{2}\r\nright\r\nrfloor-th element of p. For example,\r\noperatorname{median}\r\nleft( [3,2,1,3]\r\nright) = 2 and\r\noperatorname{median}\r\nleft( [6,2,4,5,1]\r\nright) = 4.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>using namespace std; #define int long long struct node{\tint a,b;}; bool cmp(node a,node b){\treturn a.a<b.a;} node a[200005]; bool check(int n,int mid,int sum){\tpriority_queue <int,vector <int>,greater<int> > q;\tint cnt=-((n+1)/2-1);\tfor(int i=1;i<=n;i++)\t\tif(a[i].a<mid)\t\t{\t\t\tcnt++;\t\t\tif(a[i].b==1)\t\t\t\tq.push(mid-a[i].a);\t\t} \tif(cnt<=0)\t\treturn true; \tif(q.size()<cnt)\t\treturn false; \tfor(int i=1;i<=cnt;i++)\t{\t\tsum -= q.top();\t\tq.pop();\t\tif(sum<0)\t\t\treturn false;\t}\treturn true;} void work(){\tint n,k;\tcin >> n >> k;\tfor(int i=1;i<=n;i++)\t\tscanf(\"%lld\",&a[i].a); \tfor(int i=1;i<=n;i++)\t\tscanf(\"%lld\",&a[i].b); \tsort(a+1,a+n+1,cmp); \tint pos=0;\tfor(int i=1;i<=n;i++)\t\tif(a[i].b==1)\t\t\tpos=i; \tif(pos==n)\t{\t\tprintf(\"%lld\\n\",a[n/2].a+a[n].a+k);\t\treturn;\t} \tif(pos==0)\t{\t\tprintf(\"%lld\\n\",a[n].a+a[n/2].a);\t\treturn;\t} \tswap(a[n],a[pos]); \tsort(a+1,a+n,cmp); \tint ans=a[n].a+a[n/2].a+k;\tsort(a+1,a+n+1,cmp); \tint l=1,r=3e9;\twhile(l<=r)\t{\t\tint mid=(l+r)/2;\t\tif(check(n-1,mid-a[n].a,k))\t\t\tans=max(ans,mid), l=mid+1;\t\telse\t\t\tr=mid-1;\t}\tprintf(\"%lld\\n\",ans);} signed main(){\tint T;\tcin >> T;\twhile(T--)\t\twork();\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "constructive algorithms",
        "greedy",
        "implementation"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Perform Operations to Maximize Score.json",
    "hint": [
        "Hint 1 Lets forget about and focus on first. If we have and array of elements and binary array of elements . What is the maximum median we can get using atmax operations?",
        "Hint 2 We can binary search for median. We can directly count how many elements are more than mid, and how many elements we can make more than median. Using segment tree, walk on segment tree and blah blah blah............"
    ]
}