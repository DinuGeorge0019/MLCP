{
    "link": "https://codeforces.com//contest/1325/problem/B",
    "problemId": "561454",
    "problem_idx": "B",
    "shortId": "1325B",
    "contest_number": "1325",
    "problem_submissions": {
        "E": [
            73269401,
            73332152,
            73299753,
            73395378,
            73360091,
            73360008
        ],
        "F": [
            73248978,
            73251409,
            73254927,
            73256076,
            73255610,
            73257423,
            73262364,
            73259512,
            73356282,
            73356144,
            73263300,
            73263158,
            73261258,
            73265350,
            73262400,
            73265312,
            73263991,
            73268889,
            73270937
        ],
        "D": [
            73244100,
            73243574,
            73240330,
            73242761,
            73241884,
            73241409,
            73246071,
            73252259,
            73251009,
            73248948,
            73245139,
            73243278,
            73250903,
            73243449,
            73248645,
            73246841,
            73242067
        ],
        "C": [
            73236055,
            73236410,
            73233326,
            73229143,
            73233805,
            73246561,
            73234913,
            73236946,
            73236155,
            73241716,
            73237967,
            73239330,
            73240506,
            73236929,
            73231917,
            73233819,
            73237479
        ],
        "B": [
            73227966,
            73225855,
            73227806,
            73223000,
            73224291,
            73227411,
            73226586,
            73225151,
            73229505,
            73230477,
            73228144,
            73229165,
            73230081,
            73251563,
            73223597,
            73227071,
            73225379
        ],
        "A": [
            73222798,
            73222976,
            73224188,
            73222275,
            73222466,
            73223833,
            73222584,
            73222533,
            73226908,
            73225662,
            73224126,
            73224793,
            73228118,
            73227876,
            73225812,
            73222400,
            73222615
        ]
    },
    "name": "B. CopyCopyCopyCopyCopy",
    "statement": "Ehab has an array a of length n. He has just enough free time to make a\r\nnew array consisting of n copies of the old array, written back-to-back.\r\nWhat will be the length of the new arrayâ€™s longest increasing\r\nsubsequence?A sequence a is a subsequence of an array b if a can be\r\nobtained from b by deletion of several (possibly, zero or all) elements.\r\nThe longest increasing subsequence of an array is the longest\r\nsubsequence such that its elements are ordered in strictly increasing\r\norder.\r\n",
    "solutions": [
        "///BE NAME KHODA\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define S second\n#define F first\n#define int long long\n\ntypedef long long ll;\ntypedef long double ld;\n\nconst int maxn = 3e5+10;\nconst int mod = 1e9+7;\nconst ll inf = 1e18+10;\n\nint n, m;\nint a[maxn];\nset<int> s;\n\nsigned main()\n{\n    ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n\n    int q; cin>> q;\n    while(q--)\n    {\n    cin>> n; s.clear();\n    for(int i = 1; i <= n; i++)\n    {\n        int x; cin>> x;\n        s.insert(x);\n    }\n    cout<< s.size() <<\"\\n\";\n    }\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. CopyCopyCopyCopyCopy.json",
    "editorial_link": "https://codeforces.com//blog/entry/74235",
    "editorial": "Let the number of distinct elements in be called . Clearly, the answer\r\nis limited by . Now, you can construct your subsequence as follows: take\r\nthe smallest element from the first copy, the second smallest element\r\nfrom the second copy, and so on. Since there are enough copies to take\r\nevery element, the answer is . Code link: https://pastebin.com/hjcxUDmY\r\nFirst AC: socho\r\n",
    "hint": []
}