{
    "link": "https://codeforces.com//contest/1934/problem/E",
    "problemId": "2505364",
    "problem_idx": "E",
    "shortId": "1934E",
    "contest_number": "1934",
    "problem_submissions": {
        "D2": [
            249138861,
            249138286,
            249148347,
            249142453,
            249157574,
            249154795,
            249156400,
            249152916,
            249153265,
            249152468,
            249159235,
            249151373,
            249157739,
            249158790,
            249158719,
            249157715,
            249151531,
            249154568
        ],
        "D1": [
            249125699,
            249128677,
            249134651,
            249133932,
            249131438,
            249132804,
            249141726,
            249142358,
            249133864,
            249137039,
            249209635,
            249137420,
            249137703,
            249134521,
            249138551,
            249144781,
            249136421,
            249139126,
            249137860
        ],
        "C": [
            249115447,
            249119119,
            249121601,
            249125691,
            249121785,
            249119998,
            249118653,
            249123649,
            249122623,
            249127946,
            249126111,
            249128427,
            249128773,
            249122463,
            249117989,
            249122384,
            249127040,
            249126459
        ],
        "B": [
            249103913,
            249106551,
            249108288,
            249115212,
            249104799,
            249109733,
            249104490,
            249108744,
            249111760,
            249108303,
            249108953,
            249111319,
            249106725,
            249111924,
            249107412,
            249112945,
            249107802,
            249115127
        ],
        "A": [
            249100199,
            249101211,
            249103188,
            249100104,
            249099925,
            249108944,
            249100108,
            249104411,
            249104537,
            249100853,
            249102757,
            249099965,
            249100710,
            249100333,
            249102042,
            249101590,
            249101009,
            249100585
        ],
        "E": [
            249308601
        ]
    },
    "name": "E. Weird LCM Operations",
    "statement": "Given an integer n, you construct an array a of n integers, where a_i =\r\ni for all integers i in the range [1, n]. An operation on this array is\r\ndefined as follows: Select three distinct indices i, j, and k from the\r\narray, and let x = a_i, y = a_j, and z = a_k. Update the array as\r\nfollows: a_i =\r\noperatorname{lcm}(y, z), a_j =\r\noperatorname{lcm}(x, z), and a_k =\r\noperatorname{lcm}(x, y), where\r\noperatorname{lcm} represents the least common multiple. Your task is to\r\nprovide a possible sequence of operations, containing at most\r\nlfloor\r\nfrac{n}{6}\r\nrfloor + 5 operations such that after executing these operations, if you\r\ncreate a set containing the greatest common divisors (GCDs) of all\r\nsubsequences with a , then all numbers from 1 to n should be present in\r\nthis set.After all the operations a_i\r\nle 10^{18} should hold for all 1\r\nle i\r\nle n.We can show that an answer always exists.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\n#define endl '\\n'\n#define int long long\n\nconst int N=2e3+5;\n\nvoid solve() {\n    int n;\n    cin>>n;\n    vector<tuple<int,int,int>>ans;\n    int now=n,low=n/2+2;\n    while(now!=2){\n        if(now<=low){\n            ans.emplace_back(1,now-1,now);\n            break;\n        }\n        if(now%4==0)ans.emplace_back(now/2-1,now-1,now);\n        else if(now%2==0)ans.emplace_back(now/2,now-2,now-1);\n        else ans.emplace_back(now-2,now-1,now);\n        now-=3;\n    }\n    cout<<ans.size()<<endl;\n    for(auto [i,j,k]:ans)cout<<i<<' '<<j<<' '<<k<<endl;\n}\n\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n    int T=1;\n    cin>>T;\n    while(T--){\n        solve();\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "number theory"
    ],
    "dificulty": "3000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Weird LCM Operations.json",
    "editorial_link": "https://codeforces.com//blog/entry/126423",
    "editorial": "SolutionFact 1: If for their pairwise GCDs are equal to their common GCD\r\n(this means that = where are pairwise coprime), then making an operation\r\non them (gives ) and looking at the subsequences of size EXACTLY 2, we\r\nfind all three GCD: , , . Let\u00e2\u0080\u0099s call such tuple NICE.Result: If we can\r\nsplit all values in the array into independent NICE tuples, then we can\r\njust perform an operation on each of them and the problem is solved.Fact\r\n2: We don\u00e2\u0080\u0099t touch any value . If there is , then . If we don\u00e2\u0080\u0099t touch ,\r\nthen we will always have another value that is divisible by (it\u00e2\u0080\u0099s easy\r\nto see that performing an operation on a multiple of leaves us with\r\nanother multiple of ), so we will always have GCD equal to taking a\r\nsubsequence .Fact 3: A sequence of consecutive integers can be\r\npartitioned into disjoint sets of size , each forming a NICE tuple, if\r\nequals or .For : The sets , and are NICE because, the first and third\r\nterms are always odd, and the second term is always even. The set is\r\nNICE because it has the form of , , , ensuring that the pairwise GCDs\r\nare equal to the common GCD.For : The sets , , and are NICE, the same\r\nlogic like follows,If we can do one operation as , and if we can do one\r\noperation as . Let\u00e2\u0080\u0099s group the remaining elements into the groups of\r\nsize , starting from the end, and continuing until we reach the number\r\n.Eventually, we can count that we used no more than operations.Solutions\r\nfor should be found manually.\r\n"
}