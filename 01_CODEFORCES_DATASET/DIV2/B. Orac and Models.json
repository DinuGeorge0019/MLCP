{
    "link": "https://codeforces.com//contest/1350/problem/B",
    "problemId": "619072",
    "problem_idx": "B",
    "shortId": "1350B",
    "contest_number": "1350",
    "problem_submissions": {
        "E": [
            79855181,
            79866892,
            79867578,
            79860431,
            79865664,
            79871653,
            79862377,
            79873286,
            79855797,
            79870095,
            79877566,
            79875250,
            79879082,
            79877229,
            79874099,
            79876185,
            79865098,
            79874891,
            79878375
        ],
        "D": [
            79841799,
            79863715,
            79838223,
            79843636,
            79845619,
            79851762,
            79859376,
            79851422,
            79856645,
            79867069,
            79852959,
            79854133,
            79862270,
            79854555,
            79857955,
            79860745,
            79863550,
            79877253,
            79858065,
            79853653
        ],
        "C": [
            79826908,
            79832989,
            79819179,
            79836044,
            79829980,
            79835199,
            79827905,
            79823236,
            79839284,
            79843003,
            79842971,
            79842595,
            79842398,
            79842899,
            79841428,
            79836029,
            79843846,
            79828517,
            79847123,
            79843527
        ],
        "B": [
            79820647,
            79822816,
            79842662,
            79823960,
            79824033,
            79823709,
            79822810,
            79820992,
            244797086,
            79824014,
            79827065,
            79834456,
            79825730,
            79829712,
            79832808,
            79831732,
            79824775,
            79833342,
            79819486,
            79827690,
            79827705
        ],
        "A": [
            79816852,
            79817819,
            79835688,
            79816825,
            79817311,
            79817807,
            79817556,
            79817787,
            79817609,
            79823750,
            79829915,
            79816664,
            79822342,
            79821478,
            79817922,
            79818871,
            79819448,
            79816826,
            79818898,
            79816798
        ],
        "F": [
            79877945
        ]
    },
    "name": "B. Orac and Models",
    "statement": "There are n models in the shop numbered from 1 to n, with sizes s_1,\r\ns_2,\r\nldots, s_n.Orac will buy some of the models and will arrange them in the\r\norder of increasing numbers (i.e. indices, but not sizes).Orac thinks\r\nthat the obtained arrangement is , if for any two adjacent models with\r\nindices i_j and i_{j+1} (note that i_j < i_{j+1}, because Orac arranged\r\nthem properly), i_{j+1} is divisible by i_j and s_{i_j} <\r\ns_{i_{j+1}}.For example, for 6 models with sizes\r\n{3, 6, 7, 7, 7, 7\r\n}, he can buy models with indices 1, 2, and 6, and the obtained\r\narrangement will be beautiful. Also, note that the arrangement with\r\nexactly one model is also considered beautiful.Orac wants to know the\r\nmaximum number of models that he can buy, and he may ask you these\r\nqueries many times.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ll long long\n#define N 100010\nusing namespace std;\nint t,n,a[N],dp[N],ansn;\nint main(){\n\tcin>>t;\n\twhile (t--){\n\t\tcin>>n;ansn=0;\n\t\tfor (int i=1;i<=n;i++)cin>>a[i],dp[i]=1;\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tfor (int j=i+i;j<=n;j+=i)if (a[j]>a[i])dp[j]=max(dp[j],dp[i]+1);\n\t\t\tansn=max(ansn,dp[i]);\n\t\t}\n\t\tcout<<ansn<<endl;\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "math",
        "number theory"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Orac and Models.json",
    "editorial_link": "https://codeforces.com//blog/entry/77284",
    "editorial": "Considering DP, we can design DP statuses as follow: f_i stands for the\r\nlength of the longest beautiful sequence end up with index i. We can\r\nfind the transformation easily: f_i =\r\nmax\r\nlimits_{j\r\nmid i, s_j<s_i}\r\n{f_j + 1\r\n} Then, the length of answer sequence is the maximum value among\r\nf_1,f_2,\r\ncdots,f_n.About the complexity of DP: If you transform by iterating\r\nmultiples, it will be O(n\r\nlog n) (According to properties of Harmonic Series); if you iterate\r\ndivisors, then it will be O(n\r\nsqrt n). Fortunately, both of them are acceptable in this problem.\r\n",
    "hint": []
}