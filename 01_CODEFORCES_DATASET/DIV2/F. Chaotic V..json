{
    "link": "https://codeforces.com//contest/1293/problem/F",
    "problemId": "519787",
    "problem_idx": "F",
    "shortId": "1293F",
    "contest_number": "1293",
    "problem_submissions": {
        "F": [
            69144490
        ],
        "E": [
            69128562,
            69139795,
            69142024,
            69131945,
            69142296,
            69141087,
            69144888,
            69145848,
            69164707
        ],
        "D": [
            69110626,
            69117551,
            69124060,
            69120174,
            69127386,
            69126155,
            69129595,
            69130299,
            69114746,
            69117610,
            69118282,
            69119817,
            69121032,
            69120169,
            69124854,
            69120660,
            69119364,
            69123969,
            69120677
        ],
        "C": [
            69102974,
            69108977,
            69107084,
            69104834,
            69114459,
            69118062,
            69106027,
            69117297,
            69105999,
            69106862,
            69108959,
            69111194,
            69109221,
            69111162,
            69107446,
            69109831,
            69111539,
            69110537,
            69100793
        ],
        "B": [
            69100602,
            69105372,
            69103818,
            69141041,
            69106215,
            69103881,
            69107978,
            69109703,
            69102030,
            69102659,
            69103831,
            69103631,
            69104162,
            69106217,
            69102105,
            69103438,
            69103183,
            69102839,
            69102420
        ],
        "A": [
            69100208,
            69103403,
            69101074,
            69134161,
            69102156,
            69101452,
            69101459,
            69101593,
            69100449,
            69100351,
            69100975,
            69100577,
            69100919,
            69101698,
            69100184,
            69100301,
            69100964,
            69100796,
            69109424
        ]
    },
    "name": "F. Chaotic V.",
    "statement": "The emotion samples are now sufficient. After almost 3 years, it’s time\r\nfor Ivy to awake her bonded sister, Vanessa.The system inside A.R.C.’s\r\nLibrary core can be considered as an undirected graph with infinite\r\nnumber of processing nodes, numbered with all positive integers (1, 2,\r\n3,\r\nldots). The node with a number x (x > 1), is directly connected with a\r\nnode with number\r\nfrac{x}{f(x)}, with f(x) being the lowest prime divisor of x.Vanessa’s\r\nmind is divided into n fragments. Due to more than 500 years of coma,\r\nthe fragments have been scattered: the i-th fragment is now located at\r\nthe node with a number k_i! (a factorial of k_i).To maximize the chance\r\nof successful awakening, Ivy decides to place the samples in a node P,\r\nso that the total length of paths from each fragment to P is smallest\r\npossible. If there are multiple fragments located at the same node, the\r\npath from that node to P needs to be counted multiple times.In the world\r\nof zeros and ones, such a requirement is very simple for Ivy. Not longer\r\nthan a second later, she has already figured out such a node.But for a\r\nmere human like you, is this still possible?For simplicity, please\r\nanswer the minimal sum of paths’ lengths from every fragment to the\r\nemotion samples’ assembly node P.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, k = 5000;\nint d[5005];\nint cnt[5005];\nvector <int> pr;\nint id[5005];\nint fac[5005][1005];\nint s[5005][1005];\n\nvoid sieve(void) {\n    for (int i = 2; i <= k; ++i) if (!d[i]) {\n        id[i] = pr.size();\n        pr.push_back(i);\n        for (int j = i; j <= k; j += i) if (!d[j]) d[j] = i;\n    }\n    for (int i = 1; i <= k; ++i) {\n        for (int j = 0; j < pr.size(); ++j) fac[i][j] = fac[i-1][j];\n        int tmp = i;\n        while (tmp > 1) {\n            int t = d[tmp];\n            ++fac[i][id[t]];\n            tmp /= t;\n        }\n        for (int j = 0; j < pr.size(); ++j) s[i][j] = fac[i][j] + s[i][j-1];\n    }\n}\n\nint f[1005];\nlong long solve(void) {\n    long long ans = 0;\n    int rem = 0;\n    for (int i = 0; i < pr.size(); ++i) rem += f[i];\n    vector <int> cand(k, 0);\n    iota(cand.begin(), cand.end(), 1);\n\n    int l = 1, r = k;\n    for (int i = pr.size() - 1; i >= 0; --i) {\n        rem -= f[i];\n        while (l <= r && fac[l][i] < f[i]) {\n            ans += 1ll * cnt[l] * (rem + (i ? s[l][i-1] : 0) + abs(fac[l][i] - f[i]));\n            ++l;\n        }\n        while (r >= l && fac[r][i] > f[i]) {\n            ans += 1ll * cnt[r] * (rem + (i ? s[r][i-1] : 0) + abs(fac[r][i] - f[i]));\n            --r;\n        }\n    }\n    return ans;\n}\n\nint main(void) {\n    ios_base::sync_with_stdio(0);\n    cin.tie(NULL);\n    cin >> n;\n    int x;\n    for (int i = 1; i <= n; ++i) {\n        cin >> x;\n        if (x == 0) x = 1;\n        ++cnt[x];\n    }\n    sieve();\n    long long ans = 1e18;\n    for (int i = 1; i <= k; ++i) {\n        for (int j = 0; j < pr.size(); ++j) f[j] = fac[i][j];\n        ans = min(ans, solve());\n    }\n    for (int i = 1; i < k; ++i) {\n        int flg = 0;\n        for (int j = pr.size() - 1; j >= 0; --j) {\n            if (flg) f[j] = 0;\n            else if (fac[i][j] != fac[i+1][j]) {\n                flg = 1;\n                f[j] = min(fac[i][j], fac[i+1][j]);\n            }\n            else f[j] = fac[i][j];\n        }\n        ans = min(ans, solve());\n    }\n    cout << ans << endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "graphs",
        "math",
        "number theory",
        "trees"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Chaotic V..json",
    "editorial_link": "https://codeforces.com//blog/entry/73051",
    "editorial": "First of all, one can see that the network is a tree rooted at vertex 1\n, thus for each pair of vertices in it there can only be one simple path.\n\nAlso, the assembly node P\n must be on at least one simple path of a fragment to the root (proof by contradiction, explicit solution is trivial).\n\nLet's start with P\n being node 1\n.\n\nFrom here, moving down to any branch will increase 1\n for each element not being in that branch and decrease 1\n for each element being in, thus we'll only move down to the branch having the most elements until the decreasing cannot outmatch the increasing (in other words, the number of fragments in a branch must be more than half for that branch to be reached).\n\nGiven the criteria of the graph, we can see that: two nodes are in the same branch from the root if having the same one largest factor from the prime factorization, they are in the same branch from a depth-1-node if having the same two largest factors, ..., in the same branch from a depth-k\n-node if having the same k+1\n largest factors.\n\nKeep in mind that here the largest factors can be the duplicated, i.e. in the case of 576=26?32\n, the two largest factors are 3\n and 3\n, and the three largest factors are 3\n, 3\n and 2\n.\n\nThe process will now become factorizing the numbers, and then, cycle by cycle, pop the current largest factor of each number and group them, find out the group (branch) with most occurences and either move on (if the total sum can be lowered) or stop the process.\n\nSince all of these are factorials, the factorizing can be done with a bottom-up dynamic programming fashion.\n\nAlso, as k?5000\n and n?106\n, consider grouping duplicated elements to reduce calculating complexity.\n\nBoth factorization and processing has the worst-case complexity of O(MAXK2?f(MAXK))\n, with k?f(k)\n being the estimated quantity of prime divisors of k!\n.\n\nIt's proven that f(k)=M+lnlnk\n, with M\n being the Meissel-Mertens constant.\n\nThe proof of this formula is based on the fact this number is calculated through the sum of the reciprocals of the primes.",
    "hint": []
}