{
    "link": "https://codeforces.com//contest/1642/problem/C",
    "problemId": "1306240",
    "problem_idx": "C",
    "shortId": "1642C",
    "contest_number": "1642",
    "problem_submissions": {
        "E": [
            147461190,
            147448894,
            147463582,
            147629005,
            147463721,
            147465007,
            147464536,
            147464772,
            154238571,
            147442248,
            147468697,
            147546721,
            147530401
        ],
        "D": [
            147438364,
            147485650,
            147449537,
            147450562,
            147452894,
            147455461,
            147452625,
            147459786,
            147436803,
            147442745,
            147526042,
            147444306,
            147445760,
            147446955,
            147445886,
            147445039,
            147443394,
            147443106,
            147445514,
            147441961
        ],
        "B": [
            147422743,
            147420129,
            147417727,
            147418273,
            147417851,
            147419235,
            147432654,
            147420007,
            147417444,
            147417393,
            147418769,
            147419164,
            147418158,
            147418261,
            147419265,
            147416406,
            147420612,
            147425669,
            147421032,
            147423752
        ],
        "C": [
            147419008,
            147423535,
            147421085,
            147425938,
            147438330,
            147422534,
            147436627,
            147425010,
            147420010,
            147419556,
            147423431,
            147424779,
            147424498,
            147421790,
            147424573,
            147422658,
            147423818,
            147428109,
            147426206,
            147427103
        ],
        "A": [
            147415594,
            147416949,
            147415861,
            147433429,
            147415090,
            147426989,
            147415984,
            147416265,
            147415834,
            147415031,
            147415872,
            147416127,
            147415441,
            147414768,
            147415249,
            147414961,
            147417533,
            147420604,
            147417311,
            147415231
        ],
        "F": [
            147464749,
            147653708,
            147464855,
            147521397
        ]
    },
    "name": "C. Great Sequence",
    "statement": "A sequence of positive integers is called for a positive integer x, if\r\nwe can split it into pairs in such a way that in each pair the first\r\nnumber multiplied by x is equal to the second number. More formally, a\r\nsequence a of size n is great for a positive integer x, if n is even and\r\nthere exists a permutation p of size n, such that for each i (1\r\nle i\r\nle\r\nfrac{n}{2}) a_{p_{2i-1}}\r\ncdot x = a_{p_{2i}}. Sam has a sequence a and a positive integer x. Help\r\nhim to make the sequence great: find the minimum possible number of\r\npositive integers that should be added to the sequence a to make it\r\ngreat for the number x.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define inline __attribute((always_inline))\n\n#define cmax(x,y) x=max(x,y)\n#define cmin(x,y) x=min(x,y)\n#define eb emplace_back\n#define MP make_pair\n#define fi first\n#define se second\n\ntypedef long long ll;\ntypedef pair<int,int> Pair;\n\ninline ll read(){\n\tll x=0,c; bool f=0;\n\tfor (;(c=getchar())<'0'||c>'9';f|=c=='-');\n\tfor (;c>='0'&&c<='9';c=getchar()) x=x*10+c-48;\n\treturn f?-x:x;\n}\n\n#define N 300005\n\nmultiset<ll> s;\n\nint n,x;\n\nvoid init(){\n\tn=read(),x=read();\n\ts.clear();\n\tfor (int i=1;i<=n;i++){\n\t\tint p=read();\n\t\ts.insert(p);\n\t}\n}\n\nvoid solve(){\n\tint ans=0;\n\twhile (!s.empty()){\n\t\tll t=*s.begin();\n\t\ts.erase(s.find(t));\n\t\tll k=t*x;\n\t\tif (s.find(k)!=s.end()) s.erase(s.find(k));else ans++;\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n\nint main(){\n\t//freopen(\"1.in\",\"r\",stdin);\n\t//freopen(\"1.out\",\"w\",stdout);\n\tint cas=read();\n\tfor (;cas--;){\n\t\t//printf(\"Case #%d: \",v);\n\t\tinit();\n\t\tsolve();\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "sortings"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Great Sequence.json",
    "editorial_link": "https://codeforces.com//blog/entry/100249",
    "editorial": "Letâs look at the minimal integer in our multiset. Since it can be\r\nmatched with only one integer, we need to create such pair. Thus, we can\r\nmaintain the current multiset. We need to take the minimal element out\r\nof it (and delete it from it), find a pair for it, and delete it from\r\nthe multiset if such pair exists, or add 1 to the answer if there is no\r\nsuch pair.\r\n",
    "hint": []
}