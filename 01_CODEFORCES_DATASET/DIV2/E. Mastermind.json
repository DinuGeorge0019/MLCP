{"link": "https://codeforces.com//contest/1382/problem/E", "problemId": "672682", "problem_idx": "E", "shortId": "1382E", "contest_number": "1382", "problem_submissions": {"E": [87580740, 87589411, 87581646, 87592012, 87582927, 87692528, 87775376, 87717136], "D": [87555489, 87548847, 87561646, 87566268, 87542684, 87550389, 87559938, 87557650, 87551427, 87566193, 87564529, 87561452, 87563995, 87564259, 87570645, 87563751, 87565987, 87569150, 87571590], "C2": [87546116, 87555702, 87548714, 87552069, 87538337, 87550493, 87568748, 87548658, 87549905, 87553287, 87550271, 87552175, 87546582, 87555140, 87546998, 87548618, 87546324], "C1": [87545885, 87534226, 87549038, 87551870, 87577593, 87538735, 87550728, 87547738, 87548907, 87549506, 87553050, 87549957, 87552439, 87547080, 87548161, 87546830, 87544742, 87546462], "B": [87532814, 87538666, 87535698, 87538451, 87544080, 87530844, 87530725, 87531828, 87532147, 87535077, 87537243, 87537711, 87538752, 87530008, 87533230, 87538244, 87535683, 87533610], "A": [87524660, 87526155, 87619468, 87524613, 87533175, 87523893, 87526148, 87532501, 87524134, 87525800, 87526012, 87524222, 87523259, 87523315, 87524086, 87524062, 87526273, 87523705]}, "name": "E. Mastermind", "statement": "In the game of Mastermind, there are two players Alice and Bob. Alice\r\nhas a secret code, which Bob tries to guess. Here, a code is defined as\r\na sequence of n colors. There are exactly n+1 colors in the entire\r\nuniverse, numbered from 1 to n+1 inclusive.When Bob guesses a code,\r\nAlice tells him some information about how good of a guess it is, in the\r\nform of two integers x and y.The first integer x is the number of\r\nindices where Bob\u2019s guess correctly matches Alice\u2019s code. The second\r\ninteger y is the size of the intersection of the two codes as multisets.\r\nThat is, if Bob were to change the order of the colors in his guess, y\r\nis the maximum number of indices he could get correct.For example,\r\nsuppose n=5, Alice\u2019s code is [3,1,6,1,2], and Bob\u2019s guess is\r\n[3,1,1,2,5]. At indices 1 and 2 colors are equal, while in the other\r\nindices they are not equal. So x=2. And the two codes have the four\r\ncolors 1,1,2,3 in common, so y=4. Solid lines denote a matched color for\r\nthe same index. Dashed lines denote a matched color at a different\r\nindex. x is the number of solid lines, and y is the total number of\r\nlines. You are given Bob\u2019s guess and two values x and y. Can you find\r\none possibility of Alice\u2019s code so that the values of x and y are\r\ncorrect?\r\n", "solutions": ["#pragma comment(linker, \"/STACK:10000000000\")\n#pragma GCC optimize(\"O3\")\n#define _CRT_SECURE_NO_WARNINGS\n#include <stdlib.h>\n#include <stdio.h>\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <math.h>\n#include <map>\n#include <chrono>\n#include <set>\n#include <stack>\n#include <vector>\n#include <time.h>\n#include <random>\n#include <algorithm>\n#include <string>\n#include <string.h>\n#include <queue>\n#include <deque>\n#include <functional>\n#include <cctype>\n#include <list>\n#include <unordered_set>\n#include <unordered_map>\n#include <bitset>\n#include <complex>\n#define rt return\n#define mp make_pair\n#define endl '\\n'\n#define sqr(x) ((x) * (x))\n#define all(x) (x).begin(), (x).end()\n#define rep(x) for (int rep_iter = 0; rep_iter < x; ++rep_iter)\n#define fnd(x, y) (x.find(y) != x.end())\n#define fndv(x, y) (find(all(x), y) != end(x))\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<db, db> pdd;\ntypedef unsigned char bt;\ntypedef unsigned int uint;\nconst int MOD = 1000000007;\nconst int INF = 1000000007LL;\nconst ll INF2 = 1LL << 62LL;\nconst long double EPS = 1e-9;\n#ifdef _DEBUG\nconst int SIZE = 120;\n#endif\n#ifndef _DEBUG\nconst int SIZE = 200010; //200010\n#endif\nmt19937 rng(time(0));\nuniform_int_distribution<int> uid(-1000000000, 1000000000);\n\n\n\nint main() {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\n#endif\n\tios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n\n\tint tt;\n\tcin >> tt;\n\trep(tt) {\n\t\tint n, x, y, ost;\n\t\tcin >> n >> x >> y;\n\t\tvector<int> b(n, -1);\n\t\tset<int> used_color;\n\t\tmap<int, vector<int> > pos;\n\t\tfor (int i2 = 0; i2 < n; ++i2){\n\t\t\tint a;\n\t\t\tcin >> a;\n\t\t\tused_color.insert(a);\n\t\t\tpos[a].push_back(i2);\n\t\t}\n\t\tfor (int i = 1; i <= n + 1; ++i) {\n\t\t\tif (!fnd(used_color, i)) {\n\t\t\t\tost = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tset<pii> colors; // cnt, color\n\t\tfor (auto& i : pos)\n\t\t\tcolors.insert({ i.second.size(), i.first });\n\t\trep(x) {\n\t\t\tauto p = *(--colors.end()); colors.erase(--colors.end());\n\t\t\t--p.first;\n\t\t\tint color = p.second;\n\t\t\tint j = pos[color].back();  pos[color].pop_back();\n\t\t\tb[j] = color;\n\t\t\tif (p.first)\n\t\t\t\tcolors.insert(p);\n\t\t}\n\t\ty -= x;\n\t\tint m = n - x;\n\t\tint real_y;\n\t\tif (colors.size())\n\t\t\treal_y = min(m, (m - (--colors.end())->first) * 2);\n\t\telse\n\t\t\treal_y = m;\n\t\tif (real_y < y) {\n\t\t\tcout << \"NO\\n\";\n\t\t\tcontinue;\n\t\t}\n\t\tcout << \"YES\\n\";\n\t\t\tvector<int> v;\n\t\t\tint j = -1;\n\t\t\tfor (auto & i : colors) {\n\t\t\t\tif (i.first)\n\t\t\t\t\tj = v.size();\n\t\t\t\trep(i.first)\n\t\t\t\t\tv.push_back(i.second);\n\t\t\t}\n\t\t\tfor (auto& color : v) {\n\t\t\t\tif (!y)\n\t\t\t\t\tbreak;\n\t\t\t\t--y;\n\t\t\t\tint color_move = v[j]; j = (j + 1) % v.size();\n\t\t\t\twhile (color_move == color) {\n\t\t\t\t\tcolor_move = v[j]; j = (j + 1) % v.size();\n\t\t\t\t}\n\t\t\t\tint k = pos[color].back();  pos[color].pop_back();\n\t\t\t\tb[k] = color_move;\n\t\t\t}\n\t\t\tfor (auto& i : b) {\n\t\t\t\tif (i == -1)\n\t\t\t\t\ti = ost;\n\t\t\t}\n\n\t\tfor (auto& i : b)\n\t\t\tcout << i << ' ';\n\t\tcout << endl;\n\t}\n\n\n\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["constructive algorithms", "greedy", "implementation", "sortings"], "dificulty": "2500", "interactive": false}