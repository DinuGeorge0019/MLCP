{
    "link": "https://codeforces.com//contest/1163/problem/A",
    "problemId": "341949",
    "problem_idx": "A",
    "shortId": "1163A",
    "contest_number": "1163",
    "problem_submissions": {
        "C2": [
            66047932,
            53928733,
            53917739,
            53916320,
            53927440,
            53917053,
            53921940,
            53917741,
            53917113,
            53917536,
            53916492,
            53922064,
            53918906,
            53917646,
            53928915,
            53916500,
            53917339,
            53918100,
            53918744,
            53917518,
            53919810
        ],
        "C1": [
            66047912,
            53928680,
            53917729,
            53916398,
            53927499,
            53917123,
            53921828,
            53917840,
            53916975,
            53916501,
            53916551,
            53921864,
            53918990,
            53917581,
            53920027,
            53916455,
            53917420,
            53918173,
            53918994,
            53917678,
            53919432
        ],
        "B2": [
            66047900,
            53920376,
            53914135,
            53913146,
            53913090,
            53913301,
            53918925,
            53912937,
            53914221,
            53912878,
            53912457,
            53914593,
            53913074,
            53922853,
            53913811,
            53913679,
            53912800,
            53914163,
            53913157,
            53913627,
            53916315
        ],
        "B1": [
            66047874,
            53920441,
            53914184,
            53913224,
            53913218,
            53913362,
            53918852,
            53913014,
            53914129,
            53912791,
            53912577,
            53914508,
            53913299,
            53914871,
            53913903,
            53913625,
            53912899,
            53914084,
            53913246,
            53913821,
            53916410
        ],
        "E": [
            53956983,
            53917883,
            53924812,
            53927353,
            53925644,
            53925684,
            53938288,
            53938253
        ],
        "D": [
            53956962,
            53912001,
            53921113,
            53918916,
            53915736,
            53919859,
            53913955,
            53921659,
            53920805,
            53920009,
            53923016,
            53918711,
            53920953,
            53917042,
            53924906,
            53924050,
            53923576,
            53920981,
            53945253,
            53925390,
            53922597
        ],
        "A": [
            53956941,
            53913969,
            53910517,
            53910338,
            53909903,
            53909816,
            53916249,
            53910013,
            53910841,
            53909880,
            54028459,
            53912757,
            53911710,
            53909900,
            53909929,
            53910371,
            53909489,
            53909450,
            53909565,
            53911288,
            53909949,
            53909884
        ]
    },
    "name": "A. Eating Soup",
    "statement": "What the cats do when they unite? Right, they have a party. Since they\r\nwanted to have as much fun as possible, they invited all their friends.\r\nNow n cats are at the party, sitting in a circle and eating soup. The\r\nrules are simple: anyone having finished their soup leaves the\r\ncircle.Katie suddenly notices that whenever a cat leaves, the place\r\nwhere she was sitting becomes an empty space, which means the circle is\r\ndivided into smaller continuous groups of cats sitting next to each\r\nother. At the moment Katie observes, there are m cats who left the\r\ncircle. This raises a question for Katie: what is the maximum possible\r\nnumber of groups the circle is divided into at the moment?Could you help\r\nher with this curiosity?You can see the examples and their descriptions\r\nwith pictures in the \"Note\" section.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nint n, m;\n\nint main() {\n\tcin >> n >> m;\n\tif (!m) cout << 1 << endl;\n\telse if (m <= n / 2) cout << m << endl;\n\telse cout << n - m << endl;\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Eating Soup.json",
    "editorial_link": "https://codeforces.com/blog/entry/66943",
    "editorial": "We can prove that the first one to leave the circle does not make any\r\ndifference to our answer. So after trying some tests, you will probably\r\ncome up with an idea of selecting the cats that are sitting right\r\nbetween the other two to be the prior ones to leave because, in this\r\nway, those vacancies will definitely be useful for creating more\r\nseparate groups.Therefore, if , the answer is since each cat to leave\r\n(after the first cat) increases the number of groups. Otherwise, if ,\r\neach cat to leave decreases the number of groups so the answer is .\r\nSummarily, the answer is . Be careful with .Complexity: .\r\n"
}