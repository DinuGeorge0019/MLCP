{
    "link": "https://codeforces.com//contest/1763/problem/E",
    "problemId": "1701408",
    "problem_idx": "E",
    "shortId": "1763E",
    "contest_number": "1763",
    "problem_submissions": {
        "C": [
            186020491,
            186014618,
            185970901,
            185991875,
            185997685,
            185982190,
            185984673,
            185981496,
            186009097,
            185973602,
            185981183,
            185984898,
            185981738,
            185976906,
            185977465
        ],
        "E": [
            185998794,
            185987416,
            185979003,
            185992302,
            186002492,
            185989056,
            185993894,
            186011236,
            186008232,
            186008161,
            185976627,
            185996244,
            185993843,
            185994524,
            185987330,
            185983728,
            186014244,
            186001030
        ],
        "D": [
            185995867,
            185980597,
            185999397,
            185984870,
            186005387,
            185985568,
            186006095,
            185982650,
            186022836,
            186016207,
            186014411,
            186000359,
            186003392,
            186001911,
            185991399,
            185982901,
            185988475,
            185988930,
            185993150,
            185994062
        ],
        "F": [
            185990818,
            186680252,
            186011772,
            186580963
        ],
        "B": [
            185964960,
            185964863,
            185976136,
            185966519,
            185970293,
            185964032,
            185970337,
            185968669,
            185966545,
            185964632,
            185967215,
            185968457,
            185964010,
            185967589,
            185966627,
            185963830,
            185965988,
            185967114,
            185965147
        ],
        "A": [
            185961159,
            185960941,
            185963086,
            185960882,
            185963700,
            185960926,
            185963152,
            185960960,
            185961563,
            185960964,
            185961279,
            185962189,
            185960916,
            185963432,
            185961791,
            185961037,
            185961928,
            185961021,
            185961325
        ]
    },
    "name": "E. Node Pairs",
    "statement": "Let’s call an ordered pair of nodes (u, v) in a directed graph if u\r\nneq v, there exists a path from u to v, and there are no paths from v to\r\nu.A directed graph is called if it contains exactly p ordered pairs of\r\nnodes (u, v) such that u < v and u and v are reachable from each other.\r\nFind the minimum number of nodes required to create a p-reachable\r\ndirected graph.Also, among all such p-reachable directed graphs with the\r\nminimum number of nodes, let G denote a graph which maximizes the number\r\nof unidirectional pairs of nodes. Find this number.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ll long long\n#define ls u<<1\n#define rs u<<1|1\n#define mm(x) memset(x,0,sizeof(x))\nusing namespace std;\nint read()\n{\n  int a=0;int f=0;char p=getchar();\n  while(!isdigit(p)){f|=p=='-';p=getchar();}\n  while(isdigit(p)){a=(a<<3)+(a<<1)+(p^48);p=getchar();}\n  return f?-a:a;\n}\nconst int INF=998244353;\nconst int P=998244353;\nconst int N=1e6+5;\nint T;\nint n,m;\nint f[N];\nint ans;\nint dp[N];\nint main()\n{\n  n=read();\n  memset(dp,127,sizeof(dp)); dp[0]=0;\n  for(int i=2;i<=10000;++i)\n  {\n    int val=i*(i-1)/2;\n    if(val>n) break;\n    for(int j=val;j<=n;++j) dp[j]=min(dp[j],dp[j-val]+i);\n  }\n  ans=dp[n];\n  printf(\"%d %d\",ans,ans*(ans-1)/2-n);\n  return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "graphs",
        "math",
        "number theory"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Node Pairs.json",
    "editorial_link": "https://codeforces.com//blog/entry/110278",
    "editorial": "SolutionFor two nodes and to be reachable from each other, they must lie\r\nin the same strongly connected component (SCC). Letâs define as the\r\nminimum number of nodes required to construct an -reachable graph. We\r\ncan use dynamic programming and calculate as over all the valid SCC\r\nsizes for which , i.e., over those which have less pairs of the required\r\ntype than . Thus, gives us the minimum number of nodes required to\r\ncreate a -reachable graph.In all -reachable graphs with nodes, the upper\r\nbound on the number of unidirectional pairs of nodes is , because we\r\nhave exactly pairs of nodes which are reachable from each other. It is\r\npossible to achieve this upper bound using the following construction:\r\nlet be any sequence of SCC sizes which agrees with the dp values we\r\ncalculated earlier. Let the first SCC contain the nodes , the second one\r\ncontain , and so on. We add a directed edge from to if .Time Complexity:\r\n",
    "hint": [
        "Hint 1 In a directed graph, which nodes are reachable from each other? How many such pairs of nodes exist?",
        "Hint 2 Think about a sequence of SCCs."
    ]
}