{
    "link": "https://codeforces.com//contest/263/problem/D",
    "problemId": "2519",
    "problem_idx": "D",
    "shortId": "263D",
    "contest_number": "263",
    "problem_submissions": {
        "E": [
            2943196
        ],
        "D": [
            2942145,
            2939985,
            2942208,
            2939952,
            2940748,
            2942993,
            2943370,
            2941259,
            2941637,
            2940304,
            2943228,
            2941800,
            2941304,
            2944161,
            2943666,
            2944368,
            2940892
        ],
        "C": [
            2940759,
            2941829,
            2940936,
            2942500,
            2943328,
            2941933,
            2942288,
            2943440,
            2943805,
            2944431,
            2942111,
            2943776,
            2944668,
            2943093,
            2943041,
            2942906,
            2944522
        ],
        "B": [
            2938515,
            2938111,
            2937699,
            2937858,
            2938311,
            2938172,
            2938572,
            2938277,
            2938614,
            2941034,
            2937866,
            2938119,
            2938506,
            2938610,
            2938586,
            2938823,
            2938384
        ],
        "A": [
            2937160,
            2937166,
            2936927,
            2936979,
            2936967,
            2936966,
            2936959,
            2936975,
            2937475,
            2941215,
            2938221,
            2937216,
            2937223,
            2937302,
            2937515,
            2937451,
            2937077
        ]
    },
    "name": "D. Cycle in Graph",
    "statement": "You’ve got a undirected graph , consisting of nodes. We will consider\r\nthe nodes of the graph indexed by integers from 1 to . We know that each\r\nnode of graph is connected by edges with at least other nodes of this\r\ngraph. Your task is to find in the given graph a simple cycle of length\r\nof at least .A of length in graph is a sequence of distinct graph nodes\r\nsuch, that nodes and are connected by an edge of the graph, also for any\r\ninteger nodes and are connected by an edge of the graph.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <vector>\n\n#define MN 100010\n\nint dfn[MN], n, m, k;\nstd::vector<int> ee[MN];\nint stk[MN];\n\nint main() {\n    scanf(\"%d%d%d\", &n, &m, &k);\n    for(int i=0; i<m; i++) {\n        int a, b;\n        scanf(\"%d%d\", &a, &b);\n        ee[a].push_back(b);\n        ee[b].push_back(a);\n    }\n\n    int top = 1;\n    stk[top] = 1;\n    while(true) {\n        int now = stk[top];\n        dfn[now] = top;\n\n        int mind = n+1, minp = -1;\n        for(unsigned i=0; i<ee[now].size(); i++) {\n            int nxt = ee[now][i];\n            if(dfn[nxt] < mind) {\n                mind = dfn[nxt];\n                minp = nxt;\n            }\n        }\n\n        if(mind == 0) {\n            stk[top+1] = minp;\n        }\n        else {\n            printf(\"%d\\n\", top-mind+1);\n            for(int i=mind; i<=top; i++)\n                printf(\"%d%c\", stk[i], i==top ? '\\n' : ' ');\n            return 0;\n        }\n\n        top ++;\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dfs and similar",
        "graphs"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Cycle in Graph.json",
    "editorial_link": "https://codeforces.com//blog/entry/6419",
    "editorial": "Consider any simple path which cannot be increased immediately (by\r\nadding a node to itâs end, ). In other words, all the neighbours of are\r\nalready included in the path. Letâs find the first node of the path\r\n(say, ), which is connected to . It is clear that is a cycle and it\r\ncontains all the neighbours of . But according to the problemâs\r\nstatement, each node has at least neighbours. So length of the cycle is\r\nat least ( is for node itself).\r\n",
    "hint": []
}