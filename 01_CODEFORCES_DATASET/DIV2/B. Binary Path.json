{
    "link": "https://codeforces.com//contest/1937/problem/B",
    "problemId": "2503240",
    "problem_idx": "B",
    "shortId": "1937B",
    "contest_number": "1937",
    "problem_submissions": {
        "E": [
            250576191,
            250576177,
            248956893,
            248968788,
            248957297,
            248966672,
            249441680,
            249396118,
            248946403,
            248968676,
            250133778
        ],
        "D": [
            248945664,
            248934669,
            248940205,
            248942769,
            248942389,
            248945370,
            250100307,
            248949877,
            248955428,
            248958358,
            248955920,
            248959000,
            248953793,
            248954441,
            248955304,
            248954744,
            248950479,
            248956622
        ],
        "C": [
            248925723,
            248918003,
            248945269,
            248925093,
            248927475,
            248916202,
            248925097,
            248924482,
            248928585,
            248926397,
            248923906,
            248930862,
            248927119,
            248930899,
            248930534,
            249020336,
            248929752,
            248931403,
            248935918,
            248933256
        ],
        "B": [
            248910702,
            248909576,
            248913624,
            248915352,
            248915231,
            248904510,
            248914972,
            248915980,
            248915024,
            248914144,
            248910066,
            248915252,
            248914074,
            248914693,
            248914679,
            249015802,
            248915248,
            248914394,
            248908476,
            248910261
        ],
        "A": [
            248903051,
            248903069,
            248903106,
            248903549,
            248904708,
            248903046,
            248903582,
            248903569,
            248903261,
            248903372,
            248905387,
            248903521,
            248905435,
            248904180,
            248904557,
            248904753,
            248904311,
            248904712,
            248903327
        ],
        "F": [
            250203263
        ]
    },
    "name": "B. Binary Path",
    "statement": "You are given a 2\r\ntimes n grid filled with zeros and ones. Let the number at the\r\nintersection of the i-th row and the j-th column be a_{ij}.There is a\r\ngrasshopper at the top-left cell (1, 1) that can only jump one cell\r\nright or downwards. It wants to reach the bottom-right cell (2, n).\r\nConsider the binary string of length n+1 consisting of numbers written\r\nin cells of the path without changing their order.Your goal is to: Find\r\nthe lexicographically smallest^\r\ndagger string you can attain by choosing any available path; Find the\r\nnumber of paths that yield this lexicographically smallest string. ^\r\ndagger If two strings s and t have the same length, then s is\r\nlexicographically smaller than t if and only if in the first position\r\nwhere s and t differ, the string s has a smaller element than the\r\ncorresponding element in t.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\n#define x first\n#define y second\n#define int long long\n#define mp(x, y) make_pair(x, y)\n#define eb(...) emplace_back(__VA_ARGS__)\n#define fro(i, x, y) for(int i = (x); i <= (y); i++)\n#define pre(i, x, y) for(int i = (x); i >= (y); i--)\ninline void JYFILE19();\n\ntypedef int64_t i64;\ntypedef pair<int, int> PII;\n\nbool ST;\nconst int N = 1e6 + 10;\n\nint n, m, dp[2][N];\nchar ans[N];\n\ninline void solve() {\n  cin >> n;\n  string s[2];\n  cin >> s[0] >> s[1];\n  s[0] = \" \" + s[0];\n  s[1] = \" \" + s[1];\n  int now = 0, ct = 0;\n  fro(i, 1, n) {\n    cout << s[now][i];\n    ans[++ct] = s[now][i];\n    dp[0][i] = dp[1][i] = 0;\n    if(now == 1) continue;\n    if(i == n) {\n      now = 1, i--;\n    }\n    else {\n      if(s[now][i + 1] == '0') now = 0;\n      else if(s[1][i] == '0') now = 1, i--;\n      else now = 0;\n    }\n  }\n  cout << \"\\n\";\n  dp[0][1] = 1;\n  fro(i, 1, n) {\n    fro(j, 0, 1) {\n      int x = i + j;\n      if(s[j][i] != ans[x]) {\n        dp[j][i] = 0;\n        continue;\n      }\n      if(j == 0) dp[j + 1][i] += dp[j][i];\n      if(i != n) dp[j][i + 1] += dp[j][i];\n      // cout << j << \" \" << i << \" \" << dp[j][i] << \"\\n\";\n    }\n  }\n  cout << dp[1][n] << \"\\n\";\n}\n\nsigned main() {\n  JYFILE19();\n  int t; cin >> t;\n  while(t--) {\n    solve();\n  }\n  return 0;\n}\nbool ED;\ninline void JYFILE19() {\n  // freopen(\"\", \"r\", stdin);\n  // freopen(\"\", \"w\", stdout);\n  ios::sync_with_stdio(0), cin.tie(0);\n  double MIB = fabs((&ED-&ST)/1048576.), LIM = 512;\n  cerr << \"MEMORY: \" << MIB << endl, assert(MIB<=LIM);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "greedy",
        "implementation"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Binary Path.json",
    "editorial_link": "https://codeforces.com//blog/entry/126513",
    "editorial": "Tutorial Let the string achieved by moving down on the -th column be .\r\nThen, for any , one can observe that and can only differ by at most one\r\nindex, which is index . Thus, comparing and lexicographically can be\r\ndone in , by comparing this one index. After finding the\r\nlexicographically smallest string, counting the occurrence of this\r\nstring can be done straightforwardly in . The implementation can differ\r\nfor each participant, but the following method provides a clean\r\nimplementation. Let the initial coordinate be , and maintain a counter\r\nwhich is initially reset to . Then repeat the following until we reach :\r\nIf we are on row , move to the right. If we are on column , move\r\ndownwards. From here, let the character on the right be , and one below\r\nbe . If , move downwards. If , move to the right and reset the counter\r\nto . If , move to the right and increment the counter. In the end, the\r\nstring on the path we passed through will be lexicographically smallest,\r\nand the integer on the counter will be the number of occurrences.\r\n",
    "hint": []
}