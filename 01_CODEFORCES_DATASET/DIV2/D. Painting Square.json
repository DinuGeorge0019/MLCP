{
    "link": "https://codeforces.com//contest/300/problem/D",
    "problemId": "2924",
    "problem_idx": "D",
    "shortId": "300D",
    "contest_number": "300",
    "problem_submissions": {
        "E": [
            3626829,
            3626078,
            3626827,
            3626906,
            3628233,
            3629109,
            3629044,
            3629132,
            3628382,
            3629855,
            3627387
        ],
        "D": [
            3624414,
            37352127,
            166085445
        ],
        "C": [
            3622911,
            3623906,
            3623231,
            3623852,
            3624071,
            3623911,
            3624938,
            3627160,
            3625349,
            3624808,
            3623930,
            3623466,
            3623151,
            3624115,
            3624977
        ],
        "A": [
            3621358,
            3621544,
            3621961,
            3621419,
            3622220,
            3621400,
            3621539,
            3627980,
            3621595,
            3622614,
            3621461,
            3623870,
            3621695,
            3622433,
            3621766
        ],
        "B": [
            3622857,
            3624197,
            3622464,
            3628078,
            3624506,
            3622936,
            3628606,
            7721187,
            3623708,
            3623701,
            3623040,
            3622630,
            3624370,
            3625890,
            3622982
        ]
    },
    "name": "D. Painting Square",
    "statement": "Vasily the bear has got a large square white table of rows and columns.\r\nThe table has got a black border around this table. Vasily the bear\r\nwants to paint his square table in exactly moves. Each move is sequence\r\nof actions: The bear chooses some square inside his table. At that the\r\nsquare must have a black border painted around it. Also, the square\r\nshouldn\u2019t contain a black cell. The number of cells in the square\r\nshouldn\u2019t be less than . The bear chooses some row and some column\r\ninside the chosen square. Then he paints each cell of this row and this\r\ncolumn inside the chosen square. After that the rectangles, formed by\r\nthe square\u2019s border and the newly painted cells, must be squares of a\r\nnon-zero area. The bear already knows numbers and . Help him find the\r\nnumber of ways to paint the square in exactly moves. Two ways to paint\r\nare called distinct if the resulting tables will differ in at least one\r\ncell. As the answer can be rather large, print the remainder after\r\ndividing it by .\r\n",
    "solutions": [
        "//program 300-D\n\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\n#include<cstring>\n#include<algorithm>\n\nusing namespace std;\n\nint Get()\n{\n  char c;\n  while(c=getchar(),c<'0'||c>'9');\n  int X=0;\n  while(c>='0'&&c<='9')\n    {\n      X=X*10+c-48;\n      c=getchar();\n    }\n  return X;\n}\n\nconst int Mod=7340033;\n\nint main()\n{\n  static int DP[30][1001];\n  memset(DP,0,sizeof(DP));\n  DP[0][0]=1;\n  for(int i=1;i<30;i++)\n    {\n      static long long Calc[5][1001];\n      memset(Calc,0,sizeof(Calc));\n      Calc[0][0]=1;\n      for(int j=1;j<=4;j++)\n        for(int k=0;k<=1000;k++)\n          for(int x=0;x<=k;x++)\n            Calc[j][k]=(Calc[j][k]+Calc[j-1][k-x]*DP[i-1][x])%Mod;\n      for(int j=0;j<=1000;j++)\n        if(!j)\n          DP[i][j]=1;\n        else\n          DP[i][j]=Calc[4][j-1];\n    }\n  int Test=Get();\n  while(Test--)\n    {\n      int N=Get(),K=Get();\n      int Len=0;\n      while((N&1)&&(N>1))\n        {\n          N/=2;\n          Len++;\n        }\n      printf(\"%d\\n\",DP[Len][K]);\n    }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "fft"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Painting Square.json",
    "editorial_link": "https://codeforces.com//blog/entry/7497",
    "editorial": "This picture is helpful for understanding. Let\u00e2\u0080\u0099s consider problem in\r\ngraph terms: We have matrix , which represents a graph: We need to color\r\nvertexes of this graph. By that we mean also to color all vertexes on\r\npath from to (root). Knowing of tree we can build it in unique way.\r\nLet\u00e2\u0080\u0099s find height of tree in this way: Let\u00e2\u0080\u0099s consider following DP:\r\nnumber of ways to color graph height in steps. Naive solution in : But\r\nit is not what we whant in time terms. Let\u00e2\u0080\u0099s consider current DP as\r\npolynomial coefficients: coefficient of power of polynomial . In that\r\ncase coefficient of power of polynomial to the 4-th power. This approach\r\nallows to solve problem in . However this solution is quite slow,\r\nbecause of modulo operations. As you see, this modulo is not so big (),\r\nthat allows us to reduce number of modulo operations, thus giving huge\r\nperfomance boost. Also it is possible to use FFT to solve in . uthor\u00e2\u0080\u0099s\r\nsolution. Uses FFT uthor\u00e2\u0080\u0099s solution. Without FFT\r\n"
}