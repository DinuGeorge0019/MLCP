{
    "link": "https://codeforces.com//contest/844/problem/D",
    "problemId": "119859",
    "problem_idx": "D",
    "shortId": "844D",
    "contest_number": "844",
    "problem_submissions": {
        "E": [
            29756968,
            29759454
        ],
        "D": [
            29751901,
            29749751,
            29752230,
            29744882,
            29754410,
            29749697,
            29747401,
            29753891,
            29758770,
            29748328,
            29748181,
            29749142,
            29750857,
            29750829,
            29761893,
            29754092,
            29743329,
            29750981,
            29749760
        ],
        "C": [
            29741295,
            29740844,
            29742968,
            29741006,
            29747704,
            29741133,
            29741950,
            29743007,
            29740184,
            29743433,
            29743333,
            29743161,
            29739699,
            29742503,
            29743461,
            29743085,
            29739885,
            29746382,
            29743128
        ],
        "B": [
            29738891,
            29738862,
            29738821,
            29739393,
            29740604,
            29739250,
            29739828,
            29740063,
            29740342,
            29741491,
            29739840,
            29740823,
            29739918,
            29740419,
            29741146,
            29738493
        ],
        "A": [
            29736508,
            31176684,
            29736048,
            29736305,
            29736555,
            29736534,
            29736883,
            29737174,
            29736466,
            29737056,
            29736249,
            29736083,
            29736171,
            29736915,
            29737290,
            29736045
        ]
    },
    "name": "D. Interactive LowerBound",
    "statement": "You are given a in increasing order singly linked list. You should find\r\nthe minimum integer in the list which is greater than or equal to .More\r\nformally, there is a singly liked list built on an array of elements.\r\nElement with index contains two integers: is the integer value in this\r\nelement, and that is the index of the next element of the singly linked\r\nlist (or , if the current element is the last). The list is sorted, i.e.\r\nif , then .You are given the number of elements in the list , the index\r\nof the first element , and the integer .You can make up to queries of\r\nthe following two types: () ask the values and , give the answer for the\r\nproblem: the minimum integer, greater than or equal to , or , if there\r\nare no such integers. Your program should terminate after this query.\r\nWrite a program that solves this problem.\r\n",
    "solutions": [
        "#include<cstdio>\nint n, s, x, cnt, q[1000], maxi = -1;\nint main() {\n    scanf(\"%d%d%d\", &n, &s, &x);\n    for (int i = 0; i < 1000; i++) q[i] = i*(1000000009LL) % n * 1000000007 % n + 1;\n\n    int v, nxt;\n    for (int i = 0; i < 1000; i++) {\n        printf(\"? %d\\n\", q[i]);\n        fflush(stdout);\n        scanf(\"%d %d\", &v, &nxt);\n        if (v <= x && maxi < v) maxi = v, s = nxt;\n    }\n    while (~s && maxi < x) {\n        printf(\"? %d\\n\", s);\n        fflush(stdout);\n        scanf(\"%d %d\", &v, &nxt);\n        maxi = v;\n        s = nxt;\n    }\n    printf(\"! %d\", maxi < x ? -1 : maxi);\n    fflush(stdout);\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "interactive",
        "probabilities"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Interactive LowerBound.json",
    "editorial_link": "https://codeforces.com//blog/entry/54029",
    "editorial": "Let's ask the values in index start and in 999 other random indexes, choose among them the largest value less or equal to x.\n\nLet's go from it in order to the elements of the list, until we meet the first element greater or equal to x, which will be the answer.\n\nThe probability that this algorithm for 2000 of actions will not find the desired element is equal to the probability that among 1000 of previous before the correct answer of the list elements there will no one from our sample of 999 random elements. This probability can be estimated as (1??-??999??/??n)1000?????1.7\u00b710?-?9\n\nIn order to not be hacked in this problem, you should use high-precision current system time as a random seed."
}