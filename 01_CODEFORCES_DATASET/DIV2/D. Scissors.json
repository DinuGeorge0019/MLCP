{"link": "https://codeforces.com//contest/955/problem/D", "problemId": "167746", "problem_idx": "D", "shortId": "955D", "contest_number": "955", "problem_submissions": {"E": [36552751], "D": [36547766, 36561781, 36687646, 72294185], "C": [36544337, 36544697, 36542762, 36552120, 36546618, 36544122, 36549891, 36544109, 36541691, 36576017, 36575027, 36548324, 36546617, 36544127, 36541601, 36543835, 36543719, 36546626, 36545136, 36544045, 36543760, 36541102], "B": [36538238, 36537135, 36537612, 36562998, 36539430, 36538683, 36540472, 36537286, 36537082, 36538951, 36538215, 36537949, 36537216, 36540793, 36539603, 36539538, 36538461, 36538576, 36537767, 36537306], "A": [36536991, 36539709, 36536867, 36548240, 36538150, 36537171, 36538851, 36536810, 36543232, 36537420, 36540571, 36537312, 36546633, 36537606, 36537598, 36537548, 36537069, 36537405, 36537023, 36550641], "F": [36545987, 36553463, 36668304]}, "name": "D. Scissors", "statement": "Jenya has recently acquired quite a useful tool -scissors for cutting\r\nstrings. They are generally used for cutting out two non-intersecting\r\nsubstrings of length from an arbitrary string (its length should be at\r\nleast in order to perform this operation) and concatenating them\r\nafterwards (preserving the initial order). For example, with the help of\r\n-scissors you can cut and out of and concatenate them into , but not and\r\nsince they\u2019re intersecting.It\u2019s a nice idea to test this tool before\r\nusing it in practice. After looking through the papers, Jenya came up\r\nwith two strings and . His question is whether it is possible to apply\r\nhis scissors to string such that the resulting concatenation contains as\r\na substring?\r\n", "solutions": ["#include<bits/stdc++.h>\n#define PII pair<int,int>\n#define MP make_pair\nusing namespace std;\nconst int maxn=500011,Idx1=7,P1=1000000007,Idx2=30077,P2=1000000009;\nchar s1[maxn],s2[maxn]; int pw1[maxn],pw2[maxn];\nint n,m,k;\nvoid init(){\n\tscanf(\"%d%d%d\",&n,&m,&k); scanf(\"%s%s\",s1+1,s2+1);\n\tpw1[0]=1; for (int i=1;i<=n;++i) pw1[i]=(1LL*pw1[i-1]*Idx1)%P1;\n\tpw2[0]=1; for (int i=1;i<=n;++i) pw2[i]=(1LL*pw2[i-1]*Idx2)%P2;\n}\nint h11[maxn],h12[maxn],h21[maxn],h22[maxn];\nvoid Get_s1(){\n\th11[0]=0; for (int i=1;i<=n;++i) h11[i]=(1LL*h11[i-1]*Idx1+s1[i])%P1;\n\th12[0]=0; for (int i=1;i<=n;++i) h12[i]=(1LL*h12[i-1]*Idx2+s1[i])%P2;\n}\nvoid Get_s2(){\n\th21[0]=0; for (int i=1;i<=m;++i) h21[i]=(1LL*h21[i-1]*Idx1+s2[i])%P1;\n\th22[0]=0; for (int i=1;i<=m;++i) h22[i]=(1LL*h22[i-1]*Idx2+s2[i])%P2;\n}\ninline PII Get_1(int st,int ed,int len){\n\t--st; return MP((h11[ed]+(P1-(1LL*pw1[len]*h11[st])%P1))%P1,(h12[ed]+(P2-(1LL*pw2[len]*h12[st])%P2))%P2);\n}\ninline PII Get_2(int st,int ed,int len){\n\t--st; return MP((h21[ed]+(P1-(1LL*pw1[len]*h21[st])%P1))%P1,(h22[ed]+(P2-(1LL*pw2[len]*h22[st])%P2))%P2);\n}\ninline bool check(int st1,int st2,int len){\n\tint ed1=st1+len-1,ed2=st2+len-1;\n\treturn Get_1(st1,ed1,len)==Get_2(st2,ed2,len);\n}\nint f[maxn];\nvoid print(int x){\n\tif (x>k) print(x-k); printf(\"%d \",f[x]-k+1);\n}\nvoid work(){\n\tGet_s1(); Get_s2();\n\tstatic int Ed[maxn];\n\tfor (int i=1,now=1;i<=k && i<=m;++i){ // now is st\n\t\twhile (now+i-1<=n && !check(now,1,i)) ++now;\n\t\tif (check(now,1,i)) f[i]=now+i-1; else f[i]=n+1;\n\t}\n\tif (m<=k && f[m]<=n){\n\t\tint l=f[m]-m+1;\n\t\tint L=min(l,n-2*k+1);\n\t\tprintf(\"Yes\\n%d %d\\n\",L,L+k); exit(0);\n\t}\n\tfor (int i=1;i<=m && i<=k && f[i]<k;++i){\n\t\tif (check(k-i+1,1,i)) f[i]=k;\n\t\telse for (int j=max(k-i+1,f[i-1]-i+2);j+i-1<=n;++j) if (check(j,1,i)){f[i]=j+i-1; break;}\n\t\tif (f[i]<k) f[i]=n+1;\n\t}\n\tfor (int i=1,now=n;i<=k && i<=m;++i){ // now is ed\n\t\twhile (now>=i && !check(now-i+1,m-i+1,i)) --now;\n\t\tif (check(now-i+1,m-i+1,i)) Ed[m-i+1]=now-i+1;\n\t\telse Ed[m-i+1]=-1;\n\t}\n\tEd[m+1]=n;\n\tfor (int i=1;i<=k && i<=m && Ed[m-i+1]+k-1>n;++i){\n\t\tif (check(n-k+1,m-i+1,i)) Ed[m-i+1]=n-k+1;\n\t\telse for (int j=min(n-k+i,Ed[m-i+2]+i);j-i+1>=1;--j) if (check(j-i+1,m-i+1,i)){Ed[m-i+1]=j-i+1; break;}\n\t\tif (Ed[m-i+1]+k-1>n) Ed[m-i+1]=-1;\n\t}\n\tfor (int i=1;i<=k;++i) if (m-i<=k && f[m-i]<Ed[m-i+1]){\n\t\tputs(\"Yes\");\n\t\tprintf(\"%d %d\\n\",f[m-i]-k+1,Ed[m-i+1]); return;\n\t}\n\tputs(\"No\");\n}\nint main(){\n\tinit();\n\twork();\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["brute force", "strings"], "dificulty": "2600", "interactive": false}