{
    "link": "https://codeforces.com//contest/761/problem/A",
    "problemId": "90958",
    "problem_idx": "A",
    "shortId": "761A",
    "contest_number": "761",
    "problem_submissions": {
        "E": [
            24312697,
            24311709,
            24310168,
            24311976,
            24311188,
            24315381,
            24312128,
            24315134,
            24315757,
            24315051,
            24311586,
            24318302,
            24316465,
            24310698,
            24314080,
            24317203,
            24314720,
            24307483,
            24315644,
            24308867
        ],
        "D": [
            24308080,
            24302806,
            24306764,
            24303840,
            24312711,
            24310952,
            24308712,
            24308632,
            24304486,
            24318361,
            24305083,
            24314765,
            24313344,
            24306662,
            24308564,
            24311519,
            24304640,
            24301778,
            24312201,
            24302140
        ],
        "C": [
            24304705,
            24303281,
            24303086,
            24315151,
            24314006,
            24300409,
            24305328,
            24308132,
            24307670,
            24308073,
            24301179,
            24311655,
            24307103,
            24301133,
            24303312,
            24299854,
            24299226,
            24307641,
            24303935
        ],
        "A": [
            24296943,
            24297317,
            24293268,
            24295355,
            24314899,
            24301549,
            24295024,
            24293258,
            24293478,
            24294436,
            24294254,
            24298618,
            24301924,
            24304008,
            24305575,
            24293046,
            24297813
        ],
        "B": [
            24295947,
            24297573,
            24299480,
            24314233,
            24314669,
            24296673,
            24301229,
            24303624,
            24311945,
            24304611,
            24297096,
            24300811,
            24301955,
            24297423,
            24296616,
            24298776,
            24296843,
            24310580,
            24301114,
            24295172
        ],
        "F": [
            24322841,
            24309197,
            24319670
        ]
    },
    "name": "A. Dasha and Stairs",
    "statement": "On her way to programming school tiger Dasha faced her first test a huge\r\nstaircase! The steps were numbered from one to infinity. As we know,\r\ntigers are very fond of all striped things, it is possible that it has\r\nsomething to do with their color. So on some interval of her way she\r\ncalculated two values the number of steps with even and odd numbers. You\r\nneed to check whether there is an interval of steps from the -th to the\r\n-th , for which values that Dasha has found are correct.\r\n",
    "solutions": [
        "#include <iostream>\n#include <cmath>\n#include <vector>\n#include <time.h>\n#include <map>\n#include <set>\n#include <deque>\n#include <cstdio>\n#include <cstdlib>\n#include <unordered_map>\n#include <bitset>\n#include <algorithm>\n#include <string>\n#include <fstream>\n#include <assert.h>\n#include <list>\n#include <cstring>\nusing namespace std;\n\nnamespace fastinput\n{\n\t/** Interface */\n\n\tinline int readChar();\n\ttemplate <class T = int> inline T readInt();\n\ttemplate <class T> inline void writeInt(T x, char end = 0);\n\tinline void writeChar(int x);\n\tinline void writeWord(const char *s);\n\n\t/** Read */\n\n\tstatic const int buf_size = 16384;\n\n\tinline int getChar() {\n\t\tstatic char buf[buf_size];\n\t\tstatic int len = 0, pos = 0;\n\t\tif (pos == len)\n\t\t\tpos = 0, len = fread(buf, 1, buf_size, stdin);\n\t\tif (pos == len)\n\t\t\treturn -1;\n\t\treturn buf[pos++];\n\t}\n\n\tinline int readChar() {\n\t\tint c = getChar();\n\t\twhile (c <= 32)\n\t\t\tc = getChar();\n\t\treturn c;\n\t}\n\n\ttemplate <class T>\n\tinline T readInt() {\n\t\tint s = 1, c = readChar();\n\t\tT x = 0;\n\t\tif (c == '-')\n\t\t\ts = -1, c = getChar();\n\t\twhile ('0' <= c && c <= '9')\n\t\t\tx = x * 10 + c - '0', c = getChar();\n\t\treturn s == 1 ? x : -x;\n\t}\n\n\t/** Write */\n\n\tstatic int write_pos = 0;\n\tstatic char write_buf[buf_size];\n\n\tinline void writeChar(int x) {\n\t\tif (write_pos == buf_size)\n\t\t\tfwrite(write_buf, 1, buf_size, stdout), write_pos = 0;\n\t\twrite_buf[write_pos++] = x;\n\t}\n\n\ttemplate <class T>\n\tinline void writeInt(T x, char end) {\n\t\tif (x < 0)\n\t\t\twriteChar('-'), x = -x;\n\n\t\tchar s[24];\n\t\tint n = 0;\n\t\twhile (x || !n)\n\t\t\ts[n++] = (char)('0' + x % 10), x /= 10;\n\t\twhile (n--)\n\t\t\twriteChar(s[n]);\n\t\tif (end)\n\t\t\twriteChar(end);\n\t}\n\n\tinline void writeWord(const char *s) {\n\t\twhile (*s)\n\t\t\twriteChar(*s++);\n\t}\n\n\tstruct Flusher {\n\t\t~Flusher() {\n\t\t\tif (write_pos)\n\t\t\t\tfwrite(write_buf, 1, write_pos, stdout), write_pos = 0;\n\t\t}\n\t} flusher;\n}\n\nusing namespace fastinput;\n\nconst int N = 1e6;\n\nint main()\n{\n\tint a, b;\n\tcin >> a >> b;\n\tif (a == 0 && b == 0)\n\t\tcout << \"NO\";\n\telse if (abs(a - b) > 1)\n\t\tcout << \"NO\";\n\telse\n\t\tcout << \"YES\";\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "constructive algorithms",
        "implementation",
        "math"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Dasha and Stairs.json",
    "editorial_link": "https://codeforces.com//blog/entry/50179",
    "editorial": "Itâs obvious, that if the answer is . answer was also in the case, when\r\nand are equal to , because according to the statement, such interval\r\nshould exist. In other cases the answer is .\r\n",
    "hint": []
}