{
    "link": "https://codeforces.com//contest/1271/problem/A",
    "problemId": "495881",
    "problem_idx": "A",
    "shortId": "1271A",
    "contest_number": "1271",
    "problem_submissions": {
        "F": [
            66961825,
            67036286,
            66974278,
            66959941,
            67028258
        ],
        "D": [
            66955004,
            66954300,
            66950258,
            66955211,
            66955727,
            66954986,
            66956735,
            66957222,
            66956606,
            66952705,
            66951493,
            66952458,
            66958655,
            66958760,
            66959470,
            66951305,
            66951037,
            66961080,
            66953125
        ],
        "E": [
            66949374,
            66950284,
            66955194,
            66945323,
            66950426,
            66952357,
            66949869,
            66952893,
            66953188,
            66956256,
            66958878,
            66957745,
            66946179,
            66952300,
            66952751,
            66953634,
            66960610,
            66957983,
            66952356,
            66960241
        ],
        "C": [
            66945489,
            66944768,
            66945892,
            66949422,
            66948266,
            66947645,
            66944925,
            66945427,
            66944821,
            66946803,
            66944977,
            66945954,
            66962107,
            66945691,
            66947213,
            66947154,
            66945982,
            66945961,
            66946143,
            66945702
        ],
        "B": [
            66942838,
            66941728,
            66942682,
            66945965,
            66941748,
            66944405,
            66942218,
            66943112,
            66940283,
            66944697,
            66941782,
            66942898,
            66961125,
            66942570,
            66943103,
            66943908,
            66943600,
            66947332,
            66942421,
            66942779
        ],
        "A": [
            66938999,
            66939105,
            66938928,
            66942646,
            66939987,
            66939135,
            66939726,
            66939564,
            66938824,
            66939325,
            66939118,
            66940343,
            66960484,
            66938913,
            66939541,
            66940419,
            66940083,
            66938911,
            66938937,
            66942932
        ]
    },
    "name": "A. Suits",
    "statement": "A new delivery of clothing has arrived today to the clothing store. This\r\ndelivery consists of a ties, b scarves, c vests and d jackets.The store\r\ndoes not sell single clothing items instead, it sells suits of two\r\ntypes: a suit of the first type consists of one tie and one jacket; a\r\nsuit of the second type consists of one scarf, one vest and one jacket.\r\nEach suit of the first type costs e coins, and each suit of the second\r\ntype costs f coins.Calculate the maximum possible cost of a set of suits\r\nthat can be composed from the delivered clothing items. Note that one\r\nitem cannot be used in more than one suit (though some items may be left\r\nunused).\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\nint t, s, v, j, e, f, ans;\n\nint main() {\n\tios::sync_with_stdio(false), cin.tie(0);\n\tcin >> t >> s >> v >> j >> e >> f;\n\tif (e > f) {\n\t\twhile (t && j)\n\t\t\tt--, j--, ans += e;\n\t\twhile (s && v && j)\n\t\t\ts--, v--, j--, ans += f;\n\t}\n\telse {\n\t\twhile (s && v && j)\n\t\t\ts--, v--, j--, ans += f;\n\t\twhile (t && j)\n\t\t\tt--, j--, ans += e;\n\t}\n\tcout << ans;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "greedy",
        "math"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Suits.json",
    "editorial_link": "https://codeforces.com/blog/entry/72247",
    "editorial": "There are two ways to approach this problem. The first way is to iterate\r\non the number of suits of one type that we will compose and calculate\r\nthe number of suits of the second type we can compose from the remaining\r\nitems.The second way is to use the fact that if , then we have to make\r\nas many suits of the first type as possible (and the opposite is true if\r\n). So we firstly make the maximum possible number of more expensive\r\nsuits, and use the remaining items to compose cheaper suits.\r\n"
}