{
    "link": "https://codeforces.com//contest/869/problem/C",
    "problemId": "126370",
    "problem_idx": "C",
    "shortId": "869C",
    "contest_number": "869",
    "problem_submissions": {
        "D": [
            31079634,
            31141598,
            31145705
        ],
        "E": [
            31075785,
            31069215,
            31080040,
            31081323,
            31074160,
            31082163,
            31082035,
            31082564,
            31082141,
            31081908,
            31081217,
            31081628,
            31082993,
            31083283,
            31083912,
            31087767,
            31084108,
            31078586,
            31084855,
            31083040
        ],
        "A": [
            31067793,
            31073676,
            31074428,
            31068201,
            31086909,
            31079089,
            31067885,
            31068981,
            31068063,
            31067651,
            31070628,
            31074705,
            31084568,
            31078753,
            31067709,
            31067304,
            31161754,
            31073201,
            31081947,
            31075757,
            31070398
        ],
        "B": [
            31073025,
            31075269,
            31070123,
            31075379,
            31070811,
            31071135,
            31069986,
            31068990,
            31069939,
            31070787,
            31070307,
            31076966,
            31068695,
            31068797,
            31070262,
            31082457,
            31069869,
            31072376
        ],
        "C": [
            31072413,
            31073328,
            31078301,
            31083141,
            31075905,
            31078217,
            31077340,
            31075408,
            31078573,
            31078127,
            31076488,
            31075475,
            31078939,
            31081015,
            31078419,
            31081092,
            31079081,
            31082030
        ]
    },
    "name": "C. The Intriguing Obsession",
    "statement": "With hands joined, go everywhere at a speed faster than our thoughts!\r\nThis time, the Fire Sisters Karen and Tsukihi is heading for somewhere\r\nthey\u2019ve never reached water-surrounded islands!There are three clusters\r\nof islands, conveniently coloured red, blue and purple. The clusters\r\nconsist of , and distinct islands respectively.Bridges have been built\r\nbetween some (possibly all or none) of the islands. A bridge\r\nbidirectionally connects two different islands and has length . For any\r\ntwo islands of the same colour, either they shouldn\u2019t be reached from\r\neach other through bridges, or the shortest distance between them is ,\r\napparently in order to prevent oddities from spreading quickly inside a\r\ncluster.The Fire Sisters are ready for the unknown, but they\u2019d also like\r\nto test your courage. And you\u2019re here to figure out the number of\r\ndifferent ways to build all bridges under the constraints, and give the\r\nanswer modulo . Two ways are considered different if a pair of islands\r\nexist, such that there\u2019s a bridge between them in one of them, but not\r\nin the other.\r\n",
    "solutions": [
        "#include <iostream>\n#include <stdio.h>\n#include <math.h>\n#include <string.h>\n#include <time.h>\n#include <stdlib.h>\n#include <string>\n#include <bitset>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <algorithm>\n#include <sstream>\n#include <stack>\n#include <iomanip>\nusing namespace std;\n#define pb push_back\n#define mp make_pair\ntypedef pair<int,int> pii;\ntypedef long long ll;\ntypedef double ld;\ntypedef vector<int> vi;\n#define fi first\n#define se second\n#define fe first\n#define FO(x) {freopen(#x\".in\",\"r\",stdin);freopen(#x\".out\",\"w\",stdout);}\n#define Edg int M=0,fst[SZ],vb[SZ],nxt[SZ];void ad_de(int a,int b){++M;nxt[M]=fst[a];fst[a]=M;vb[M]=b;}void adde(int a,int b){ad_de(a,b);ad_de(b,a);}\n#define Edgc int M=0,fst[SZ],vb[SZ],nxt[SZ],vc[SZ];void ad_de(int a,int b,int c){++M;nxt[M]=fst[a];fst[a]=M;vb[M]=b;vc[M]=c;}void adde(int a,int b,int c){ad_de(a,b,c);ad_de(b,a,c);}\n#define es(x,e) (int e=fst[x];e;e=nxt[e])\n#define esb(x,e,b) (int e=fst[x],b=vb[e];e;e=nxt[e],b=vb[e])\nll f[5003][5003];\nconst int MOD=998244353;\nint main()\n{\n\tfor(int i=0;i<=5000;++i) f[0][i]=1;\n\tfor(int i=1;i<=5000;++i)\n\t{\n\t\tf[i][0]=1;\n\t\tfor(int j=1;j<=5000;++j)\n\t\t\tf[i][j]=(f[i-1][j]+j*f[i-1][j-1])%MOD;\n\t}\n\tint a,b,c;\n\tscanf(\"%d%d%d\",&a,&b,&c);\n\tll ans=f[a][b]*f[a][c]%MOD*f[b][c]%MOD;\n\tans=(ans%MOD+MOD)%MOD;\n\tprintf(\"%d\\n\",ans);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "combinatorics",
        "dp",
        "math"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. The Intriguing Obsession.json",
    "editorial_link": "https://codeforces.com//blog/entry/55009",
    "editorial": "\u00e2\u0080\u0099The shortest distance between them is at least 3\u00e2\u0080\u0099 means it can\u00e2\u0080\u0099t be 1\r\nor 2. The distance can\u00e2\u0080\u0099t be 1 means that no two islands with the same\r\ncolour can be straightly connected. The distance can\u00e2\u0080\u0099t be 2 means that\r\nfor each island, no two islands with the same colour can both be\r\nstraightly connected with it.The bridges between red and blue islands\r\nhave no effection with those between red and purple ones. Therefore, we\r\ncan make the graph into 3 parts: one between red and blue, one between\r\nblue and purple, and the last one between red and purple.Suppose there\r\nare red islands and blue islands, and there are bridges between them.\r\nThen, the answer will be . So, the answer of bridges between red and\r\nblue ones should be Therefore, the final answer should be .You can\r\ncalculate it with an brute force. Also, you can make it into .\r\n"
}