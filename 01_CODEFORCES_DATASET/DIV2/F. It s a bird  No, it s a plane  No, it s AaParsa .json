{
    "link": "https://codeforces.com//contest/1529/problem/F",
    "problemId": "994173",
    "problem_idx": "F",
    "shortId": "1529F",
    "contest_number": "1529",
    "problem_submissions": {
        "E": [
            117241256,
            117224077,
            117234541,
            117233577,
            117569320,
            117237517,
            117242490,
            117246187,
            117240165,
            117245259,
            117241507,
            117250798,
            117245729,
            117250742,
            117250857,
            117218644
        ],
        "D": [
            117230306,
            117212621,
            117202664,
            117207279,
            117225346,
            117220644,
            117216468,
            117216196,
            117213173,
            117222042,
            117220584,
            117225498,
            117227881,
            117216922,
            117220354,
            117229060,
            117222399,
            117222507,
            117238884
        ],
        "C": [
            117214605,
            117199641,
            117194393,
            117203572,
            117194679,
            117202937,
            117207535,
            117193168,
            117200629,
            117205705,
            117207405,
            117200109,
            117211977,
            117207102,
            117207383,
            117205160,
            117202511,
            117210501,
            117233461
        ],
        "B": [
            117211463,
            117191644,
            117208208,
            117195752,
            117203773,
            117196989,
            117200392,
            117204712,
            117192618,
            117194128,
            117187965,
            117194040,
            117204576,
            117200157,
            117198432,
            117201536,
            117194899,
            117196661,
            117225707
        ],
        "A": [
            117204278,
            117182610,
            117191375,
            117182552,
            117181735,
            117183060,
            117186706,
            117181614,
            117182779,
            117184006,
            117181468,
            117181785,
            117189122,
            117193871,
            117183062,
            117182596,
            117181449,
            117183504,
            117220486
        ],
        "F": [
            117202382,
            117258211,
            117241820,
            117455126,
            117572881,
            117239369,
            117247608,
            117266116,
            117251683,
            117256888,
            117254087
        ]
    },
    "name": "F. It s a bird  No, it s a plane  No, it s AaParsa ",
    "statement": "There are n cities in Shaazzzland, numbered from 0 to n-1. Ghaazzzland,\r\nthe immortal enemy of Shaazzzland, is ruled by AaParsa.As the head of\r\nthe Ghaazzzland’s intelligence agency, AaParsa is carrying out the most\r\nimportant spying mission in Ghaazzzland’s history on Shaazzzland.AaParsa\r\nhas planted m transport cannons in the cities of Shaazzzland. The i-th\r\ncannon is planted in the city a_i and is initially pointing at city\r\nb_i.It is guaranteed that each of the n cities has transport cannon\r\nplanted inside it, and that no two cannons from the same city are\r\ninitially pointing at the same city (that is, all pairs (a_i, b_i) are\r\ndistinct).AaParsa used very advanced technology to build the cannons,\r\nthe cannons rotate every second. In other words, if the i-th cannon is\r\npointing towards the city x at some second, it will target the city (x +\r\n1)\r\nmod n at the next second.As their name suggests, transport cannons are\r\nfor transportation, specifically for human transport. If you use the\r\ni-th cannon to launch yourself towards the city that it’s currently\r\npointing at, you’ll be airborne for c_i seconds before reaching your\r\ntarget destination.If you still don’t get it, using the i-th cannon at\r\nthe s-th second (using which is only possible if you are currently in\r\nthe city a_i) will shoot you to the city (b_i + s)\r\nmod n and you’ll land in there after c_i seconds (so you’ll be there in\r\nthe (s + c_i)-th second). Also note the cannon that you initially\r\nlaunched from will rotate every second but you obviously won’t change\r\ndirection while you are airborne. AaParsa wants to use the cannons for\r\ntravelling between Shaazzzland’s cities in his grand plan, and he can\r\nstart travelling at second 0. For him to fully utilize them, he needs to\r\nknow the minimum number of seconds required to reach city u from city v\r\nusing the cannons for every pair of cities (u, v)..\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int maxn = 605;\n\nvector<pair<int, int>> g[maxn];\n\nint main() {\n    ios_base::sync_with_stdio(false); cin.tie(NULL);\n\n    int n, m;\n    cin >> n >> m;\n    \n    for(int i = 0; i < m; ++i) {\n        int u, v, w; cin >> u >> v >> w;\n        g[u].emplace_back(v, w);\n    }\n\n    for(int start = 0; start < n; ++start) {\n        vector<long long> f(n, 1e18);\n        vector<long long> temp(n, 1e18);\n        vector<bool> taken(n, false);\n        \n        f[start] = 0;\n\n\n        for(int iter = 0; iter < n; ++iter) {\n            fill(temp.begin(), temp.end(), 1e18);\n    \n            int v = -1;\n            for(int i = 0; i < n; ++i) {\n                if (!taken[i] && (v == -1 || f[v] > f[i])) v = i;\n            }\n\n            if (v == -1) break;\n            taken[v] = 1;\n\n            for(auto e : g[v]) {\n                int s = (e.first + f[v]) % n, w = e.second;\n                temp[s] = f[v] + w;\n            }\n\n            long long minLast = 1e18;\n            for(int i = 0; i < n; ++i) {\n                minLast += 1;\n                temp[i] = min(temp[i], minLast);\n                minLast = min(minLast, temp[i]);\n            }\n            for(int i = 0; i < n; ++i) {\n                minLast += 1;\n                temp[i] = min(temp[i], minLast);\n                minLast = min(minLast, temp[i]);\n            }\n            for(int i = 0; i < n; ++i) f[i] = min(f[i], temp[i]);\n        }\n\n        for(int i = 0; i < n; ++i) cout << f[i] << \" \";\n        cout << endl;\n    }\n\n    return 0;\n} "
    ],
    "input": "",
    "output": "",
    "tags": [
        "graphs",
        "shortest paths"
    ],
    "dificulty": "2500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. It s a bird  No, it s a plane  No, it s AaParsa .json",
    "editorial_link": "https://codeforces.com//blog/entry/91058",
    "editorial": "Suppose we did normal dijkstra, the only case that might be missed is when we wait in a vertex for some time.\n\nTo handle the 'waiting' concept, we can add n\n fake edges, i\n-th of which is from the i\n-th vertex to the (i+1modn)\n -th vertex with weight equal to one.\n\nNote that unlike the cannons, fake edges do not rotate.\n\nIt can be proved that doing dijkstra in the new graph is sufficient if we guarantee that the first used edge is not fake.\n\nWe can map waiting for x\n seconds and then using an edge to go to u\n from v\n to using a cannon and then using x\n fake edges to go to u\n from v\n.\n\nAlso due to the strict time limit you should use the O(n2)\n variant of dijkstra.\n\ncomplexity: O(n3)",
    "hint": []
}