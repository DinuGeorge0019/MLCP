{
    "link": "https://codeforces.com//contest/202/problem/B",
    "problemId": "1461",
    "problem_idx": "B",
    "shortId": "202B",
    "contest_number": "202",
    "problem_submissions": {
        "D": [
            1844313,
            1842311,
            1841979,
            1843395,
            1842912,
            1842950,
            1842562,
            1842138,
            1840497,
            1843444,
            1843135
        ],
        "E": [
            1843349,
            1841002,
            1841817,
            1843089
        ],
        "C": [
            1841155,
            1839729,
            1840113,
            1840755,
            1841271,
            1841797,
            1841819,
            1842476,
            1840829,
            1842962,
            1840554,
            1841522,
            1842232,
            1841398,
            1840867
        ],
        "B": [
            1840403,
            1843403,
            1840044,
            1839954,
            1840486,
            1839533,
            1840191,
            1840994,
            1839874,
            1842121
        ],
        "A": [
            1838706,
            1838919,
            1839372,
            1838770,
            1838876,
            1838669,
            1839147,
            1841443,
            1839411,
            1838689,
            1838642,
            1838754,
            1838807,
            1838635,
            1838833,
            1838650
        ]
    },
    "name": "B. Brand New Easy Problem",
    "statement": "A widely known among some people Belarusian sport programmer Lesha\r\ndecided to make some money to buy a one square meter larger flat. To do\r\nthis, he wants to make and carry out a Super Rated Match (SRM) on the\r\nsite Torcoder.com. But there’s a problem a severe torcoder coordinator\r\nIvan does not accept any Lesha’s problem, calling each of them an\r\noffensive word \"duped\" (that is, duplicated). And one day they nearely\r\nquarrelled over yet another problem Ivan wouldn’t accept.You are invited\r\nto act as a fair judge and determine whether the problem is indeed , or\r\nIvan is right and the problem bears some resemblance to those used in\r\nthe previous SRMs.You are given the descriptions of Lesha’s problem and\r\neach of Torcoder.com archive problems. The description of each problem\r\nis a sequence of words. Besides, it is guaranteed that Lesha’s problem\r\nhas no repeated words, while the description of an archive problem may\r\ncontain any number of repeated words.The \"similarity\" between Lesha’s\r\nproblem and some archive problem can be found as follows. Among all\r\npermutations of words in Lesha’s problem we choose the one that occurs\r\nin the archive problem as a subsequence. If there are multiple such\r\npermutations, we choose the one with the smallest number of inversions.\r\nThen the \"similarity\" of a problem can be written as , where is the\r\nnumber of words in Lesha’s problem and is the number of inversions in\r\nthe chosen permutation. Note that the \"similarity\" is always a positive\r\ninteger.The problem is called if there is not a single problem in Ivan’s\r\narchive which contains a permutation of words from Lesha’s problem as a\r\nsubsequence.Help the boys and determine whether the proposed problem is\r\nnew, or specify the problem from the archive which resembles Lesha’s\r\nproblem the most, otherwise.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <cctype>\n#include <ctime>\n#include <iostream>\n#include <sstream>\n#include <algorithm>\n#include <functional>\n#include <string>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n\nusing namespace std;\n\n#ifndef LEEWINGS_DEBUG\n#define LEEWINGS_DEBUG 0\n#endif\n\n#define debug(x) if (LEEWINGS_DEBUG) cerr << #x << \" = \" << (x) << endl\n\n#define debug_line(a, n) do {                                                \\\n    if (LEEWINGS_DEBUG) {                                                             \\\n        cerr << #a << \"[\" << #n << \"]:\" << endl;                             \\\n        for (int i = 0; i < (n); i++) cerr << (a)[i] << \" \";                 \\\n        cerr << endl;                                                        \\\n    }                                                                        \\\n} while (0)\n\n#define debug_mat(a, n, m) do {                                              \\\n    if (LEEWINGS_DEBUG) {                                                             \\\n        cerr << #a << \"[\" << #n << \"][\" << #m \"]:\" << endl;                  \\\n        for (int i = 0; i < (n); i++) {                                      \\\n            for (int j = 0; j < (m); j++) cerr << (a)[i][j] << \" \";          \\\n            cerr << endl;                                                    \\\n        }                                                                    \\\n    }                                                                        \\\n} while(0)\n\ntypedef pair<int, int> pii;\ntypedef vector<int>::const_iterator vci;\ntypedef map<int, int>::const_iterator mci;\n\nconst int INF = 0x3f3f3f3f;\nconst long long LLINF = 0x3f3f3f3f3f3f3f3fll;\nconst double DINF = 1.0/0.0f;\nconst double pi = acos(-1.0);\nconst double eps = 1e-8;\nconst int MOD = 1000000007;\n\ninline int LC(int x) { return x << 1; }\ninline int RC(int x) { return (x << 1) | 1; }\ninline bool eq0(double x) { return fabs(x) < eps; }\ninline bool eq(double x, double y) { return fabs(x - y) < eps; }\ninline bool ls(double x, double y) { return x + eps < y; }\ninline bool gr(double x, double y) { return x - eps > y; }\ninline bool greq(double x, double y) { return x + eps >= y; }\ninline bool lseq(double x, double y) { return x - eps <= y; }\ninline double fmax(double x, double y) { return gr(x, y) ? x : y; }\ninline double fmin(double x, double y) { return ls(x, y) ? x : y; }\n\ntemplate<class T> inline T sqr(T x) { return x * x; }\n\nint n, x;\n\nvoid calc_x(vector<int> *pos, vector<int> &choose, int p)\n{\n    if (p == n) {\n        int tx = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (choose[i] > choose[j]) tx++;\n            }\n        }\n        x = min(x, tx);\n    } else {\n        for (int i = 0; i < pos[p].size(); i++) {\n            choose[p] = pos[p][i];\n            calc_x(pos, choose, p + 1);\n        }\n    }\n}\n\nint similarity(const vector<string> &lesha, const vector<string> &a)\n{\n    vector<int> pos[n];\n    for (int i = 0; i < lesha.size(); i++) {\n        for (int j = 0; j < a.size(); j++) {\n            if (lesha[i] == a[j]) {\n                pos[i].push_back(j);\n            }\n        }\n        if (pos[i].empty()) return -1;\n    }\n\n    x = INF;\n    vector<int> choose(n);\n    calc_x(pos, choose, 0);\n\n    return n * (n - 1) / 2 - x + 1;\n}\n\nint main()\n{\n    while (cin >> n) {\n        vector<string> lesha;\n        for (int i = 0; i < n; i++) {\n            string t;\n            cin >> t;\n            lesha.push_back(t);\n        }\n\n        int m;\n        cin >> m;\n        vector<string> archive[m];\n        for (int i = 0; i < m; i++) {\n            int k;\n            cin >> k;\n            while (k--) {\n                string t;\n                cin >> t;\n                archive[i].push_back(t);\n            }\n        }\n\n        int p = -1;\n        int idx = -1;\n        for (int i = 0; i < m; i++) {\n            int tp = similarity(lesha, archive[i]);\n            if (tp > p) {\n                p = tp;\n                idx = i + 1;\n            }\n        }\n\n        if (p == -1) cout << \"Brand new problem!\" << endl;\n        else {\n            cout << idx << endl;\n            cout << \"[:\";\n            while (p--) cout << '|';\n            cout << \":]\" << endl;\n        }\n    }\n\n    return 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Brand New Easy Problem.json",
    "editorial_link": "https://codeforces.com/blog/entry/4808",
    "editorial": "The constraints in this problem were so low that a solution with complexity O(m·kn) was just fine. In each problem's description it's enough to loop over all possible subsequences of words which are permutations of words in Lesha's problem, for each of them calculate the number of inversions and choose a permutation with the smallest number of inversions. This can result in a short solution using recursion or, for example, you can use several nested loops (from 1 to 4). At the end you should choose the problem with the smallest value of best and print the answer in the corresponding form.\n",
    "hint": []
}