{"link": "https://codeforces.com//contest/567/problem/E", "problemId": "32464", "problem_idx": "E", "shortId": "567E", "contest_number": "567", "problem_submissions": {"E": [12368419, 12374631, 12397425, 12788088, 12389152, 12406146], "D": [12361936, 12364905, 12366026, 12367144, 12362999, 12362187, 12362197, 12363830, 12363930, 12363691, 12364368, 12363078, 12362951, 12369923, 12364411, 12364518, 12365344, 12364031, 12364332], "C": [12358359, 12361761, 12364757, 12364566, 12375712, 12357726, 12357396, 12357507, 12355472, 12358430, 12360526, 12359721, 12359102, 12360618, 12360834, 12358973, 12358889, 12361330], "B": [12356896, 12358133, 12362101, 12361060, 12355833, 12356064, 12358845, 12355641, 12356983, 12356330, 12357412, 12355553, 12354653, 12356634, 12358468, 12356890, 12356104, 12359549], "A": [12353500, 12353898, 12359353, 12355278, 12353802, 12353454, 12354645, 12353575, 12353588, 12353804, 12354250, 12353515, 12353505, 12353940, 12356166, 12354753, 12353585, 12355460], "F": [12373751, 12373972, 12370851, 12374943]}, "name": "E. President and Roads", "statement": "Berland has cities, the capital is located in city , and the historic\r\nhome town of the President is in city (). The cities are connected by\r\none-way roads, the travel time for each of the road is a positive\r\ninteger.Once a year the President visited his historic home town , for\r\nwhich his motorcade passes along some path from to (he always returns on\r\na personal plane). Since the president is a very busy man, he always\r\nchooses the path from to , along which he will travel the fastest.The\r\nministry of Roads and Railways wants to learn for each of the road:\r\nwhether the President will definitely pass through it during his\r\ntravels, and if not, whether it is possible to repair it so that it\r\nwould definitely be included in the shortest path from the capital to\r\nthe historic home town of the President. Obviously, the road can not be\r\nrepaired so that the travel time on it was less than one. The ministry\r\nof Berland, like any other, is interested in maintaining the budget, so\r\nit wants to know the minimum cost of repairing the road. Also, it is\r\nvery fond of accuracy, so it repairs the roads so that the travel time\r\non them is always a positive integer.\r\n", "solutions": ["#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <set>\n#include <map>\n#include <queue>\n#include <ctime>\n\n#define pb push_back\n#define ll long long\n#define mp make_pair\n#define f first\n#define s second\n#define pii pair < int, int >\n#define ull unsigned long long\n#define pll pair < ll, ll >\n#define forit(s) for(__typeof(s.begin()) it = s.begin(); it != s.end(); it ++)\n#define all(s) s.begin(), s.end()\n\nconst int inf = (1ll << 31) - 1;\nconst int maxn = (int) 1e5 + 10;\n\nusing namespace std;\n\nvector < pii > g[3][100100];\nset < pii > gg[100100];\nll dp[3][100100];\nint a[100100], b[100100], c[100100];\nint n, m;\nint tt[5];\n\nvoid calc(int x){\n    set < pll > S;\n    for(int i = 1; i <= n; i++)\n        dp[x][i] = ( 1ll << 50);\n    dp[x][tt[x]] = 0;\n    for(int i = 1; i <= n; i++){\n        S.insert(mp(dp[x][i], i));\n    }\n    while(S.size() > 0){\n        pll t = *S.begin();\n        S.erase(S.begin());\n        int v = t.s;\n        for(int i = 0; i < g[x][v].size(); i++){\n            pii p = g[x][v][i];\n            int to = p.f;\n            int len = p.s;\n            if(dp[x][v] + len < dp[x][to]){\n                S.erase(mp(dp[x][to], to));\n                dp[x][to] = dp[x][v] + len;\n                S.insert(mp(dp[x][to], to));\n            }\n        }\n    }\n}\n\nbool used[100100];\nint main () {\n    #ifdef LOCAL\n    freopen (\"a.in\", \"r\", stdin);\n    freopen (\"a.out\", \"w\", stdout);\n    #endif\n    scanf(\"%d %d %d %d\\n\", &n, &m, &tt[0], &tt[1]);\n    for(int i = 0; i < m ; i++){\n        scanf(\"%d %d %d\\n\", &a[i], &b[i], &c[i]);\n        g[0][a[i]].pb(mp(b[i], c[i]));\n        g[1][b[i]].pb(mp(a[i], c[i]));\n    }\n    calc(0);\n    calc(1);\n\n    ll mini = dp[0][tt[1]];\n    \n    set < pll > S;\n    S.insert(mp(0, tt[0]));\n    vector < pair < pii, int > > con;\n    while(S.size() > 0){\n        pll x = *S.begin();\n        int v = x.s;\n        S.erase(S.begin());\n        if(S.size() == 0){\n            int cnt = 0;\n            for(int i = 0; i < g[0][v].size(); i++){\n                int to = g[0][v][i].f;\n                int len = g[0][v][i].s;\n                if(x.f + len+dp[1][to] == mini){\n                    cnt++;\n                    S.insert(mp(x.f + len, to));\n                }\n            }\n            if(cnt == 1){\n                for(int i = 0; i < g[0][v].size(); i++){\n                    int to = g[0][v][i].f;\n                    int len = g[0][v][i].s;\n                    if(x.f + len+dp[1][to] == mini){\n                        gg[v].insert(mp(to, len));\n                    }\n                }\n            }\n        }\n        else {\n            for(int i = 0; i < g[0][v].size(); i++){\n                int to = g[0][v][i].f;\n                int len = g[0][v][i].s;\n                if(x.f + len+dp[1][to] == mini){\n                    S.insert(mp(x.f + len, to));\n                }\n            }\n        }\n    }\n    for(int i = 0; i < m; i++){\n        ll diff = dp[1][b[i]] +     dp[0][a[i]] + c[i] - mini;\n        if(gg[a[i]].find(mp(b[i], c[i])) != gg[a[i]].end()){\n            printf(\"YES\\n\");\n        }\n        else if(diff + 1< c[i] ) {\n            printf(\"CAN %I64d\\n\",  diff + 1);\n        }\n        else {\n            printf(\"NO\\n\");\n        }\n    }\n    \n\n\n\n\n\n\n\n\n\n    #ifdef LOCAL\n    cerr << 1.0 * clock() / CLOCKS_PER_SEC << \" s.\\n\";\n    #endif\n    return 0;\n}\n\n"], "input": "", "output": "", "tags": ["dfs and similar", "graphs", "hashing", "shortest paths"], "dificulty": "2200", "interactive": false}