{"link": "https://codeforces.com//contest/144/problem/E", "problemId": "785", "problem_idx": "E", "shortId": "144E", "contest_number": "144", "problem_submissions": {"B": [1079685, 1076543, 1079898, 1082847, 1082735, 1077650, 1076828, 1076897, 1075703, 1076570, 1078583, 1076905, 1080333, 1077070, 1076919, 1077073, 1077426, 1076974, 1076783, 1080322], "C": [1079250, 1077173, 1076551, 1078237, 1077015, 1076842, 1077698, 1077957, 1077065, 1077590, 1079431, 1077439, 1075886, 1077839, 1077621, 1077697, 1075975, 1077567, 1077415, 1077375], "D": [1078442, 1078477, 1077789, 1080084, 1080478, 1079868, 1078561, 1082477, 1079132, 1078573, 1078956, 1077881, 1080255, 1079060, 1079072, 1079853, 1079171, 1079213, 1078913], "E": [1077630, 1079988, 1080515, 1079940, 1081931, 1080530, 1097618, 1079963, 1082156, 1078798, 1082939, 1084001, 1083991, 1083989], "A": [1075930, 1075624, 1075694, 1076063, 1075731, 1075713, 1075976, 1075788, 1076457, 1075616, 1076584, 1075746, 1080725, 1075619, 1075655, 1075636, 1076691, 1075720, 1075774, 1080649]}, "name": "E. Competition", "statement": "The secondary diagonal of a square matrix is a diagonal going from the\r\ntop right to the bottom left corner. Let\u2019s define an -degree as a square\r\nmatrix containing no squares above the secondary diagonal (the picture\r\nbelow shows a 5-degree staircase). The squares of the -degree staircase\r\ncontain sportsmen. A sportsman needs one second to move to a\r\nside-neighboring square of the staircase. Before the beginning of the\r\ncompetition each sportsman must choose one of the shortest ways to the\r\nsecondary diagonal. After the starting whistle the competition begins\r\nand all sportsmen start moving along the chosen paths. When a sportsman\r\nreaches a cell of the secondary diagonal, he stops and moves no more.\r\nThe competition ends when all sportsmen reach the secondary diagonal.\r\nThe competition is considered successful if during it no two sportsmen\r\nwere present in the same square simultaneously. Any square belonging to\r\nthe secondary diagonal also cannot contain more than one sportsman. If a\r\nsportsman at the given moment of time leaves a square and another\r\nsportsman comes to it, then they are not considered to occupy the same\r\nsquare simultaneously. Note that other extreme cases (for example, two\r\nsportsmen moving towards each other) are impossible as the chosen ways\r\nare the shortest ones.You are given positions of sportsmen on the\r\nstaircase. Your task is to choose among them the maximum number of\r\nsportsmen for who the competition can be successful, that is, so that\r\nthere existed such choice of shortest ways for the sportsmen at which no\r\ntwo sportsmen find themselves in the same square simultaneously. All\r\nother sportsmen that are not chosen will be removed from the staircase\r\nbefore the competition starts.\r\n", "solutions": ["#include <string>\n#include <algorithm>\n#include <utility>\n#include <stdlib.h>\n#include <stdio.h>\n#include <vector>\n#include <iostream>\n#include <sstream>\n#include <set>\n#include <map>\n#include <math.h>\n#include <queue>\n#include <utility>\n#include <time.h>\n#include <string.h>\nusing namespace std;\n\n\nint main( void )\n{\n\tint n, m;\n\tcin >> n >> m;\n\tvector< pair<pair<int,int>,int> > R(m);\n\tfor( int i = 0; i < m; i ++ ){\n\t\tint r, c;\n\t\tcin >> r >> c;\n\t\tR.push_back(pair<pair<int,int>,int>(pair<int,int>(n-r+1, c), i));\n\t}\n\tsort( R.begin(), R.end() );\n\tpriority_queue<pair<int,int> > wl;\n\tint ans = 0;\n\tvector<int> ANS;\n\tfor( int pos = 1, j = 0; pos <= n; pos ++ ){\n\t\twhile( j < R.size() && R[j].first.first <= pos ){\n\t\t\twl.push( pair<int,int>(-R[j].first.second, R[j].second) ); j ++;\n\t\t}\n\t\twhile( !wl.empty() && (-wl.top().first) < pos )\n\t\t\twl.pop();\n\t\tif( !wl.empty() ){\n\t\t\tANS.push_back(wl.top().second);\n\t\t\twl.pop();\n\t\t\t++ ans;\n\t\t}\n\t}\n\tcout << ans << endl;\n\tfor( int i = 0; i < ANS.size(); i ++ ){\n\t\tif( i > 0 )\n\t\t\tcout << \" \";\n\t\tcout << (ANS[i]+1);\n\t}\n\tcout << endl;\n}\n"], "input": "", "output": "", "tags": ["data structures", "greedy"], "dificulty": "2200", "interactive": false}