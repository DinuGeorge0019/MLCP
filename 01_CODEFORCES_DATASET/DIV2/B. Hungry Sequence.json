{
    "link": "https://codeforces.com//contest/327/problem/B",
    "problemId": "3284",
    "problem_idx": "B",
    "shortId": "327B",
    "contest_number": "327",
    "problem_submissions": {
        "E": [
            4017313,
            4017507,
            4018772,
            4017910,
            4019268,
            4023331,
            4015900,
            4017838,
            4016759,
            4027441,
            4022024,
            4019276
        ],
        "C": [
            4014970,
            4014797,
            4014725,
            4014945,
            4015808,
            4013334,
            4014670,
            4013527,
            4014594,
            4014368,
            4014192,
            4014033,
            4014334,
            4014505,
            4015890,
            4015156,
            4015704
        ],
        "D": [
            4014693,
            4016265,
            4015556,
            4017918,
            4018611,
            4017193,
            4015911,
            4016489,
            4016642,
            4016033,
            4016317,
            4016734,
            4016607,
            4017683,
            4017510
        ],
        "A": [
            4012718,
            4011428,
            4014213,
            4012212,
            4011845,
            4011264,
            4011546,
            4011299,
            4011577,
            4011527,
            4011323,
            4011508,
            4011858,
            4011904,
            4011582,
            4012111,
            4011772
        ],
        "B": [
            4011621,
            4012593,
            4012805,
            4012674,
            4012463,
            4011873,
            4012480,
            4011682,
            4012186,
            4012474,
            4011938,
            4011986,
            4012535,
            4012626,
            4012279,
            4012988,
            4012431
        ]
    },
    "name": "B. Hungry Sequence",
    "statement": "Iahub and Iahubina went to a date at a luxury restaurant. Everything\r\nwent fine until paying for the food. Instead of money, the waiter wants\r\nIahub to write a Hungry sequence consisting of integers. A sequence , ,\r\n..., , consisting of integers, is if and only if: Its elements are in\r\nincreasing order. That is an inequality holds for any two indices . For\r\nany two indices and , must be divisible by . Iahub is in trouble, so he\r\nasks you for help. Find a Hungry sequence with elements.\r\n",
    "solutions": [
        "/*\n* Problem: \n* Author: Leo Yu\n* Time: \n* State: SOLVED\n* Memo: \n*/\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <iostream>\n#include <algorithm>\n#include <ctime>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\ntypedef long long LL;\ninline int\tread()\n{\n\tint x = 0; char ch = getchar(); bool positive = 1;\n\tfor (; ch < '0' || ch > '9'; ch = getchar())\tif (ch == '-')  positive = 0;\n\tfor (; ch >= '0' && ch <= '9'; ch = getchar())\tx = x * 10 + ch - '0';\n\treturn positive ? x : -x;\n}\n#define link Link\n#define next Next\n#define elif else if\n\nint main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"B.in\", \"r\", stdin);\n\tfreopen(\"B.out\", \"w\", stdout);\n#endif\n\n\tint N = read();\n\tfor (int i = 1; i <= N; ++ i)\tprintf(\"%d%c\", i + N, i < N ? ' ' : '\\n');\n\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "1200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Hungry Sequence.json",
    "editorial_link": "https://codeforces.com//blog/entry/8274",
    "editorial": "We ll present two different solutions for this task. Solution 1. What if\r\nwe solve a more general task? What if each hungry number from the\r\nsolution isn t allowed to be divided by any number smaller than it\r\n(except 1, which is divides every natural number). If this more general\r\ncondition would be met, then the hungry condition would be met, too (as\r\na[i] won t be divided by a number smaller than it (except 1), it won t\r\nbe divided by a[j], too, with j < i, assuming that a[j] is different\r\nfrom 1). Now how to find numbers for this more general condition? We can\r\nrephrase it as: each number from more general condition has 2 divisors:\r\n1 and itself. So if we print N numbers with 2 divisors in increasing\r\norder, that would be a good solution. As you probably know, numbers with\r\n2 divisors are called prime numbers . The task reduces to finding first\r\nN prime numbers. This can be done via brute force, or via Sieve of\r\nEratosthenes (however, not necessarily to get an AC solution). Solution\r\n2. Suppose we are given the number N. We can observe that for big enough\r\nconsecutive numbers, the array is always hungry. For example, we can\r\nprint 3 * N + 0, 3 * N + 1, 3 * N + 2, , 3 * N + (N 1). Magic, isn t it?\r\nWhy does it work now? Pick an arbitrary a[i]. The solution would be bad\r\nif one of numbers 2 * a[i], 3 * a[i], 4 * a[i] and so on would be in a[]\r\narray. However, it will never happen. The smallest multiple from that\r\nones will be 2 * 3 * N = 6 * N. There is not possible to obtain a\r\nsmallest multiple than that one. On the other hand, the biggest number\r\nfrom a[] array would be 3 * N + N 1 = 4 * N 1. Since smallest multiple\r\nis bigger than biggest term of the array, it (and of course other\r\nmultiples bigger than it) will never exist in a[] array. So the above\r\nsolution is correct also.\r\n"
}