{"link": "https://codeforces.com//contest/1634/problem/C", "problemId": "1285095", "problem_idx": "C", "shortId": "1634C", "contest_number": "1634", "problem_submissions": {"D": [145448060, 145421218, 145416745, 145423344, 145443205, 145427784, 145443409, 145431341, 145433882, 145423790, 145432676, 145425041, 145425515, 145428134, 145433736, 145425560, 145429012, 145409353, 145450134], "F": [145433416, 145453477, 145451269, 145460505, 145460962, 145457398, 145463150, 146209818, 145424500, 146353080, 145461554], "E": [145417696, 145430773, 145437025, 145445326, 145418577, 145442374, 145429197, 145419121, 145409285, 145435196, 145437792, 145441628, 145453390, 145439700, 145444612, 145443262, 145449756, 145425032], "C": [145412708, 145407591, 145405856, 145408804, 145405037, 145408252, 145414142, 145411742, 145412561, 145404073, 145409362, 145407564, 145408646, 145418751, 145411128, 145416814, 145410703, 145419625, 145409764], "B": [145407070, 145396453, 145401718, 145400856, 145397249, 145398450, 145410765, 145408191, 145401469, 145397310, 145403868, 145398596, 145400216, 145410152, 145399502, 145397772, 145402171, 145398736, 145404461], "A": [145397151, 145395090, 145396464, 145396099, 145395149, 145395150, 145396024, 145395848, 145396137, 145395189, 159142248, 145403722, 145395766, 145395501, 145399119, 145395603, 145395368, 145397257, 145397479]}, "name": "C. OKEA", "statement": "People worry that computers will get too smart and take over the world,\r\nbut the real problem is that they\u2019re too stupid and they\u2019ve already\r\ntaken over the world. Pedro DomingosYou work for a well-known department\r\nstore that uses leading technologies and employs mechanistic work that\r\nis, robots!The department you work in sells n\r\ncdot k items. The first item costs 1 dollar, the second item costs 2\r\ndollars, and so on: i-th item costs i dollars. The items are situated on\r\nshelves. The items form a rectangular grid: there are n shelves in\r\ntotal, and each shelf contains exactly k items. We will denote by\r\na_{i,j} the price of j-th item (counting from the left) on the i-th\r\nshelf, 1\r\nle i\r\nle n, 1\r\nle j\r\nle k.Occasionally robots get curious and ponder on the following\r\nquestion: what is the mean price (arithmetic average) of items a_{i,l},\r\na_{i,l+1},\r\nldots, a_{i,r} for some shelf i and indices l\r\nle r? Unfortunately, the old robots can only work with whole numbers. If\r\nthe mean price turns out not to be an integer, they break down.You care\r\nabout robots\u2019 welfare. You want to arrange the items in such a way that\r\nthe robots cannot theoretically break. Formally, you want to choose such\r\na two-dimensional array a that: Every number from 1 to n\r\ncdot k (inclusively) occurs exactly once. For each i, l, r, the mean\r\nprice of items from l to r on i-th shelf is an integer. Find out if such\r\nan arrangement is possible, and if it is, give any example of such\r\narrangement.\r\n", "solutions": ["#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define mp make_pair\n#define reg register\nconst int maxn=10005;\nchar buffer[maxn],*S,*T;\ninline char Get_Char(){\n    if(S==T){\n        T=(S=buffer)+fread(buffer,1,maxn,stdin);\n        if(S==T)return EOF;\n    }\n    return *S++;\n}\n\ninline int read(){\n    reg char c;\n    reg int re=0,f=0;\n    for(c=Get_Char();c<'0' or c>'9';c=Get_Char())if(c=='-')f=1;\n    for(;c>='0' and c<='9';)re=(re<<1)+(re<<3)+(c-'0'),c=Get_Char();\n    if(f)return -re;\n    return re;\n}\n\ninline void read(int&x){\n    reg char c;\n    reg int re=0,f=0;\n    for(c=Get_Char();c<'0' or c>'9';c=Get_Char())if(c=='-')f=1;\n    for(;c>='0' and c<='9';)re=(re<<1)+(re<<3)+(c-'0'),c=Get_Char();\n    if(f)x=-re;\n    else x=re;\n}\ninline void read(ll&x){\n    reg char c;\n    reg ll re=0,f=0;\n    for(c=Get_Char();c<'0' or c>'9';c=Get_Char())if(c=='-')f=1;\n    for(;c>='0' and c<='9';)re=(re<<1)+(re<<3)+(c-'0'),c=Get_Char();\n    if(f)x=-re;\n    else x=re;\n}\nint a[555][555];\ninline void solve(){\n\tint n,k;\n\tcin>>n>>k;\n\tif(k==1){\n\t\tcout<<\"YES\\n\";\n\t\tfor(int i=1;i<=n;++i)cout<<i<<'\\n';\n\t\treturn;\n\t}\n\tif(n%2==1){\n\t\tcout<<\"NO\\n\";\n\t\treturn;\n\t}\n\tcout<<\"YES\\n\";\n\tfor(int i=1;i<=n;i+=2){\n\t\tint bg=(i-1)*k+1;\n\t\tint tbg=bg+1;\n\t\tfor(int j=1;j<=k;++j)a[i][j]=bg,bg+=2;\n\t\tfor(int j=1;j<=k;++j)a[i+1][j]=tbg,tbg+=2;\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=1;j<=k;++j)cout<<a[i][j]<<' ';\n\t\tcout<<'\\n';\n\t}\n}\nint main(){\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0),cout.tie(0);\n\tint T=1;\n\tcin>>T;\n\tfor(;T--;)solve();\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["constructive algorithms"], "dificulty": "1000", "interactive": false}