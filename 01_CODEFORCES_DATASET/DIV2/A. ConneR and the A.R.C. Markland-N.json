{
    "link": "https://codeforces.com//contest/1293/problem/A",
    "problemId": "519782",
    "problem_idx": "A",
    "shortId": "1293A",
    "contest_number": "1293",
    "problem_submissions": {
        "F": [
            69144490
        ],
        "E": [
            69128562,
            69139795,
            69142024,
            69131945,
            69142296,
            69141087,
            69144888,
            69145848,
            69164707
        ],
        "D": [
            69110626,
            69117551,
            69124060,
            69120174,
            69127386,
            69126155,
            69129595,
            69130299,
            69114746,
            69117610,
            69118282,
            69119817,
            69121032,
            69120169,
            69124854,
            69120660,
            69119364,
            69123969,
            69120677
        ],
        "C": [
            69102974,
            69108977,
            69107084,
            69104834,
            69114459,
            69118062,
            69106027,
            69117297,
            69105999,
            69106862,
            69108959,
            69111194,
            69109221,
            69111162,
            69107446,
            69109831,
            69111539,
            69110537,
            69100793
        ],
        "B": [
            69100602,
            69105372,
            69103818,
            69141041,
            69106215,
            69103881,
            69107978,
            69109703,
            69102030,
            69102659,
            69103831,
            69103631,
            69104162,
            69106217,
            69102105,
            69103438,
            69103183,
            69102839,
            69102420
        ],
        "A": [
            69100208,
            69103403,
            69101074,
            69134161,
            69102156,
            69101452,
            69101459,
            69101593,
            69100449,
            69100351,
            69100975,
            69100577,
            69100919,
            69101698,
            69100184,
            69100301,
            69100964,
            69100796,
            69109424
        ]
    },
    "name": "A. ConneR and the A.R.C. Markland-N",
    "statement": "A.R.C. Markland-N is a tall building with n floors numbered from 1 to n.\r\nBetween each two adjacent floors in the building, there is a staircase\r\nconnecting them.It\u2019s lunchtime for our sensei Colin \"ConneR\" Neumann Jr,\r\nand he\u2019s planning for a location to enjoy his meal.ConneR\u2019s office is at\r\nfloor s of the building. On each floor (including floor s, of course),\r\nthere is a restaurant offering meals. However, due to renovations being\r\nin progress, k of the restaurants are currently closed, and as a result,\r\nConneR can\u2019t enjoy his lunch there.CooneR wants to reach a restaurant as\r\nquickly as possible to save time. What is the minimum number of\r\nstaircases he needs to walk to reach a closest currently open\r\nrestaurant.Please answer him quickly, and you might earn his praise and\r\neven enjoy the lunch with him in the elegant Neumanns\u2019 way!\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main(void) {\n    ios_base::sync_with_stdio(0);\n    cin.tie(NULL);\n    int ntest;\n    cin >> ntest;\n    while (ntest--) {\n        int n, s, k, x;\n        cin >> n >> s >> k;\n        set <int> ss;\n        for (int i = 1; i <= k; ++i) cin >> x, ss.insert(x);\n        int ans = 0;\n        while (true) {\n            if (s + ans <= n && ss.find(s + ans) == ss.end()) break;\n            if (s - ans >= 1 && ss.find(s - ans) == ss.end()) break;\n            ++ans;\n        }\n        cout << ans << '\\n';\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "brute force",
        "implementation"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. ConneR and the A.R.C. Markland-N.json",
    "editorial_link": "https://codeforces.com//blog/entry/73051",
    "editorial": "Since there\u00e2\u0080\u0099s only closed restaurants, in the worst case we\u00e2\u0080\u0099ll only have\r\nto walk for staircases only (one such case would be and all the\r\nrestaurants from floor to are closed).Therefore, a brute force solution\r\nis possible: try out every distance from to . For each, determine if\r\neither or is within range and not being in the closed list.The check of\r\nan element being a list or not can be done easily by a built-in function\r\nin most programming languages, for C++ it would be the \"\" function with\r\nlinear time complexity. Of course one would love to check with /, but\r\nfor this problem it\u00e2\u0080\u0099s an overkill.Time complexity: .\r\n"
}