{
    "link": "https://codeforces.com//contest/508/problem/A",
    "problemId": "21343",
    "problem_idx": "A",
    "shortId": "508A",
    "contest_number": "508",
    "problem_submissions": {
        "E": [
            9587610,
            9584813,
            9586421,
            9585135,
            9583814,
            9589053,
            9587449,
            9586484,
            9589963,
            9588638,
            9584850,
            9589523,
            9582441,
            9590322,
            9588666,
            9583017,
            9590629,
            9606435
        ],
        "D": [
            9585269,
            9592984,
            9592880,
            9606979,
            11955537,
            9597174,
            9607981,
            9591160
        ],
        "C": [
            9578155,
            9579052,
            9580254,
            9581709,
            9579236,
            9581849,
            9584375,
            9581929,
            9580398,
            9580036,
            9584567,
            9580689,
            9584970,
            9588863,
            9584808,
            9582586,
            9578299,
            9582444,
            9584975
        ],
        "B": [
            9575657,
            9576658,
            9575398,
            9576129,
            9576184,
            9577421,
            9578063,
            9577484,
            9575841,
            9575521,
            9580057,
            9577021,
            9576342,
            9586515,
            9578539,
            9578428,
            9577881,
            9580472
        ],
        "A": [
            9574439,
            9574503,
            9577415,
            9574774,
            9577057,
            9574902,
            9574502,
            9574812,
            9574701,
            9574474,
            9574846,
            9581748,
            9574597,
            9585159,
            9575359,
            9590306,
            9574725,
            9575399,
            9578528
        ]
    },
    "name": "A. Pasha and Pixels",
    "statement": "Pasha loves his phone and also putting his hair up... But the hair is\r\nnow irrelevant.Pasha has installed a new game to his phone. The goal of\r\nthe game is following. There is a rectangular field consisting of row\r\nwith pixels in each row. Initially, all the pixels are colored white. In\r\none move, Pasha can choose any pixel and color it black. In particular,\r\nhe can choose the pixel that is already black, then after the boy\u2019s move\r\nthe pixel does not change, that is, it remains black. Pasha loses the\r\ngame when a square consisting of black pixels is formed. Pasha has made\r\na plan of moves, according to which he will paint pixels. Each turn in\r\nhis plan is represented as a pair of numbers and , denoting respectively\r\nthe row and the column of the pixel to be colored on the current\r\nmove.Determine whether Pasha loses if he acts in accordance with his\r\nplan, and if he does, on what move the square consisting of black pixels\r\nis formed.\r\n",
    "solutions": [
        "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\nint main() {\n#ifdef HOME\n    freopen(\"input.txt\", \"r\", stdin);\n    //freopen(\"output.txt\", \"w\", stdout);\n#else\n\n#endif\n\n    int n, m, k;\n    cin >> n >> m >> k;\n\n    char used[n + 2][m + 2];\n    memset(used, 0, sizeof(used));\n\n    for (int i = 0; i < k; ++i) {\n        int x, y;\n        cin >> x >> y;\n\n        used[x][y] = 1;\n\n        for (int a = -1; a <= 0; ++a) {\n            for (int b = -1; b <= 0; ++b) {\n                int s = 0;\n                for (int u = 0; u < 2; ++u) {\n                    for (int v = 0; v < 2; ++v) {\n                        s += used[x + a + u][y + b + v];\n                    }\n                }\n                if (s == 4) {\n                    cout << i + 1 << \"\\n\";\n                    return 0;\n                }\n            }\n        }\n\n    }\n\n    cout << \"0\\n\";\n\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Pasha and Pixels.json",
    "editorial_link": "https://codeforces.com/blog/entry/16048?locale=en",
    "editorial": "To solve this problem let's create matrix with type bool and dimensions n on m. Cell (x,?y) of this matrix is true \u0097 if this cell painted in black color.\n\nLet on move number k Pasha paints pixel in position (i,?j). Then game ending on this move, if square 2?\u00d7?2 formed from black cells appears, and cell (i,?j) will upper-left, upper-right, bottom-left or bottom-right of this squares. Only this squares we need to check on current move. If we haven't such squares after k moves, print 0. Asymptotic behavior of this solution \u0097 O(k), where k \u0097 number of moves."
}