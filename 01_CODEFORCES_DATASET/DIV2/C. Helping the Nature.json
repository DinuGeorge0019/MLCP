{
    "link": "https://codeforces.com//contest/1700/problem/C",
    "problemId": "1433684",
    "problem_idx": "C",
    "shortId": "1700C",
    "contest_number": "1700",
    "problem_submissions": {
        "F": [
            161204184,
            161175037,
            161206125,
            161212939,
            161208920,
            161208613,
            161221499,
            161209546
        ],
        "E": [
            161198687,
            161196286,
            161355967,
            161718414,
            161625123,
            161210058,
            161186427,
            161205675,
            161211460,
            161212251,
            161209815,
            161226432,
            161215179,
            161212687,
            161209759,
            161208133,
            161212427
        ],
        "D": [
            161181899,
            161187142,
            161172748,
            161191235,
            161182477,
            161193166,
            161184771,
            161194388,
            161383056,
            161196489,
            161188119,
            161188891,
            161183798,
            161190373,
            161201766,
            161189358,
            161191653,
            161196390,
            161376237,
            161189700,
            161191427
        ],
        "C": [
            161179311,
            161183541,
            161180380,
            161184212,
            161718390,
            161184885,
            161181511,
            161178526,
            161188654,
            161193034,
            161183225,
            161183002,
            161175389,
            161193124,
            161191878,
            161177816,
            161183179,
            161187003,
            161183522,
            161177845
        ],
        "B": [
            161174411,
            161180612,
            161180415,
            161180363,
            161174680,
            161179087,
            161174700,
            161180026,
            161190959,
            161175925,
            161173974,
            161173339,
            161174147,
            161181560,
            161181382,
            161172925,
            161174110
        ],
        "A": [
            161167944,
            161176736,
            161168168,
            161168440,
            161176515,
            161168925,
            161168213,
            161168654,
            161187609,
            161168766,
            161168663,
            161168483,
            161168047,
            161169513,
            161168007,
            161168296,
            161173279,
            161168814,
            161167994
        ]
    },
    "name": "C. Helping the Nature",
    "statement": "Little Leon lives in the forest. He has recently noticed that some trees\r\nnear his favourite path are withering, while the other ones are\r\noverhydrated so he decided to learn how to control the level of the soil\r\nmoisture to save the trees.There are n trees growing near the path, the\r\ncurrent levels of moisture of each tree are denoted by the array a_1,\r\na_2,\r\ndots, a_n. Leon has learned three abilities which will help him to dry\r\nand water the soil. Choose a position i and decrease the level of\r\nmoisture of the trees 1, 2,\r\ndots, i by 1. Choose a position i and decrease the level of moisture of\r\nthe trees i, i + 1,\r\ndots, n by 1. Increase the level of moisture of all trees by 1. Leon\r\nwants to know the minimum number of actions he needs to perform to make\r\nthe moisture of each tree equal to 0.\r\n",
    "solutions": [
        "/*\n\n_/      _/       _/_/_/      _/      _/    _/           _/_/_/_/_/\n _/    _/      _/      _/     _/    _/     _/           _/\n  _/  _/      _/               _/  _/      _/           _/\n   _/_/       _/                 _/        _/           _/_/_/_/\n  _/  _/      _/                 _/        _/           _/\n _/    _/      _/      _/        _/        _/           _/\n_/      _/       _/_/_/          _/        _/_/_/_/_/   _/_/_/_/_/\n\n*/\n#include <bits/stdc++.h>\n#define ll long long\n#define lc(x) ((x) << 1)\n#define rc(x) ((x) << 1 | 1)\n#define ru(i, l, r) for (int i = (l); i <= (r); i++)\n#define rd(i, r, l) for (int i = (r); i >= (l); i--)\n#define mid ((l + r) >> 1)\nusing namespace std;\ninline int read()\n{\n\tint x = 0, w = 0; char ch = getchar();\n\twhile(!isdigit(ch)) {w |= ch == '-'; ch = getchar();}\n\twhile(isdigit(ch)) {x = x * 10 + ch - '0'; ch = getchar();}\n\treturn w ? -x : x;\n}\nint a[200005];\nvoid solve()\n{\n\tint n = read();\n\tll ans = 0, sum = 0;\n\tru(i, 1, n) \n\t{\n\t\ta[i] = read();\n\t\tif(i > 1) ans += abs(a[i] - a[i - 1]);\n\t\tif(i > 1 && a[i] < a[i - 1]) sum += a[i] - a[i - 1];\n\t}\n\tans += abs(sum + a[1]); \n\tprintf(\"%lld\\n\", ans);\n}\nint main()\n{\n\tint T = read(); while(T--) solve(); \n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Helping the Nature.json",
    "editorial_link": "https://codeforces.com//blog/entry/103978",
    "editorial": "Consider the difference array . Note that for it is necessary to make\r\nsubtractions on the suffix. For , you need to make subtractions on the\r\nprefix. Letâs add them to the answer. Letâs calculate the final array\r\nusing prefix and suffix sums for . Note that it will consist of the same\r\nnumbers. Add to the answer, where is the resulting number.\r\n",
    "hint": []
}