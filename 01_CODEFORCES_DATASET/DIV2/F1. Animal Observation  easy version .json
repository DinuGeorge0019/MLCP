{
    "link": "https://codeforces.com//contest/1304/problem/F1",
    "problemId": "540882",
    "problem_idx": "F1",
    "shortId": "1304F1",
    "contest_number": "1304",
    "problem_submissions": {
        "F2": [
            71153662,
            71152758,
            71152225,
            71157272,
            71159942,
            71160337,
            71152268,
            71164565,
            71154293,
            71154692,
            71162717,
            71159530,
            71162560,
            71166676,
            71162579,
            71158531,
            71165317,
            71164377,
            71163973
        ],
        "F1": [
            71153447,
            71152867,
            71152180,
            71151661,
            71153091,
            71154085,
            71149583,
            71154537,
            71154276,
            71154806,
            71156318,
            71151191,
            71154828,
            71149041,
            71160757,
            71162740,
            71158430,
            71158819,
            71164218,
            71159683
        ],
        "A": [
            71141804,
            71123780,
            71124247,
            71124384,
            71123709,
            71123734,
            71133014,
            71123605,
            71123682,
            71125835,
            71124122,
            71125469,
            71123778,
            71125797,
            71123883,
            71124957,
            71124272,
            71124584,
            71125887
        ],
        "B": [
            71141077,
            71127745,
            71130904,
            71129813,
            71129002,
            71129323,
            71131933,
            71128951,
            71128799,
            71129490,
            71131971,
            71130601,
            71128231,
            71131633,
            71131054,
            71131655,
            71131218,
            71131770,
            71130665
        ],
        "C": [
            71139292,
            71131382,
            71132670,
            71132117,
            71132267,
            71132849,
            71127878,
            71132933,
            71133726,
            71136633,
            71134870,
            71133707,
            71131661,
            71135936,
            71133295,
            71134276,
            71135200,
            71134880,
            71134692
        ],
        "D": [
            71135174,
            71139070,
            71140467,
            71140425,
            71138874,
            71140258,
            71140794,
            71137521,
            71136980,
            71141949,
            71140004,
            71141241,
            71141696,
            71140892,
            71143691,
            71147524,
            71140481,
            71142776,
            71142040
        ],
        "E": [
            71129417,
            71143322,
            71144172,
            71144650,
            71144907,
            71145653,
            71155565,
            71142523,
            71145871,
            71145649,
            71146288,
            71152807,
            71148538,
            71135583,
            71146697,
            71149801,
            71151693,
            71149896,
            71147231,
            71153923
        ]
    },
    "name": "F1. Animal Observation  easy version ",
    "statement": "k.Gildong loves observing animals, so he bought two cameras to take\r\nvideos of wild animals in a forest. The color of one camera is red, and\r\nthe other one\u2019s color is blue.Gildong is going to take videos for n\r\ndays, starting from day 1 to day n. The forest can be divided into m\r\nareas, numbered from 1 to m. He\u2019ll use the cameras in the following way:\r\nOn every odd day (1-st, 3-rd, 5-th, ...), bring the red camera to the\r\nforest and record a video for 2 days. On every even day (2-nd, 4-th,\r\n6-th, ...), bring the blue camera to the forest and record a video for 2\r\ndays. If he starts recording on the n-th day with one of the cameras,\r\nthe camera records for only one day. Each camera can observe k\r\nconsecutive areas of the forest. For example, if m=5 and k=3, he can put\r\na camera to observe one of these three ranges of areas for two days:\r\n[1,3], [2,4], and [3,5].Gildong got information about how many animals\r\nwill be seen in each area each day. Since he would like to observe as\r\nmany animals as possible, he wants you to find the best way to place the\r\ntwo cameras for n days.\r\n",
    "solutions": [
        "#include<stdio.h>\n#include<iostream>\n#include<cstring>\n#include<algorithm>\n#include<cctype>\n#include<cmath>\n#include<iomanip>\n#include<vector>\n#include<queue>\nusing namespace std;\n\nint N , M , K , dp[53][20003] , sum[503][20003];\n\nint main(){\n\tcin>>N>>M>>K;\n\tfor(int i = 1 ; i <= N ; ++i)\n\t\tfor(int j = 1; j <= M ; ++j){\n\t\t\tcin>>sum[i][j]; sum[i][j] += sum[i][j -1 ];\n\t\t}\n\tmemset(dp , -0x1f , sizeof(dp));\n\tfor(int i = 1 ; i <= M - K + 1 ; ++i) dp[1][i] = sum[1][i + K - 1] - sum[1][i - 1] + sum[2][i + K - 1] - sum[2][i - 1];\n\tfor(int i = 2 ; i <= N ; ++i){\n\t\tdeque < int > q;\n\t\tfor(int j = 1 ; j <= K && j <= M - K + 1 ; ++j){\n\t\t\twhile(!q.empty() && dp[i - 1][q.back()] + sum[i][q.back() - 1] < dp[i - 1][j] + sum[i][j - 1]) q.pop_back();\n\t\t\tq.push_back(j);\n\t\t}\n\t\tfor(int j = 1 ; j <= M - K + 1 ; ++j){\n\t\t\tdp[i][j] = max(dp[i][j] , dp[i - 1][q.front()] + sum[i][q.front() - 1] - sum[i][j - 1]);\n\t\t\tif(q.front() == j) q.pop_front();\n\t\t\tif(j + K <= M - K + 1){\n\t\t\t\tint t = j + K;\n\t\t\t\twhile(!q.empty() && dp[i - 1][q.back()] + sum[i][q.back() - 1] < dp[i - 1][t] + sum[i][t - 1]) q.pop_back();\n\t\t\t\tq.push_back(t);\n\t\t\t}\n\t\t}\n\t\tq.clear();\n\t\tfor(int j = 1 ; j <= M - K + 1 && j <= K ; ++j){\n\t\t\tint t = M - K + 2 - j;\n\t\t\twhile(!q.empty() && dp[i - 1][q.back()] - sum[i][q.back() + K - 1] < dp[i - 1][t] - sum[i][t + K - 1])\n\t\t\t\tq.pop_back();\n\t\t\tq.push_back(t);\n\t\t}\n\t\tfor(int j = M - K + 1 ; j ; --j){\n\t\t\tdp[i][j] = max(dp[i][j] , dp[i - 1][q.front()] - sum[i][q.front() + K - 1] + sum[i][j + K - 1]);\n\t\t\tif(q.front() == j) q.pop_front();\n\t\t\tif(j - K > 0){\n\t\t\t\tint t = j - K;\n\t\t\t\twhile(!q.empty() && dp[i - 1][q.back()] - sum[i][q.back() + K - 1] < dp[i - 1][t] - sum[i][t + K - 1])\n\t\t\t\t\tq.pop_back();\n\t\t\t\tq.push_back(t);\n\t\t\t}\n\t\t}\n\t\tint mx = 0;\n\t\tfor(int j = 1 ; j <= M - K + 1; ++j){\n\t\t\tmx = max(mx , dp[i - 1][j]);\n\t\t\tif(j + K <= M - K + 1) dp[i][j + K] = max(dp[i][j + K] , mx + sum[i][j + K + K - 1] - sum[i][j + K - 1]);\n\t\t}\n\t\tmx = 0;\n\t\tfor(int j = M - K + 1 ; j ; --j){\n\t\t\tmx = max(mx , dp[i - 1][j]);\n\t\t\tif(j - K > 0) dp[i][j - K] = max(dp[i][j - K] , mx + sum[i][j - 1] - sum[i][j - K - 1]);\n\t\t}\n\t\tfor(int j = 1 ; j <= M - K + 1 ; ++j)\n\t\t\tdp[i][j] += sum[i + 1][j + K - 1] - sum[i + 1][j - 1];\n\t}\n\tint mx = 0;\n\tfor(int i = 1 ; i <= M - K + 1 ; ++i) mx = max(mx , dp[N][i]);\n\tcout << mx;\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "dp"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F1. Animal Observation  easy version .json",
    "editorial_link": "https://codeforces.com//blog/entry/73934",
    "editorial": "For simplicity, we\u00e2\u0080\u0099ll assume that there is the -st day when no animals\r\nappear at all. Let\u00e2\u0080\u0099s say is the number of animals appearing in the -th\r\narea on the -th day.Let\u00e2\u0080\u0099s define () as the maximum number of animals\r\nthat can be observed in total since day , if Gildong puts a camera on\r\nthe -th day to observe area in day and . Obviously, is the sum of the\r\nnumber of animals in area in day and day . Now, for each day since day ,\r\nlet\u00e2\u0080\u0099s find three values to determine , which is the maximum among them.\r\nFor all (), maximum of plus . For all (), maximum of plus . For all (),\r\nmaximum of plus minus the sum of animals in the intersected area on the\r\n-th day. The summation parts can be calculated in time by prefix sum\r\ntechnique after pre-processing. For the ones that have no intersection,\r\nwe can pre-calculate the prefix max and suffix max for the values in in\r\ntime for each day, therefore finding it in as well.Since is small in\r\nthis problem, we can naively check all cases when there are one or more\r\nintersected areas. For each area we need to check cases each in time, so\r\nthe problem can be solved in time in total.\r\n"
}