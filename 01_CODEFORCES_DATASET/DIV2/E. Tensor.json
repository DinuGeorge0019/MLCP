{
    "link": "https://codeforces.com//contest/1977/problem/E",
    "problemId": "2665945",
    "problem_idx": "E",
    "shortId": "1977E",
    "contest_number": "1977",
    "problem_submissions": {
        "E": [
            262753822,
            262767302,
            262773066,
            262777674,
            262770623,
            263031771,
            262879241,
            264157721,
            262777678,
            262818461
        ],
        "D": [
            262746020,
            262752021,
            262759316,
            262764901,
            262755194,
            262759469,
            262754791,
            262756257,
            262756747,
            262758299,
            262756876,
            262759489,
            262764620,
            263176565,
            262763419,
            262766760,
            262758943,
            262862798,
            262762983
        ],
        "C": [
            262738877,
            262741499,
            262749383,
            262755959,
            262751324,
            262744765,
            262746576,
            262745225,
            262746869,
            262742949,
            262746742,
            262750727,
            262747283,
            262749635,
            262746257,
            262754822,
            262746319,
            262748048
        ],
        "B": [
            262726958,
            262730863,
            262733935,
            262745603,
            262761343,
            262730294,
            262743622,
            262733897,
            262738963,
            262733871,
            262744047,
            262734098,
            262734002,
            262729823,
            262734056,
            262744847,
            262730762,
            262734650
        ],
        "A": [
            262718457,
            262717434,
            262719669,
            262733443,
            262738974,
            262717708,
            262717306,
            262718538,
            262718880,
            262733522,
            262717623,
            262718056,
            262717973,
            262720675,
            262720426,
            262717331,
            262720010,
            262725818
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/129858",
    "editorial": "First, let's understand why 2 colors are indeed sufficient.\n\nNotice that the reachability relation in a graph defines a Partially Ordered Set.\n\nAccording to Dilworth's Theorem, the size of the maximum antichain is equal to the minimum number of chains that cover the Partially Ordered Set.\n\nNote that the condition on the reachability of pairs of vertices within any triplet implies a constraint on the maximum size of the antichain. It is simply no more than 2. Therefore, 2 colors are indeed sufficient.\n\nThe remaining task is to understand how to explicitly construct these 2 chains.\n\nWe will build this inductively. Let's maintain 3 stacks \u0097 the last vertices painted in black, white, and red respectively. These will correspond to the chains we are building.\n\nSuppose we have built chains on n\n vertices and want to build them on n+1\n:\n\nIf the white or black stacks are empty, simply add vertex n+1\n to the empty stack.\n\nIf the red stack is empty:\n\nAsk about the reachability of the last vertices in the white and black stacks from vertex n+1\n.\nIf both vertices are reachable, put vertex n+1\n in the red stack.\nIf only one vertex is reachable, put vertex n+1\n in the stack whose last vertex is reachable from n+1\n.\nThe case where neither vertex is reachable is impossible as it contradicts the condition.\nIf the red stack is not empty:\n\nAsk about the reachability of the last vertex in the red stack from vertex n+1\n.\nIf it is reachable, put it in the red stack.\nIf it is not reachable, ask about the end of the white stack.\nIf the vertex at the end of the white stack is not reachable, then the vertex at the end of the black stack must be reachable, otherwise, it contradicts the problem's condition.\nColor vertex n+1\n black if the black vertex is reachable or white if the white vertex is reachable.\nRecolor all vertices in the red stack to the opposite color relative to vertex n+1\n. We can do this because, by construction, all vertices in the white and black stacks are reachable from all vertices in the red stack.\nDo not forget to clear the red stack.\nEach time a new vertex is added, no more than 2 queries are used. Therefore, we will use no more than 2?n\n queries in total.\n\nDuring the algorithm, all operations are performed in O(1)\n time, resulting in an overall complexity of O(n)\n.\n\nAs an exercise for the reader, try to prove the lower bound on the number of queries.",
    "name": "E. Tensor",
    "statement": "You are given an integer n.The jury has hidden from you a directed graph\r\nwith n vertices (numbered from 1 to n) and some number of edges. You\r\nadditionally know that: The graph only contains edges of the form i\r\nleftarrow j, where 1\r\nle i < j\r\nle n. For any three vertices 1\r\nle i < j < k\r\nle n, at least one of the following holds^\r\ndagger: Vertex i is reachable from vertex j, or Vertex i is reachable\r\nfrom vertex k, or Vertex j is reachable from vertex k. You want to color\r\neach vertex in either black or white such that for any two vertices i\r\nand j (1\r\nle i < j\r\nle n) of the same color, vertex i is reachable from vertex j.To do that,\r\nyou can ask queries of the following type: is vertex i reachable from\r\nvertex j (1\r\nle i < j\r\nle n)? Find any valid vertex coloring of the hidden graph in at most 2\r\ncdot n queries. It can be proven that such a coloring always exists.Note\r\nthat the grader is adaptive: the graph is fixed before any queries are\r\nmade.^\r\ndagger Vertex a is reachable from vertex b if there exists a path from\r\nvertex b to vertex a in the graph.\r\n",
    "solutions": [
        "// Problem: E. Tensor// Contest: Codeforces - Codeforces Round 948 (Div. 2)// URL: https://mirror.codeforces.com/contest/1977/problem/E// Memory Limit: 256 MB// Time Limit: 3000 ms// // Powered by CP Editor (https://cpeditor.org)\u00a0// Author: EnucAI#include <bits/stdc++.h>\u00a0#ifdef LOCAL#include \"debug.h\"#else#define D(...) ((void)0)#endif\u00a0using ll = long long;using ull = unsigned long long;using ld = long double;using vi = std::vector<int>;using pii = std::pair<int, int>;\u00a0constexpr int inf = std::numeric_limits<int>::max() / 2;constexpr ll infll = std::numeric_limits<ll>::max() / 2;constexpr ld eps = 1e-8l;\u00a0#define all(x) (x).begin(), (x).end()#define sz(x) ((int)((x).size()))#define rep(i, j, k) for (int i = (j); i <= (k); i++)#define per(i, j, k) for (int i = (j); i >= (k); i--)#define fi first#define se second#define mp std::make_pair#define pb push_back#define ppb pop_back#define eb emplace_back\u00a0template <class X, class Y> void chkmax(X &x, const Y &y) { if (x < y) x = y; }template <class X, class Y> void chkmin(X &x, const Y &y) { if (x > y) x = y; }\u00a0constexpr int maxn = 100 + 5;\u00a0int n, c[maxn];vi a0, a1;\u00a0bool query(int u, int v) {  std::cout << \"? \" << u << ' ' << v << std::endl;  std::string str;  std::cin >> str;  return str == \"YES\";}\u00a0void work() {  std::cin >> n;  a0.clear(), a1.clear();  rep(i, 1, n) {    if (a1.empty() || query(a1.back(), i)) {      a1.pb(i);    } else if (a0.empty() || query(a0.back(), i)) {      a0.pb(i);    } else {      while (true) {        a0.pb(a1.back());        a1.ppb();        if (a1.empty() || query(a1.back(), i)) {          a1.pb(i);          break;        }      }    }  }  for (int i : a0) c[i] = 0;  for (int i : a1) c[i] = 1;  std::cout << '!';  rep(i, 1, n) std::cout << ' ' << c[i];  std::cout << std::endl;}\u00a0int main() {  // std::cin.tie(nullptr)->sync_with_stdio(false);  int t;  std::cin >> t;  while (t--) work();}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "graphs",
        "interactive"
    ],
    "dificulty": "2600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Tensor.json"
}