{
    "link": "https://codeforces.com//contest/1904/problem/B",
    "problemId": "2374321",
    "problem_idx": "B",
    "shortId": "1904B",
    "contest_number": "1904",
    "problem_submissions": {
        "F": [
            236570080,
            236576621,
            236554431,
            236568040,
            236582005,
            236574981,
            236880626,
            236880480,
            236569573
        ],
        "E": [
            236554914,
            236578860,
            236576444,
            236573774,
            238458664,
            236560297,
            236558822,
            236558918,
            236569149,
            236563127,
            236567711,
            236569198,
            236566626,
            236565306,
            236568569,
            236566882,
            236569261,
            236579274,
            236552305,
            236552808,
            236798985
        ],
        "D1": [
            236545065,
            236536170,
            236543035,
            236535328,
            236546645,
            236545333,
            236534429,
            236543154,
            236535118,
            236545269,
            236548952,
            236561907,
            236552142,
            236547668,
            236547285,
            236579190,
            236560952,
            236535340,
            236566707
        ],
        "D2": [
            236544975,
            236536268,
            236547976,
            236535232,
            236546707,
            236545240,
            236539045,
            236543101,
            236535019,
            236550494,
            236549022,
            236539644,
            236552226,
            236551334,
            236547141,
            236579204,
            236562744,
            236535269,
            236566631
        ],
        "C": [
            236537578,
            236532163,
            236538305,
            236529701,
            236530813,
            236537981,
            236531278,
            236536485,
            236540998,
            236534952,
            236537201,
            236530975,
            236533757,
            236539773,
            236559221,
            236579140,
            236529162,
            236713604,
            236530644
        ],
        "B": [
            236533750,
            236526956,
            236527715,
            236527401,
            236528167,
            236531303,
            236527554,
            236530718,
            236528605,
            236528181,
            236531779,
            236528715,
            236530882,
            236530328,
            236531954,
            236579315,
            236527688,
            236526407,
            236558484,
            236528501
        ],
        "A": [
            236526415,
            236525678,
            236525809,
            236525816,
            236525646,
            236527341,
            236525550,
            236527627,
            236527718,
            236525848,
            236525742,
            236526468,
            236525731,
            236528067,
            236527808,
            236579299,
            236525701,
            236525590,
            236554437,
            236526433
        ]
    },
    "name": "B. Collecting Game",
    "statement": "You are given an array a of n positive integers and a score. If your\r\nscore is greater than or equal to a_i, then you can increase your score\r\nby a_i and remove a_i from the array. For each index i, output the\r\nmaximum number of additional array elements that you can remove if you\r\nremove a_i and then set your score to a_i. Note that the removal of a_i\r\nshould not be counted in the answer.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\nconst int N = 1e5 + 5;\nint T, n, m, a[N], id[N];\nll sum[N], mnv[N], ans[N];\nint pos[N];\n\ninline bool cmp(int i, int j) {\n\treturn a[i] < a[j];\n}\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tcin >> T;\n\twhile (T--) {\n\t\tcin >> n;\n\t\tfor (int i = 1; i <= n; ++i) cin >> a[i], id[i] = i;\n\t\tsort(id + 1, id + n + 1, cmp);\n\t\tfor (int i = 1; i <= n; ++i) sum[i] = sum[i - 1] + a[id[i]];\n\t\tmnv[0] = 1e18;\n\t\tfor (int i = 1; i <= n; ++i)\n\t\t\tmnv[i] = min(mnv[i - 1], sum[i - 1] - a[id[i]]);\n\t\tm = 0;\n\t\tfor (int i = 1; i <= n; ++i)\n\t\t\tif (sum[i - 1] < a[id[i]])\n\t\t\t\tpos[++m] = i;\n\t\tpos[m + 1] = n + 1;\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tif (mnv[i - 1] >= -a[id[i]]) {\n\t\t\t\tans[id[i]] = *upper_bound(pos + 1, pos + m + 1, i) - 2;\n\t\t\t} else {\n\t\t\t\tans[id[i]] = upper_bound(mnv + 1, mnv + i, a[id[i]], greater<int>()) - mnv - 1;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= n; ++i) cout << ans[i] << ' ';\n\t\tcout << '\\n';\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp",
        "greedy",
        "sortings",
        "two pointers"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Collecting Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/123160",
    "editorial": "SolutionLetâs sort array . The answer for the largest element is because\r\nthe score, which is , cannot be smaller than any of the other elements.\r\nNow, consider the second largest element. The answer is at least because\r\nevery element that is not greater than can be taken. Then, we check if\r\nthe score is at least . This inspires the following solution: first, we\r\nfind the prefix sum of array . We calculate the answer in decreasing\r\norder of . To calculate the answer for an , we find the largest such\r\nthat and set the answer for equal to the answer of .\r\n",
    "hint": []
}