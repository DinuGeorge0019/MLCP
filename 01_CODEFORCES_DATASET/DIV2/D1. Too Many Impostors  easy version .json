{
    "link": "https://codeforces.com//contest/1617/problem/D1",
    "problemId": "1229933",
    "problem_idx": "D1",
    "shortId": "1617D1",
    "contest_number": "1617",
    "problem_submissions": {
        "D2": [
            139528258,
            139511137,
            139522542,
            139519708,
            139520670,
            139523783,
            139518761,
            139530052,
            139554537,
            139536292,
            139522659,
            139517981,
            139512155,
            139519772,
            139538893,
            139543913,
            139531998
        ],
        "E": [
            139517842,
            139538424,
            139497648,
            139535975,
            139534847,
            139545980,
            139543568,
            139544780,
            139542416,
            139541142,
            139546720,
            139613086,
            139612916
        ],
        "D1": [
            139501429,
            139511244,
            139522629,
            139519806,
            139515622,
            139513160,
            139518872,
            139525357,
            139508478,
            139513182,
            139525031,
            139501096,
            139517883,
            139503934,
            139519698,
            139505351,
            139502672,
            139513862
        ],
        "C": [
            139489946,
            139490132,
            139526014,
            139489601,
            139500619,
            139496413,
            139508980,
            139499423,
            139495044,
            139500428,
            139504938,
            139495573,
            139492326,
            139510250,
            139491535,
            139494498,
            139495193,
            139495421
        ],
        "B": [
            139486471,
            139485548,
            139527692,
            139491898,
            139493048,
            139490679,
            139500877,
            139490165,
            139489596,
            139492975,
            139498385,
            139485704,
            139488427,
            139502448,
            139486742,
            139489499,
            139488312,
            139490271
        ],
        "A": [
            139485264,
            139485036,
            139530317,
            139495566,
            139490417,
            139485662,
            139494269,
            139485815,
            139485225,
            139486039,
            139485608,
            139487143,
            139485767,
            139485406,
            139485431,
            139485561,
            139486024,
            139485975
        ]
    },
    "name": "D1. Too Many Impostors  easy version ",
    "statement": "There are n players labelled from 1 to n. Among them, there are k\r\nimpostors and n-k crewmates. The number of impostors, k, is not given to\r\nyou. In each question, you can choose three distinct integers a, b, c (1\r\nle a, b, c\r\nle n) and ask: \"Among the players labelled a, b and c, are there more\r\nimpostors or more crewmates?\" You will be given the integer 0 if there\r\nare more impostors than crewmates, and 1 otherwise.Find the number of\r\nimpostors k and the indices of players that are impostors after asking\r\nat most 2n questions.The jury is , which means the indices of impostors\r\nmay not be fixed beforehand and can depend on your questions. It is\r\nguaranteed that there is at least one set of impostors which fulfills\r\nthe constraints and the answers to your questions at any time.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nusing LL = long long;\nint query(int a, int b, int c) {\n\tcout << \"? \" << a << \" \" << b << \" \" << c << endl;\n\tint res;\n\tcin >> res;\n\treturn res;\n}\nvoid answer(vector<int>& v) {\n\tcout << \"! \" << v.size();\n\tfor (int x : v) cout << \" \" << x;\n\tcout << endl;\n}\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(nullptr);\n\tint t;\n\tfor (cin >> t; t; t -= 1) {\n\t\tint n;\n\t\tcin >> n;\n\t\tvector<int> v(n + 1);\n\t\tfor (int i = 1; i + 2 <= n; i += 1)\n\t\t\tv[i] = query(i, i + 1, i + 2);\n\t\tint a = -1, b = -1;\n\t\tfor (int i = 2; i + 2 <= n; i += 1)\n\t\t\tif (v[i] != v[i - 1]) {\n\t\t\t\ta = i - 1;\n\t\t\t\tb = i + 2;\n\t\t\t}\n\t\tassert(a != -1);\n\t\tvector<int> im, cr;\n\t\tfor (int i = 1; i <= n; i += 1) if (i != a and i != b) {\n\t\t\tif (query(a, b, i)) cr.push_back(i);\n\t\t\telse im.push_back(i);\n\t\t}\n\t\tif (query(im[0], cr[0], a)) im.push_back(b);\n\t\telse im.push_back(a);\n\t\tanswer(im);\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "implementation",
        "interactive"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D1. Too Many Impostors  easy version .json",
    "editorial_link": "https://codeforces.com//blog/entry/97920",
    "editorial": "Key observation: if result of query () result of query (), since\nand are common, players and have different roles. Additionally, if\nresult of query () = then player is a crewmate (and player is an\nimpostor), vice versa.The first step is to query players (), (), , (),\n().If the results of any two adjacent queries (or queries () and ()) are\ndifferent, we instantly know the roles of the two players that are only\nincluded in one query one is a crewmate, one is an impostor. Since the\nnumber of impostors and crewmates satisfy and , there must be one pair\nof adjacent queries that are different.After we know one crewmate and\none impostor (letâs call them , ), we can query these two players with\neach one of the rest of the players. If a query () (, and ) returns ,\nplayer is an impostor, else player is a crewmate.In total, queries are\nused.\n",
    "hint": [
        "Hint 1 The weird constraint, , is crucial.",
        "Hint 2 If you know the index of one crewmate and one impostor, how to find the roles of other players in exactly queries?",
        "Hint 3 Query players ( ), ( ), , ( ), ( ). After that, you can surely find out the index of one crewmate and one impostor. Try to find out how."
    ]
}