{"link": "https://codeforces.com//contest/1453/problem/C", "problemId": "821024", "problem_idx": "C", "shortId": "1453C", "contest_number": "1453", "problem_submissions": {"E": [100380052, 155118161, 100374406, 100382833, 100376358, 100380373, 100377845, 100376439, 100372651, 100372508, 100374319, 100375311, 100361396, 100374016, 100375798, 100374877, 100376885, 100376092, 100374918, 100369776], "D": [100375780, 155118139, 100367299, 100371256, 100369898, 100372322, 100371648, 100366312, 100368463, 100366176, 100366391, 100373742, 100368086, 100364639, 100371848, 100367162, 100368628, 100369799, 100372351], "C": [100370717, 155118105, 100363680, 100365192, 100365975, 100366748, 100365481, 100362777, 100362628, 100362653, 100362794, 100366264, 100365011, 100362269, 100364059, 100363843, 100363639, 100365174, 100365522, 100366070], "F": [100365572, 155118244, 100384810, 100377057, 100384158, 100383537, 100385977, 100390112, 100382350, 100381472, 100408619, 100428520], "B": [100359448, 155118064, 100359921, 100359636, 100358954, 100362716, 100359915, 100357443, 100358086, 100356217, 100356739, 100370528, 100358105, 100356427, 100359186, 100359063, 100373277, 100358271, 100360209, 100363310], "A": [100352068, 155118022, 100354202, 100352085, 100350847, 100354848, 100351796, 100357299, 100351053, 100350650, 100351488, 100367409, 100350533, 100350757, 100350887, 100350551, 100351187, 100351697, 100352074, 100358933]}, "name": "C. Triangles", "statement": "Gildong has a square board consisting of n rows and n columns of square\r\ncells, each consisting of a single digit (from 0 to 9). The cell at the\r\nj-th column of the i-th row can be represented as (i, j), and the length\r\nof the side of each cell is 1. Gildong likes big things, so for each\r\ndigit d, he wants to find a triangle such that: Each vertex of the\r\ntriangle is in the center of a cell. The digit of every vertex of the\r\ntriangle is d. At least one side of the triangle is parallel to one of\r\nthe sides of the board. You may assume that a side of length 0 is\r\nparallel to both sides of the board. The area of the triangle is\r\nmaximized. Of course, he can\u2019t just be happy with finding these\r\ntriangles as is. Therefore, for each digit d, he\u2019s going to change the\r\ndigit of exactly one cell of the board to d, then find such a triangle.\r\nHe changes it back to its original digit after he is done with each\r\ndigit. Find the maximum area of the triangle he can make for each\r\ndigit.Note that he can put multiple vertices of the triangle on the same\r\ncell, and the triangle can be a degenerate triangle; i.e. the area of\r\nthe triangle can be 0. Also, note that he is allowed to change the digit\r\nof a cell from d to d.\r\n", "solutions": ["#include <bits/stdc++.h>\n#define F(i,j,k) for(int i=(j);i<=(k);++i)\n#define D(i,j,k) for(int i=(j);i>=(k);--i)\n#define rep(it,s) for(__typeof(s.begin()) it=s.begin();it!=s.end();++it)\n#define Rep(a,s) for(auto a:s)\n#define PB push_back\n#define MP make_pair\n#define FF first\n#define SS second\ntypedef long long ll;\ntypedef unsigned long long ull;\nusing namespace std;\ntemplate<class Type>ll quick_pow(Type x,Type y,Type Mod){\n    ll res=1;\n    while(y){\n        if(y&1)res=res*x%Mod;\n        x=x*x%Mod,y>>=1;\n    }\n    return res;\n}\ntemplate<class Type>ll inv(Type x,Type Mod){return quick_pow(x,Mod-2,Mod);}\nnamespace IO{\n    template <class T>\n    inline void read(T &x){\n        x=0;int f=1;char ch=getchar();\n        while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n        while(ch<='9'&&ch>='0')x=x*10+ch-'0',ch=getchar();\n        x*=f;\n    }\n};\nusing namespace IO;\nint _,n;\nconst int N=2005;\nchar ch[N][N];\nint a[N][N];\nint beginR[N][10],endR[N][10];\nint beginC[N][10],endC[N][10];\nint minR[10],maxR[10];\nint minC[10],maxC[10];\nint ans[10];\nint main(){\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\",\"r\",stdin);\n        freopen(\"out.txt\",\"w\",stdout);\n    #endif\n    scanf(\"%d\\n\",&_);\n    while(_--){\n    \tscanf(\"%d\\n\",&n);\n    \tF(i,1,n)scanf(\"%s\\n\",ch[i]+1);\n    \tF(i,1,n){\n    \t\tF(j,0,9){\n    \t\t\tbeginR[i][j]=beginC[i][j]=2001;\n    \t\t\tendR[i][j]=endC[i][j]=-1;\n    \t\t\tminR[j]=minC[j]=2001;\n    \t\t\tmaxR[j]=maxC[j]=-1;\n\t\t\t}\n\t\t}\n    \tF(i,1,n)F(j,1,n){\n    \t\ta[i][j]=ch[i][j]-'0';\n    \t\tbeginR[i][a[i][j]]=min(beginR[i][a[i][j]],j);\n    \t\t  endR[i][a[i][j]]=max(  endR[i][a[i][j]],j);\n    \t\tbeginC[j][a[i][j]]=min(beginC[j][a[i][j]],i);\n    \t\t  endC[j][a[i][j]]=max(  endC[j][a[i][j]],i);\n    \t\t  minR[a[i][j]]=min(minR[a[i][j]],i);\n    \t\t  maxR[a[i][j]]=max(maxR[a[i][j]],i);\n    \t\t  minC[a[i][j]]=min(minC[a[i][j]],j);\n    \t\t  maxC[a[i][j]]=max(maxC[a[i][j]],j);\n\t\t}\n\t\tF(k,0,9)ans[k]=0; \n\t\tF(k,0,9){\n\t\t\tF(i,1,n){\n\t\t\t\tans[k]=max(ans[k],(endR[i][k]-beginR[i][k])*max(i-1,n-i));\n\t\t\t\tans[k]=max(ans[k],(endR[i][k]-1)*max(max(i-minR[k],0),max(maxR[k]-i,0)));\n\t\t\t\tans[k]=max(ans[k],(n-beginR[i][k])*max(max(i-minR[k],0),max(maxR[k]-i,0)));\n\t\t\t\t//cout<<k<<' '<<i<<' '<<ans[k]<<endl;\n\t\t\t}\n\t\t\tF(i,1,n){\n\t\t\t\tans[k]=max(ans[k],(endC[i][k]-beginC[i][k])*max(i-1,n-i));\n\t\t\t\tans[k]=max(ans[k],(endC[i][k]-1)*max(max(i-minC[k],0),max(maxC[k]-i,0)));\n\t\t\t\tans[k]=max(ans[k],(n-beginC[i][k])*max(max(i-minC[k],0),max(maxC[k]-i,0)));\n\t\t\t\t//cout<<k<<' '<<i<<' '<<ans[k]<<endl;\n\t\t\t\t//cout<<endC[i][k]<<' '<<beginC[i][k]<<' '<<minC[k]<<' '<<maxC[k]<<endl;\n\t\t\t}\n\t\t}\n\t\tF(k,0,9)cout<<ans[k]<<' ';\n\t\tcout<<'\\n';\n\t}\n    return 0;\n}"], "input": "", "output": "", "tags": ["greedy", "implementation"], "dificulty": "1700", "interactive": false}