{
    "link": "https://codeforces.com//contest/1363/problem/C",
    "problemId": "636625",
    "problem_idx": "C",
    "shortId": "1363C",
    "contest_number": "1363",
    "problem_submissions": {
        "F": [
            82106115,
            82133417,
            82134663,
            82148859,
            82187672,
            82151422,
            82129291
        ],
        "B": [
            82089340,
            82061810,
            82102257,
            82051813,
            82052193,
            82054432,
            82059773,
            82050390,
            82052570,
            82057688,
            82062819,
            82061181,
            82063108,
            82056815,
            82052221,
            82048933,
            82053424,
            82060016
        ],
        "E": [
            82084929,
            82115560,
            82118841,
            82083744,
            82094219,
            82095201,
            82085310,
            82078785,
            82104191,
            82087813,
            82091268,
            82109972,
            82093877,
            82089726,
            82112505,
            82091430,
            82097365,
            82091233
        ],
        "D": [
            82073363,
            82098128,
            82116891,
            82105976,
            82086712,
            82108911,
            82113962,
            82100776,
            82093305,
            82115209,
            82090000,
            82113643,
            82117922,
            82095216,
            82114310,
            82120048,
            82118359
        ],
        "C": [
            82058814,
            82072569,
            82099263,
            82066157,
            82070197,
            82067166,
            82068534,
            82108126,
            82064962,
            82108652,
            82074021,
            82067732,
            82075440,
            82064472,
            82071898,
            82069396,
            82075513,
            82072756
        ],
        "A": [
            82051846,
            82136588,
            82081640,
            82048308,
            82048940,
            82048236,
            82052695,
            82047806,
            82048669,
            82057495,
            82055772,
            82048991,
            82055132,
            82048772,
            82048248,
            82057801,
            82048473,
            82052285
        ]
    },
    "name": "C. Game On Leaves",
    "statement": "Ayush and Ashish play a game on an unrooted tree consisting of n nodes\r\nnumbered 1 to n. Players make the following move in turns: Select any\r\nleaf node in the tree and remove it together with any edge which has\r\nthis node as one of its endpoints. A leaf node is a node with degree\r\nless than or equal to 1. A tree is a connected undirected graph without\r\ncycles.There is a special node numbered x. The player who removes this\r\nnode wins the game. Ayush moves first. Determine the winner of the game\r\nif each player plays optimally.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define pb push_back\n#define F first\n#define S second\n#define all(x) x.begin(), x.end()\n#define debug(x) cerr << #x << \" : \" << x << '\\n'\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef string str;\ntypedef pair<ll, ll> pll;\n\nconst ll Mod = 1000000007LL;\nconst int N = 1e3 + 10;\nconst ll Inf = 2242545357980376863LL;\nconst ll Log = 30;\n\nll deg[N];\n\nint main(){\n\tios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n\tll T;\n\tcin >> T;\n\tstr f = \"Ayush\", s = \"Ashish\";\n\n\tfor(int i = 0; i < T; i++){\n\t\tmemset(deg, 0, sizeof deg);\nll n, u, v, x;\n\t\tcin >> n >> x;\n\t\tfor(int j = 1; j <n ;j++){\n\t\t\tcin >> u >> v;\n\t\t\tdeg[u] ++;\n\t\t\tdeg[v] ++;\n\t\t}\n\t\tif(deg[x] <= 1) cout << f << '\\n';\n\t\telse {\n\t\t\tcout << (n & 1 ? s : f) << '\\n';\n\t\t}\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games",
        "trees"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Game On Leaves.json",
    "editorial_link": "https://codeforces.com//blog/entry/78202",
    "editorial": ": The main idea of this problem is to think backwards. Instead of\r\nthinking about how the game will proceed, we think about how the\r\npenultimate state of the game will look like, etc. Also, we take care of\r\nthe cases where the game will end immediately (i.e, when the special\r\nnode is a leaf node).: First, let us take care of the cases where the\r\ngame ends immediately. This only occurs when the special node is a leaf\r\nnode, so all we must do is check that . Please note that must be handled\r\nseperately here (just output ).Now, in the case where is not a leaf\r\nnode, the answer is as follows: wins if is odd, and wins if is even. I\r\nwill provide a short sketch of the proof below.With the hint from the\r\nkey idea, let us analyze this game backwards. (I will assume that for\r\nthe sake of a clear explanation). When is removed from the game, it\r\ncannot be the only node remaining (because then the previous player\r\ncould have also removed , and thus he did not play optimally). Assume\r\nthe structure of the game is something like the following WLOG at the\r\nlast step (The tree attached to could be any tree):Consider also that\r\nwon, and the last move was to remove . Now, what could have been the\r\nstate before this move? If had removed a node from the tree, then he did\r\nnot play optimally - since he could have removed ! Thus, he must have\r\nremoved something from , which looks like the following:Considering this\r\nstate, should not infact remove , and instead remove something from the\r\ntree! Hence, the state that we assumed the game should look like at the\r\nend is impossible - and indeed, the tree attached to should only consist\r\nof only one node (we already proved that cannot be the only node\r\nremaining). Thus, all we have to do is find whoâs turn it will be when\r\nthe structure of the tree is as follows:It is âs turn if is odd, and âs\r\nturn if is even. QED!:\r\n",
    "hint": []
}