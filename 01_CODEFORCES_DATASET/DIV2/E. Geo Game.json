{
    "link": "https://codeforces.com//contest/1903/problem/E",
    "problemId": "2355506",
    "problem_idx": "E",
    "shortId": "1903E",
    "contest_number": "1903",
    "problem_submissions": {
        "D2": [
            235128331,
            235435764,
            235183865,
            235116126,
            235121557,
            235122165,
            236143935,
            235115553,
            235129873,
            235119268
        ],
        "F": [
            235111543,
            235102179,
            235105725,
            235099949,
            235124718,
            235126382,
            235187626,
            235129442,
            235218441,
            235126934,
            235133564,
            235146171,
            235141771,
            235179210
        ],
        "E": [
            235106076,
            235104135,
            235115833,
            235114935,
            235102473,
            235112204,
            235107850,
            235103854,
            235111843,
            235109842,
            235115868,
            235124408,
            235114753,
            235126753,
            235108387,
            235107433,
            235107971,
            235105219,
            235108510,
            235108333
        ],
        "D1": [
            235093312,
            235109270,
            235095674,
            235117999,
            235091603,
            235099696,
            235100348,
            235094032,
            235098578,
            235098148,
            235119995,
            235115692,
            235105537,
            235119353,
            235094232,
            235095613,
            235096813,
            235097844,
            235096074,
            235099176
        ],
        "C": [
            235088892,
            235089084,
            235089891,
            235103743,
            235087836,
            235093791,
            235088528,
            235088785,
            235092085,
            235091882,
            235086000,
            235089517,
            235099201,
            235093455,
            235087482,
            235090537,
            235090823,
            235091561,
            235089639,
            235091936
        ],
        "B": [
            235086528,
            235084790,
            235086716,
            235102627,
            235086465,
            235090208,
            235086073,
            235088901,
            235087776,
            235087683,
            235089557,
            235084538,
            235096155,
            235090241,
            235085240,
            235087001,
            235086944,
            235087486,
            235086654,
            235088684
        ],
        "A": [
            235083574,
            235084421,
            235082280,
            235100671,
            235083954,
            235085469,
            235082350,
            235089029,
            235082379,
            235083014,
            235084518,
            235090802,
            235083842,
            235083352,
            235082144,
            235082627,
            235082396,
            235082150,
            235082134,
            235082717
        ]
    },
    "name": "E. Geo Game",
    "statement": "Theofanis and his sister are playing the following game. They have n\r\npoints in a 2D plane and a starting point (s_x,s_y). Each player\r\n(starting from the first player) chooses one of the n points that wasn\u2019t\r\nchosen before and adds to the sum (which is initially 0) the of the\r\nEuclidean distance from the previous point (which is either the starting\r\npoint or it was chosen by the other person) to the new point (that the\r\ncurrent player selected).The game ends after exactly n moves (after all\r\nthe points are chosen). The first player wins if the sum is even in the\r\nend. Otherwise, the second player wins.Theofanis is a very competitive\r\nperson and he hates losing. Thus, he wants to choose whether he should\r\nplay first or second. Can you show him, which player to choose, and how\r\nhe should play to beat his sister?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 20;\n\nint main() {\n    ios::sync_with_stdio(false), cin.tie(0);\n    int t;\n    cin >> t;\n    while (t--) {\n        int n;\n        cin >> n;\n        vector <set <int>> bucket(2);\n        int sx, sy; cin >> sx >> sy;\n        int bg = (sx ^ sy) & 1;\n        for (int i = 1, x, y; i <= n; ++i) {\n            cin >> x >> y;\n            bucket[(x ^ y) & 1].insert(i);\n        }\n        // first want bg as last\n        // second want bg ^ 1 as last\n        int choose = 0, tot = n;\n        auto computer = [&]() {\n            int x; cin >> x;\n            bucket[0].erase(x), bucket[1].erase(x), tot--;\n        };\n        auto user = [&]() {\n            int cur = choose;\n            if (bucket[choose].empty()) {\n                cur ^= 1;\n            }\n            int x = *bucket[cur].begin();\n            bucket[cur].erase(bucket[cur].begin()), tot--;\n            cout << x << endl;\n        };\n        if (bucket[bg].size() >= bucket[bg ^ 1].size()) {\n            cout << \"First\" << endl;\n            choose = bg ^ 1;\n        } else {\n            cout << \"Second\" << endl;\n            choose = bg;\n            computer();\n        }\n        while (tot) {\n            user();\n            if (!tot) {\n                break;\n            }\n            computer();\n        }\n    }\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "interactive",
        "math"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Geo Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/122820",
    "editorial": "If we went from point to then we will add to the sum which is equal to\r\nmod ( is bitwise xor).For each point, we find ( mod ) ( mod ).Let the\r\nnumber of ( mod ) ( mod ) , the number of ( mod ) ( mod ) and ( mod ) (\r\nmod ).Let\u00e2\u0080\u0099s say that we create a binary string starting with and has\r\nanother zeros and ones.If the number of is odd then the sum will be odd\r\notherwise the sum will be even.If you are the first player then you want\r\nto have an even number of .That holds iff the first element of is the\r\nsame as the last element of .Thus, the second player will want to put\r\nall occurrences of before the end (so that the last element is not equal\r\nto the first).He can do this iff (rounded down) (this means that ).If\r\nyou play as the first player and you choose occurrences of until there\r\naren\u00e2\u0080\u0099t anyand else () you play as the second player and you choose\r\noccurrences of until there aren\u00e2\u0080\u0099t any.\r\n"
}