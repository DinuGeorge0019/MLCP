{
    "link": "https://codeforces.com//contest/116/problem/E",
    "problemId": "608",
    "problem_idx": "E",
    "shortId": "116E",
    "contest_number": "116",
    "problem_submissions": {
        "E": [
            700161,
            701799,
            701421,
            702282,
            700977,
            704488,
            701119
        ],
        "D": [
            699566,
            698442,
            699880,
            700164,
            701655,
            698834,
            699735,
            698841,
            698890,
            9443336,
            709309,
            699987,
            699816,
            700455,
            699803,
            699649,
            699931,
            699910
        ],
        "C": [
            698001,
            696869,
            697453,
            698296,
            698175,
            697132,
            696265,
            697608,
            697369,
            9442997,
            698325,
            697976,
            696978,
            697819,
            697685,
            698132,
            697395,
            698281
        ],
        "B": [
            697389,
            699259,
            696737,
            697208,
            697213,
            696507,
            697595,
            696839,
            696682,
            9442209,
            697385,
            697177,
            698196,
            696508,
            698380,
            697274,
            696601,
            696966
        ],
        "A": [
            696282,
            695857,
            695773,
            696139,
            695925,
            695792,
            696656,
            695824,
            695837,
            9442134,
            696797,
            695862,
            696053,
            695796,
            695742,
            696321,
            695753,
            695835
        ]
    },
    "name": "E. Plumber",
    "statement": "Little John aspires to become a plumber! Today he has drawn a grid\r\nconsisting of rows and columns, consisting of square cells.In each cell\r\nhe will draw a pipe segment. He can only draw four types of segments\r\nnumbered from to , illustrated as follows: Each pipe segment has two\r\nends, illustrated by the arrows in the picture above. For example,\r\nsegment has ends at top and left side of it.Little John considers the\r\npiping system to be leaking if there is at least one pipe segment inside\r\nthe grid whose end is not connected to another pipeâ€™s end or to the\r\nborder of the grid. The image below shows an example of leaking and\r\nnon-leaking systems of size . Now, you will be given the grid that has\r\nbeen partially filled by Little John. Each cell will either contain one\r\nof the four segments above, or be empty. Find the number of possible\r\ndifferent non-leaking final systems after Little John finishes filling\r\nof the empty cells with pipe segments. Print this number modulo ().Note\r\nthat rotations or flipping of the grid are not allowed and so two\r\nconfigurations that are identical only when one of them has been rotated\r\nor flipped either horizontally or vertically are considered two\r\ndifferent configurations.\r\n",
    "solutions": [
        "#include <list>\n#include <map>\n#include <set>\n#include <stack>\n#include <queue>\n#include <algorithm>\n#include <sstream>\n#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cfloat>\n#include <numeric>\n \nusing namespace std;\n \nconst int oo = 0x3f3f3f3f;\nconst double eps = 1e-9;\n \ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<string> vs;\ntypedef pair<int, int> pii;\n \n#define sz(c) int((c).size())\n#define all(c) (c).begin(), (c).end()\n#define FOR(i,a,b) for (int i = (a); i < (b); i++)\n#define FORD(i,a,b) for (int i = int(b)-1; i >= (a); i--)\n#define FORIT(i,c) for (__typeof__((c).begin()) i = (c).begin(); i != (c).end(); i++)\n\nint M, N;\nstring grid[600000];\n\nint main() {\n\tcin >> M >> N;\n\tFOR(i,0,M) cin >> grid[i];\n\tint res = 1;\n\tFOR(i,0,M) {\n\t\tif(res == 0) break;\n\t\tbool init = false;\n\t\tbool dir = true;\n\t\tFOR(j,0,N) {\n\t\t\tif(init) dir = !dir;\n\t\t\tif(grid[i][j] != '.') {\n\t\t\t\tif(grid[i][j] == '1' || grid[i][j] == '2') {\n\t\t\t\t\tif(!init) {\n\t\t\t\t\t\tinit = true;\n\t\t\t\t\t\tdir = true;\n\t\t\t\t\t} else if(!dir) {\n\t\t\t\t\t\tres = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif(!init) {\n\t\t\t\t\t\tinit = true;\n\t\t\t\t\t\tdir = false;\n\t\t\t\t\t} else if(dir) {\n\t\t\t\t\t\tres = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!init) res = (2*res)%1000003;\n\t}\n\n\tFOR(j,0,N) {\n\t\tif(res == 0) break;\n\t\tbool init = false;\n\t\tbool dir = true;\n\t\tFOR(i,0,M) {\n\t\t\tif(init) dir = !dir;\n\t\t\tif(grid[i][j] != '.') {\n\t\t\t\tif(grid[i][j] == '1' || grid[i][j] == '4') {\n\t\t\t\t\tif(!init) {\n\t\t\t\t\t\tinit = true;\n\t\t\t\t\t\tdir = true;\n\t\t\t\t\t} else if(!dir) {\n\t\t\t\t\t\tres = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif(!init) {\n\t\t\t\t\t\tinit = true;\n\t\t\t\t\t\tdir = false;\n\t\t\t\t\t} else if(dir) {\n\t\t\t\t\t\tres = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!init) res = (2*res)%1000003;\n\t}\n\tcout << res << endl;\n\treturn 0;\n}\n\n"
    ],
    "input": "",
    "output": "",
    "tags": [],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Plumber.json",
    "editorial_link": "https://codeforces.com//blog/entry/2584",
    "editorial": null,
    "hint": []
}