{"link": "https://codeforces.com//contest/727/problem/B", "problemId": "75800", "problem_idx": "B", "shortId": "727B", "contest_number": "727", "problem_submissions": {"F": [21454299, 21463560, 21456437, 21465295, 21454474, 21458264, 21456589], "E": [21449841, 21449822, 21450904, 21453568, 21453967, 21760601, 21511825, 21511807, 21511800, 21454554, 21549212, 21460363, 21455919, 21459919], "D": [21446491, 21446004, 21446992, 21445398, 21448520, 21448519, 21447217, 21446535, 21447223, 21446711, 21448124, 21446242, 21447928, 21448652, 21448435, 21449709, 21448635, 21445975, 21450092], "C": [21445102, 21444938, 21445707, 21444476, 21446045, 21446680, 21446166, 21445050, 21443956, 21445410, 21446522, 21445734, 21446213, 21445295, 21445829, 21445999, 21444171, 21447101], "B": [21444430, 21444284, 21444596, 21443833, 21445575, 21445150, 21455506, 21444391, 21445186, 21444885, 21444164, 21445217, 21445115, 21446297, 21444840, 21445324, 21453096, 21445206], "A": [21442889, 21442869, 21443136, 21442911, 21443243, 21443224, 21443033, 21442981, 21442858, 21442965, 21442983, 21442922, 21442918, 21442957, 21443069, 21443067, 21443028, 21443089, 21442924, 21443118]}, "name": "B. Bill Total Value", "statement": "Vasily exited from a store and now he wants to recheck the total price\r\nof all purchases in his bill. The bill is a string in which the names of\r\nthe purchases and their prices are printed in a row without any spaces.\r\nCheck has the format \"\", where (name of the -th purchase) is a non-empty\r\nstring of length not more than , consisting of lowercase English\r\nletters, and (the price of the -th purchase) is a non-empty string,\r\nconsisting of digits and dots (decimal points). It is possible that\r\npurchases with equal names have different prices.The price of each\r\npurchase is written in the following format. If the price is an integer\r\nnumber of dollars then cents are not written.Otherwise, after the number\r\nof dollars a dot (decimal point) is written followed by cents (if number\r\nof cents is between and inclusively, there is a leading zero).Also,\r\nevery three digits (from less significant to the most) in dollars are\r\nseparated by dot (decimal point). No extra leading zeroes are allowed.\r\nThe price always starts with a digit and ends with a digit.For example:\r\n\"\", \"\", \"\", \"\" and \"\" are valid prices, \"\", \"\", \"\", \"\", \"\" and \"\" are\r\nnot valid. Write a program that will find the total price of all\r\npurchases in the given bill.\r\n", "solutions": ["#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\n\nconst int INF = (int) 1e9;\nconst ll LINF = (ll) 1e18;\nconst ld EPS = 1e-7;\n\nint run() {\n    string s;\n    cin >> s;\n    s += \"a\";\n    ll ans = 0;\n    \n    ll cur_num = -1;\n    int last_dot = -INF;\n    \n    for (int i = 0; i < (int) s.size(); i++) {\n        if (s[i] == '.') {\n            last_dot = i;\n            continue;\n        }\n        \n        if ('a' <= s[i] && s[i] <= 'z') {\n            if (cur_num != -1) {\n                if (i - last_dot != 3) {\n                    cur_num *= 100;\n                }\n                \n                ans += cur_num;\n            }\n            \n            cur_num = -1;\n            continue;\n        }\n        \n        if (cur_num == -1) {\n            cur_num = s[i] - '0';\n        } else {\n            cur_num = cur_num * 10 + (s[i] - '0');\n        }\n    }\n    \n    if (ans % 100 == 0) {\n        string t = to_string(ans / 100);\n        vector<char> pp;\n        for (int i = 0; i < (int) t.size(); i++) {\n            int j = (int) t.size() - i - 1;\n            if (i % 3 == 0 && i != 0) {\n                pp.push_back('.');\n            }\n            pp.push_back(t[j]);\n        }\n        \n        reverse(pp.begin(), pp.end());\n        for (char c : pp) {\n            cout << c;\n        }\n        \n        cout << \"\\n\";\n    } else {\n        string t = to_string(ans / 100);\n        vector<char> pp;\n        for (int i = 0; i < (int) t.size(); i++) {\n            int j = (int) t.size() - i - 1;\n            if (i % 3 == 0 && i != 0) {\n                pp.push_back('.');\n            }\n            pp.push_back(t[j]);\n        }\n        \n        reverse(pp.begin(), pp.end());\n        for (char c : pp) {\n            cout << c;\n        }\n        \n        string tt = to_string(ans % 100);\n        while ((int) tt.size() < 2) {\n            tt = \"0\" + tt;\n        }\n        \n        cout << '.' << tt << \"\\n\";\n    }\n\n    return 0;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    return run();\n}\n"], "input": "", "output": "", "tags": ["expression parsing", "implementation", "strings"], "dificulty": "1600", "interactive": false}