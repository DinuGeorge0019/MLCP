{
    "link": "https://codeforces.com//contest/979/problem/B",
    "problemId": "183084",
    "problem_idx": "B",
    "shortId": "979B",
    "contest_number": "979",
    "problem_submissions": {
        "E": [
            38239944,
            38239626,
            38239985,
            38241605
        ],
        "D": [
            38235368,
            38234401,
            38232573,
            38240292,
            38232946,
            38238813,
            38236674,
            38234013,
            38234028,
            38242834,
            38235224,
            38238975,
            38236273,
            38233251,
            38924559,
            38232308,
            38231709
        ],
        "C": [
            38225119,
            38222425,
            38225946,
            38230085,
            38224078,
            38228380,
            38224768,
            38225370,
            38223169,
            38226246,
            38227575,
            38228558,
            38229693,
            38227316,
            38227594,
            38232766,
            38225714,
            38226125
        ],
        "B": [
            38223636,
            38219953,
            38246488,
            38228424,
            38221669,
            38225321,
            38237418,
            38223126,
            38229060,
            38225443,
            38231632,
            38234671,
            38223153,
            38228913,
            38349158,
            38225310
        ],
        "A": [
            38217437,
            38220346,
            38223788,
            38219996,
            38221134,
            38219848,
            38242600,
            38216689,
            38216875,
            38216674,
            38216872,
            38217267,
            38220684,
            38217206,
            38218341,
            38218810,
            38220203,
            38217265
        ]
    },
    "name": "B. Treasure Hunt",
    "statement": "After the big birthday party, Katie still wanted Shiro to have some more\r\nfun. Later, she came up with a game called . Of course, she invited her\r\nbest friends Kuro and Shiro to play with her.The three friends are very\r\nsmart so they passed all the challenges very quickly and finally reached\r\nthe destination. But the treasure can only belong to one cat so they\r\nstarted to think of something which can determine who is worthy of the\r\ntreasure. Instantly, Kuro came up with some ribbons.A random colorful\r\nribbon is given to each of the cats. Each color of the ribbon can be\r\nrepresented as an uppercase or lowercase Latin letter. Let\u2019s call a\r\nconsecutive subsequence of colors that appears in the ribbon a . The of\r\na ribbon is defined as the maximum number of times one of its subribbon\r\nappears in the ribbon. The more the subribbon appears, the more\r\nbeautiful is the ribbon. For example, the ribbon has the beauty of 7\r\nbecause its subribbon appears 7 times, and the ribbon has the beauty of\r\n2 because its subribbon appears twice.The rules are simple. The game\r\nwill have n turns. Every turn, each of the cats must change strictly\r\ncolor (at one position) in his/her ribbon to an arbitrary color which is\r\nfrom the unchanged one. For example, a ribbon can be changed into in one\r\nturn. The one having the most beautiful ribbon after n turns wins the\r\ntreasure.Could you find out who is going to be the winner if they all\r\nplay optimally?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define FOR(i,s,e) for(int i=(s);i<=(e);i++)\n#define FORD(i,s,e) for(int i=(s);i>=(e);i--)\n#define ALL(k) (k).begin(),(k).end()\n#define e1 first\n#define e2 second\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\n\nusing namespace std;\ntypedef long long LL;\ntypedef unsigned long long LLU;\ntypedef long double LD;\ntypedef pair<int,int> PII;\ntypedef pair<LL,LL> PLL;\ntypedef vector<int> VI;\nconst bool print=false;\n\nconst int N=3e5+7;\n\nLL n;\n\nchar text[N];\nLL res[N];\n\nconst string out[]={\"Kuro\", \"Shiro\", \"Katie\"};\n\nint main()\n{\n\tscanf(\"%lld\", &n);\n\tFOR(i,0,2){\n\t\tscanf(\"%s\", text);\n\t\tint k=strlen(text);\n\t\tmap<char,int>mymap;\n\t\tFOR(j,0,k-1)\n\t\t\tmymap[text[j]]++;\n\t\tLL m=n;\n\t\tvector<pair<LL,char>>mywek;\n\t\tfor (auto j : mymap)\n\t\t\tmywek.pb({j.second, j.first});\n\t\tbool tmp=false;\n\t\twhile(m){\n\t\t\tsort(ALL(mywek));\n\t\t\treverse(ALL(mywek));\n\t\t\tif (!mywek.back().first){\n\t\t\t\tmywek.pop_back();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ((int)mywek.size()==1){\n\t\t\t\tif (m==1 && !tmp)\n\t\t\t\t\tmywek[0].first=max(mywek[0].first-1, 1LL);\n\t\t\t\tm=0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tLL x=min(m, mywek[1].first);\n\t\t\tm-=x;\n\t\t\tmywek[1].first-=x;\n\t\t\tmywek[0].first+=x;\n\t\t\ttmp=true;\n\t\t}\n\t\tfor (auto j : mywek)\n\t\t\tres[i]=max(res[i], j.first);\n\t}\n\tn=-1;\n\tFOR(i,0,2)\n\t\tn=max(n,res[i]);\n\tset<string>myset;\n\tFOR(i,0,2)\n\t\tif(res[i]==n)\n\t\t\tmyset.insert(out[i]);\n\tif(myset.size()==1)\n\t\tcout << (*myset.begin()) << endl;\n\telse\n\t\tcout << \"Draw\" << endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "1800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Treasure Hunt.json",
    "editorial_link": "https://codeforces.com//blog/entry/59462",
    "editorial": "SolutionWe all knew that the substrings with length appear at most in\r\nthe string. So, to make a string as beautiful as possible, we will\r\nchoose the letter that firstly appears at most in the string and replace\r\nall the other letters with the chosen letter.There is some cases. If is\r\nless than or equal to the number of remaining letters, just add to the\r\nbeauty. If is even after replacing all letters with the chosen, we can\r\nchoose an arbitrary letter, replace it with some other letter, return it\r\nback and repeat the work till reach . Otherwise, we will not replace all\r\nthe other letters. Instead, we will replace the letters until there is\r\nletter left (now is even) then replace that one with another letter\r\ndifferent from our chosen letter. After that, replace that letter with\r\nour chosen letter. Now is even again, we repeat the work discussed\r\nabove.In conclusion, let\u00e2\u0080\u0099s call our string , our chosen letter and its\r\nnumber of occurrences in the string , then our answer is . Be careful\r\nwith .Time complexity: , where is the total length of the three strings.\r\n"
}