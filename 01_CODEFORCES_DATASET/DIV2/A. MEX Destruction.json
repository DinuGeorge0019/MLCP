{
    "link": "https://codeforces.com//contest/2049/problem/A",
    "problemId": "3095885",
    "problem_idx": "A",
    "shortId": "2049A",
    "contest_number": "2049",
    "problem_submissions": {
        "E": [
            297497545,
            297506248,
            297513363,
            297497215,
            297513754,
            297518565,
            297506722,
            297520708,
            297488887,
            297517677,
            297529325,
            297517116,
            297526566,
            297525983,
            297522466,
            297519909,
            297520752
        ],
        "D": [
            297483631,
            297479906,
            297485869,
            297513484,
            297488988,
            297486425,
            297485532,
            297485220,
            297484984,
            297500489,
            297482945,
            297486674,
            297499534,
            297487140,
            297494415,
            297499648,
            297503839,
            297506419
        ],
        "C": [
            297476672,
            297469506,
            297476237,
            297468134,
            297474308,
            297470523,
            297476380,
            297473582,
            297506923,
            297485541,
            297473126,
            297478801,
            297475763,
            297482532,
            297481819,
            297486746,
            297475914
        ],
        "B": [
            297470859,
            297460761,
            297460293,
            297459118,
            297463641,
            297461216,
            297463086,
            297463837,
            297473641,
            297462725,
            297462885,
            297469778,
            297465587,
            297460737,
            297466206,
            297472797,
            297465768
        ],
        "A": [
            297458727,
            297456975,
            297457057,
            297457132,
            297458401,
            297457465,
            297458903,
            297458352,
            297460231,
            297458345,
            297457970,
            297457220,
            297457772,
            297457523,
            297459233,
            297459057,
            297457136
        ],
        "F": [
            299863982,
            297606792
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/137273",
    "editorial": "Case 1: All elements are . Then the answer is . Case 2: Some element is\r\nnon-zero, and all non-zero elements form a contiguous subarray. Then the\r\nanswer is since we can choose that subarray and replace it with a . Case\r\n3: Otherwise, the answer is . Solution\r\n",
    "name": "A. MEX Destruction",
    "statement": "Evirir the dragon found an array a_1, a_2,\r\nldots, a_n of n non-negative integers.In one operation, they can choose\r\na non-empty subarray^{\r\ntext{ }} b of a and replace it with the integer\r\noperatorname{mex}(b)^{\r\ntext{ }}. They want to use this operation any number of times to make a\r\nonly contain zeros. It can be proven that this is always possible under\r\nthe problem constraints.What is the minimum number of operations\r\nneeded?^{\r\ntext{ }}An array c is a subarray of an array d if c can be obtained from\r\nd by the deletion of several (possibly, zero or all) elements from the\r\nbeginning and several (possibly, zero or all) elements from the end. ^{\r\ntext{ }}The minimum excluded (MEX) of a collection of integers f_1, f_2,\r\nldots, f_k is defined as the smallest non-negative integer x which does\r\nnot occur in the collection f.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx2,tune=native\")#pragma GCC optimize(\"unroll-loops,fast-math,O3\")using namespace std;const int B = 2e5 + 100;   int main(){    int t;    cin >> t;    while(t--) {        int n;        cin >> n;        int a[n + 1] = {};        for(int i = 1;i <= n;i++) cin >> a[i];        int cnt = 0;        for(int i = 1;i <= n;i++) {            if(a[i] == 0) {                cnt++;            }        }        int cntt = 0;        for(int i = 1;i <= n;i++) {            if(a[i] != 0&&a[i - 1] == 0) {                cntt++;            }        }        if(cnt == n) cout << 0 << endl;        else if(cntt == 1) cout << 1 << endl;        else cout << 2 << endl;    }}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. MEX Destruction.json"
}