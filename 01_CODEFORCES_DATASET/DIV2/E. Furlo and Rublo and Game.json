{
    "link": "https://codeforces.com//contest/255/problem/E",
    "problemId": "2399",
    "problem_idx": "E",
    "shortId": "255E",
    "contest_number": "255",
    "problem_submissions": {
        "E": [
            2781064,
            2782909,
            2779985,
            2800669,
            2783123
        ],
        "D": [
            2779503,
            2780531,
            2779855,
            7301531,
            2779527,
            2780996,
            2780563,
            2778460,
            2780405,
            2781582,
            2779013,
            2778273,
            2780817,
            2782180,
            2778681,
            2781974,
            2781214,
            2779597
        ],
        "C": [
            2777137,
            2775883,
            2776972,
            2778713,
            2776597,
            2777246,
            2780722,
            2776279,
            2776811,
            2784598,
            2781515,
            2781103,
            2782432,
            2778575,
            2778477,
            2781231,
            2777192,
            2777224,
            2777892
        ],
        "B": [
            2774906,
            2775664,
            2774618,
            2774745,
            2774652,
            2775712,
            2774692,
            2774662,
            2775040,
            2776057,
            2774786,
            2775382,
            2774585,
            2775601,
            2774197,
            2775299,
            2777977,
            2781298
        ],
        "A": [
            2773818,
            2774831,
            2773771,
            2774023,
            2773753,
            2773918,
            2773887,
            2773828,
            2774266,
            2774889,
            2773857,
            2774596,
            2773892,
            2774053,
            2773684,
            2774322,
            2773855,
            2773670
        ]
    },
    "name": "E. Furlo and Rublo and Game",
    "statement": "Furlo and Rublo play a game. The table has piles of coins lying on it,\r\nthe -th pile has coins. Furlo and Rublo move in turns, Furlo moves\r\nfirst. In one move you are allowed to: choose some pile, let’s denote\r\nthe current number of coins in it as ; choose some integer and decrease\r\nthe number of coins in this pile to . In other words, after the\r\ndescribed move the pile will have coins left. The player who can’t make\r\na move, loses. Your task is to find out, who wins in the given game if\r\nboth Furlo and Rublo play optimally well.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<cmath>\n#include<cstring>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nint n;\nint sg[1010101];\nvector<int>sg_pos[1010];\n\nbool found(int v,int l,int r){\n    vector<int>::iterator it;\n    it=lower_bound(sg_pos[v].begin(),sg_pos[v].end(),l);\n    if(it==sg_pos[v].end())\n        return false;\n    if((*it)<=r)\n        return true;\n    return false;\n}\n\nint main(){\n    for(int i=0;i<1010;i++)\n        sg_pos[i].clear();\n    for(int i=1;i<1010101;i++){\n        sg[i]=0;\n        int l=ceil(sqrt(sqrt(i))),r=sqrt(i);\n        if(r>=i)\n            r=i-1;\n        while(found(sg[i],l,r))\n            sg[i]++;\n        sg_pos[sg[i]].push_back(i);\n    }\n\n    int ans=0;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++){\n        long long v;\n        scanf(\"%I64d\",&v);\n        int t=0;\n        int l=ceil(sqrt(sqrt(v))),r=sqrt(v);\n        if(r>=v)\n            r=v-1;\n        while(found(t,l,r))\n            t++;\n        ans^=t;\n    }\n    if(ans!=0)\n        printf(\"Furlo\\n\");\n    else\n        printf(\"Rublo\\n\");\n\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "games",
        "implementation",
        "math"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Furlo and Rublo and Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/6161",
    "editorial": "Note that after the first move any pile turns into a pile no larger than 1000000. We assume Grundy function for numbers less than 1 million. Grundy function is very small, you can start on the partial sums for each type of function that would quickly tell what function is in the interval, and which are not present. Knowing the answer is not difficult to find small response for all piles.",
    "hint": []
}