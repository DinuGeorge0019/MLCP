{
    "link": "https://codeforces.com//contest/599/problem/B",
    "problemId": "41189",
    "problem_idx": "B",
    "shortId": "599B",
    "contest_number": "599",
    "problem_submissions": {
        "D": [
            14373739,
            14373664,
            14394221,
            14375180,
            14375137,
            14375830,
            14374794,
            14372514,
            14378293,
            14374356,
            14380491,
            14376576,
            14377604,
            14379482,
            14375007,
            14373832,
            14379192,
            14384201,
            14378143,
            14374835,
            14375909
        ],
        "C": [
            14369474,
            14370302,
            14371990,
            14366448,
            14371734,
            14369913,
            14369228,
            14371288,
            14371880,
            14370952,
            14370316,
            14371725,
            14372878,
            14369085,
            14371250,
            14372876,
            14369840,
            14370142,
            14369299,
            14369577
        ],
        "B": [
            14367721,
            14365689,
            14367534,
            14376988,
            14368981,
            14368542,
            14366919,
            14366011,
            14371510,
            14368972,
            14367928,
            14368335,
            14367992,
            14366870,
            14370057,
            14371458,
            14366298,
            14368075,
            14367504
        ],
        "A": [
            14363461,
            14367023,
            14364757,
            14369525,
            14385293,
            14364759,
            14363593,
            14363286,
            14364018,
            14364707,
            14365621,
            14364489,
            14364779,
            14363557,
            14367419,
            14365247,
            14363341,
            14364093,
            14364413,
            14363223
        ],
        "E": [
            14379749,
            14385538
        ]
    },
    "name": "B. Spongebob and Joke",
    "statement": "While Patrick was gone shopping, Spongebob decided to play a little\r\ntrick on his friend. The naughty Sponge browsed through Patrick\u2019s\r\npersonal stuff and found a sequence of length , consisting of integers\r\nfrom to , not necessarily distinct. Then he picked some sequence of\r\nlength and for each number got number . To finish the prank he erased\r\nthe initial sequence .It\u2019s hard to express how sad Patrick was when he\r\nreturned home from shopping! We will just say that Spongebob immediately\r\ngot really sorry about what he has done and he is now trying to restore\r\nthe original sequence. Help him do this or determine that this is\r\nimpossible.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\nint used[100005];\nint f[100005];\nint o[100005];\nint freq[100005], rev[100005];\nint main() {\n  int n, m, x;\n  scanf(\"%d %d\", &n, &m);\n  for (int i = 1; i <= n; i++) {\n    scanf(\"%d\", &f[i]);\n    freq[f[i]]++;\n    rev[f[i]] = i;\n  }\n  bool amb = false;\n  for (int i = 1; i <= m; i++) {\n    scanf(\"%d\", &x);\n    if (freq[x] == 1) {\n      o[i] = rev[x];\n    } else if (freq[x] == 0) {\n      printf(\"Impossible\\n\");\n      return 0;\n    } else {\n      amb = true;\n    }\n  }\n  if (amb) {\n    printf(\"Ambiguity\\n\");\n    return 0;\n  }\n  printf(\"Possible\\n\");\n  for (int i = 1; i <= m; i++) {\n    printf(\"%d%c\", o[i], i == m ? '\\n' : ' ');\n  }\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "implementation"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Spongebob and Joke.json",
    "editorial_link": "https://codeforces.com//blog/entry/21685",
    "editorial": "First of all, you should read the statement carefully. Then, for every element 1 ... N create a list of integers from what we can get this number.\n\nAfter that you have to check some cases, before that create a special mark for answer Ambiguity:\n\nLet current element of the given array is bi\n\nIf two or more elements exist from which it's possible to get bi, then use your special mark that answer is Ambiguity\nIf no elements exist from which it's possible to get bi, then print Impossible\nIf only one element exists from which it's possible to get bi just change bi to the value of this element\nFinally, if you marked your special mark then print Ambiguity, else print Possible and correct answer."
}