{
    "link": "https://codeforces.com//contest/2031/problem/C",
    "problemId": "3027238",
    "problem_idx": "C",
    "shortId": "2031C",
    "contest_number": "2031",
    "problem_submissions": {
        "C": [
            291615019,
            291592980,
            291598103,
            291592617,
            291601230,
            291594950,
            291596641,
            291598534,
            291598910,
            291597697,
            291596223,
            291592587,
            291599058,
            291603323,
            291602165,
            291609856,
            291600956,
            291601564,
            291598721,
            291601153
        ],
        "D": [
            291602113,
            291609031,
            291609392,
            291605650,
            291611553,
            291605807,
            291612841,
            291607554,
            291614197,
            291610351,
            291605780,
            291607652,
            291614506,
            291615932,
            291614172,
            291618154,
            291620240,
            291618088,
            291615701,
            291630608
        ],
        "E": [
            291599657,
            291623637,
            291622329,
            291627631,
            291620639,
            291620840,
            291625147,
            291625195,
            291625152,
            291625051,
            291667607,
            291632299,
            291624695,
            291626446,
            291625617,
            291626579,
            291626557,
            291630022,
            291630615,
            291634752,
            291621869
        ],
        "B": [
            291587323,
            291583487,
            291585012,
            291579964,
            291587433,
            291597180,
            291587403,
            291588846,
            291583266,
            291585887,
            291584391,
            291583688,
            291590002,
            291589009,
            291588475,
            291585693,
            291585389,
            291589773,
            291580876,
            291584490
        ],
        "A": [
            291582945,
            291577851,
            291577771,
            291577094,
            291581134,
            291579202,
            291579167,
            291588540,
            291578293,
            291580690,
            291578230,
            291580416,
            291578795,
            291578495,
            291588315,
            291578514,
            291578370,
            291580482,
            291577265,
            291581164
        ],
        "F": [
            291668053
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/136260",
    "editorial": "Note that is a square number; thus, for\neven , the construction works. For odd , note that there exists a color\nthat appears at least thrice, say at positions . Then , and are all\nsquare numbers. Note that , which has the smallest solution being , and\n. Therefore, there is no solution if . We devise a solution for . By the\nabove, we have the following posts filled in:We can use the same color\nfor positions and , to obtain the following:The remaining even-length\nblanks can be filled in similar to above. The result is as follows and\ncan be hard-coded:Then, for odd , add pairs with distance to complete\nthe construction.Note that there are different ways to construct this\nstarting array for as well.Time complexity: Implementation: (by ACGN)\n291676952\n",
    "name": "C. Penchick and BBQ Buns",
    "statement": "Penchick loves two things: square numbers and Hong Kong-style BBQ buns!\r\nFor his birthday, Kohane wants to combine them with a gift: n BBQ buns\r\narranged from left to right. There are 10^6 available fillings of BBQ\r\nbuns, numbered from 1 to 10^6. To ensure that Penchick would love this\r\ngift, Kohane has a few goals: No filling is used exactly once; that is,\r\neach filling must either not appear at all or appear at least twice. For\r\nany two buns i and j that have the same filling, the distance between\r\nthem, which is |i-j|, must be a perfect square^{\r\ntext{ }}. Help Kohane find a valid way to choose the filling of the\r\nbuns, or determine if it is impossible to satisfy her goals! If there\r\nare multiple solutions, print any of them.^{\r\ntext{ }}A positive integer x is a perfect square if there exists a\r\npositive integer y such that x = y^2. For example, 49 and 1 are perfect\r\nsquares because 49 = 7^2 and 1 = 1^2 respectively. On the other hand, 5\r\nis not a perfect square as no integer squared equals 5\r\n",
    "solutions": [
        "#include<bits/stdc++.h>//#pragma GCC optimize(\"Ofast,no-stack-protector,unroll-loops,fast-math\")//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,tune=native\")#define ll long long#define ull unsigned long long#define lll __int128#define pc __builtin_popcount#define pr pair<int,int>#define pb push_back#define mp make_pair#define x first#define y second#define lb(x) x&-xusing namespace std;mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());ll rint(ll l,ll r){return uniform_int_distribution<ll>(l,r)(rnd);}const int maxn=2e5+10;void read(int &X){\tX=0;\tbool fu=0;\tchar cr=getchar();\twhile((cr<'0'||cr>'9')&&cr!='-') cr=getchar();\tif(cr=='-') cr=getchar(),fu=1;\twhile(cr>='0'&&cr<='9') X=(X<<3)+(X<<1)+(cr^48),cr=getchar();\tX=(fu?-X:X);}int T,n,a[maxn];int main(){//\tfreopen(\".in\",\"r\",stdin);//\tfreopen(\".out\",\"w\",stdout);\tscanf(\"%d\",&T);\twhile(T--)\t{\t\tscanf(\"%d\",&n);\t\tif(n&1)\t\t{\t\t\tif(n<=25)\t\t\t{\t\t\t\tprintf(\"-1\\n\");\t\t\t\tcontinue;\t\t\t}\t\t\telse\t\t\t{\t\t\t\tfor(int i=1;i<=n;i++) a[i]=0;\t\t\t\tint cnt=3;\t\t\t\ta[1]=a[10]=a[26]=1,a[27]=a[23]=2;\t\t\t\tfor(int i=1;i<=n;i++)\t\t\t\t{\t\t\t\t\tif(!a[i])\t\t\t\t\t{\t\t\t\t\t\tif(cnt>0) a[i]=cnt,cnt=0-cnt;\t\t\t\t\t\telse a[i]=-cnt,cnt=(0-cnt)+1;\t\t\t\t\t}\t\t\t\t\tprintf(\"%d \",a[i]);\t\t\t\t}\t\t\t\tprintf(\"\\n\");\t\t\t}\t\t}\t\telse\t\t{\t\t\tfor(int i=1;i<=(n>>1);i++) printf(\"%d %d \",i,i);\t\t\tprintf(\"\\n\");\t\t}\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "math",
        "number theory"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Penchick and BBQ Buns.json"
}