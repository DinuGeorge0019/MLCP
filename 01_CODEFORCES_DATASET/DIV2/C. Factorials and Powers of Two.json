{
    "link": "https://codeforces.com//contest/1646/problem/C",
    "problemId": "1316354",
    "problem_idx": "C",
    "shortId": "1646C",
    "contest_number": "1646",
    "problem_submissions": {
        "F": [
            148377331,
            148376552,
            148380191,
            148408003,
            148407985,
            148407958,
            148625107,
            148397512,
            148614447,
            148385636
        ],
        "E": [
            148347130,
            148358632,
            148360488,
            148333996,
            148354021,
            148353992,
            148359437,
            148353904,
            148361106,
            148406239,
            148363543,
            148355954,
            148360552,
            148359820,
            148358320,
            148361452,
            148368263,
            148351309,
            148353801,
            148370230,
            148352778
        ],
        "D": [
            148336483,
            148341281,
            148366316,
            148319892,
            148345041,
            148346482,
            148342901,
            148349102,
            148343090,
            148339630,
            148343423,
            148345651,
            148350280,
            148350345,
            148349930,
            148341422,
            148364204,
            148362633,
            148344691,
            148349044
        ],
        "C": [
            148310953,
            148326110,
            148330270,
            148306601,
            148323665,
            148325840,
            148321586,
            148311486,
            148322407,
            148317336,
            148321327,
            148327478,
            148321394,
            148325846,
            148315684,
            148317105,
            148328227,
            148404981,
            148319824,
            148313542,
            148332408
        ],
        "B": [
            148304866,
            148306819,
            148315665,
            148302178,
            148310613,
            148314947,
            148310473,
            148304347,
            148306865,
            148309180,
            148307122,
            148311855,
            148309145,
            148315243,
            148304621,
            148305987,
            148317489,
            148404248,
            148306430,
            148304810,
            148327258
        ],
        "A": [
            148300689,
            148300631,
            148308492,
            148300540,
            148301834,
            148303727,
            148301684,
            148300721,
            148300698,
            148302427,
            148311861,
            148301382,
            148301011,
            148301721,
            148300651,
            148301177,
            148301822,
            148404175,
            148300747,
            148300552,
            148302531
        ]
    },
    "name": "C. Factorials and Powers of Two",
    "statement": "A number is called if it is a power of two or a factorial. In other\r\nwords, the number m is powerful if there exists a non-negative integer d\r\nsuch that m=2^d or m=d!, where d!=1\r\ncdot 2\r\ncdot\r\nldots\r\ncdot d (in particular, 0! = 1). For example 1, 4, and 6 are powerful\r\nnumbers, because 1=1!, 4=2^2, and 6=3! but 7, 10, or 18 are not.You are\r\ngiven a positive integer n. Find the minimum number k such that n can be\r\nrepresented as the sum of k powerful numbers, or say that there is no\r\nsuch k.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\nusing LL = long long;\nint main() {\n    cin.tie(nullptr)->sync_with_stdio(false);\n    cout << fixed << setprecision(20);\n    int t;\n    for (cin >> t; t; t -= 1) {\n        LL n;\n        cin >> n;\n        vector<LL> v = {6};\n        for (int i = 4; v.back() * i <= n; i += 1)\n            v.push_back(v.back() * i);\n        int k = popcount((unsigned long long)n);\n        for (int i = 1; i < (1 << v.size()); i += 1) {\n            LL s = n;\n            for (int j = 0; j < v.size(); j += 1)\n                if ((i >> j) & 1)\n                    s -= v[j];\n            if (s >= 0)\n                k = min(k, popcount((unsigned long long)s) + popcount((unsigned long long)i));\n        }\n        cout << k << \"\\n\";\n    }\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "constructive algorithms",
        "dp",
        "math"
    ],
    "dificulty": "1500",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Factorials and Powers of Two.json",
    "editorial_link": "https://codeforces.com//blog/entry/100584",
    "editorial": "If the problem asked to represent as a sum of distinct powers of two\r\nonly (without the factorials), then there is a unique way to do it,\r\nusing the binary representation of and the number of terms will be the\r\nnumber of digits equal to in this binary representation. Let\u00e2\u0080\u0099s denote\r\nthis number by .If we fix the factorials we are going to use in the sum,\r\nthen the rest of the terms are uniquely determined because of the\r\nobservation above. Note that and will not be considered as factorials in\r\norder to avoid repeating terms.So, to solve the problem it is enough to\r\niterate through all possibilities of including or not including each\r\nfactorial (up to ) and for each of them calculate the number of terms\r\nused in the sum. If we used factorials and their sum is , then the\r\nnumber of terms can be calculated as . The minimum of all these numbers\r\nwill be the answer.Intended complexity: where is the biggest positive\r\ninteger such that\r\n"
}