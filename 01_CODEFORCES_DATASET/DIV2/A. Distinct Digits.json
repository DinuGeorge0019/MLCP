{
    "link": "https://codeforces.com//contest/1228/problem/A",
    "problemId": "424242",
    "problem_idx": "A",
    "shortId": "1228A",
    "contest_number": "1228",
    "problem_submissions": {
        "F": [
            61496806,
            61502870,
            61502190,
            61505436,
            61526774,
            61501386,
            61506794,
            61506003,
            61507242,
            61528062,
            61506930,
            61504933,
            61527679,
            61758392,
            61506804,
            61501659
        ],
        "E": [
            61487066,
            61484839,
            61491424,
            61489793,
            61526757,
            61494082,
            61491501,
            61493504,
            61494383,
            61528054,
            61491524,
            61495860,
            61488344,
            61491222,
            61486950,
            61487675,
            61498567,
            61492377,
            61492698,
            61509475,
            61488264
        ],
        "D": [
            61485310,
            61482745,
            61489582,
            61486586,
            61526744,
            61490366,
            61487311,
            61489384,
            61491690,
            61528041,
            61498727,
            61505643,
            61485067,
            61484265,
            61490334,
            61491347,
            61491538,
            61486214,
            61487124,
            61487752,
            61482893
        ],
        "C": [
            61480399,
            61479345,
            61481687,
            61481376,
            61526733,
            61486187,
            61481654,
            61482779,
            61486226,
            61528029,
            61481914,
            61486289,
            61481778,
            61480281,
            61475855,
            61480938,
            61484833,
            61479319,
            61482763,
            61482555,
            61495805
        ],
        "B": [
            61476242,
            61476828,
            61478048,
            61477189,
            61526720,
            61483135,
            61479399,
            61477633,
            61477664,
            61528022,
            61483663,
            61478266,
            61477452,
            61477008,
            61479768,
            61476788,
            61509875,
            61476696,
            61478410,
            61478919,
            61476259
        ],
        "A": [
            61473188,
            61476420,
            61473176,
            61473720,
            61526708,
            61477230,
            61473216,
            61473745,
            61473523,
            61528006,
            61479593,
            61475038,
            61472935,
            61473261,
            61477228,
            61473405,
            61476821,
            61473215,
            61474472,
            61475483,
            61474687
        ]
    },
    "name": "A. Distinct Digits",
    "statement": "You have two integers l and r. Find an integer x which satisfies the\r\nconditions below: l\r\nle x\r\nle r. All digits of x are different. If there are multiple answers,\r\nprint any of them.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <ctime>\n#include <cctype>\n\n#include <algorithm>\n#include <random>\n#include <bitset>\n#include <queue>\n#include <functional>\n#include <set>\n#include <map>\n#include <vector>\n#include <chrono>\n#include <iostream>\n#include <limits>\n#include <numeric>\n\n#define LOG(FMT...) fprintf(stderr, FMT)\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\n// mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\nint main() {\n#ifdef LBT\n  freopen(\"test.in\", \"r\", stdin);\n  int nol_cl = clock();\n#endif\n\n  int l, r;\n  scanf(\"%d%d\", &l, &r);\n  for (int i = l; i <= r; ++i) {\n    static bool m[10];\n    memset(m, 0, sizeof(m));\n    int x = i;\n    bool flag = false;\n    while (x) {\n      if (m[x % 10]) {\n        flag = true;\n        break;\n      }\n      m[x % 10] = true;\n      x /= 10;\n    }\n    if (!flag) {\n      printf(\"%d\\n\", i);\n      return 0;\n    }\n  }\n  puts(\"-1\");\n\n#ifdef LBT\n  LOG(\"Time: %dms\\n\", int ((clock()\n          -nol_cl) / (double)CLOCKS_PER_SEC * 1000));\n#endif\n  return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "implementation"
    ],
    "dificulty": "800",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Distinct Digits.json",
    "editorial_link": "https://codeforces.com//blog/entry/70162",
    "editorial": "Let\u00e2\u0080\u0099s see how to check if all digits of are different. Since there can\r\nbe only different numbers( to ) in single digit, you can count the\r\noccurrences of numbers by looking all digits of . You can count all\r\ndigits by using modulo or changing whole number to string. For example,\r\nif , then occurrence of each number will be , because there are two s,\r\nsingle and single in . So is invalid number.Now do the same thing for\r\nall where . If you find any valid number then print it. Otherwise print\r\n.Time complexity is .\r\n"
}