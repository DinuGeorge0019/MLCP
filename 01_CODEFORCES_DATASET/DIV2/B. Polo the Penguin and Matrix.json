{
    "link": "https://codeforces.com//contest/289/problem/B",
    "problemId": "2797",
    "problem_idx": "B",
    "shortId": "289B",
    "contest_number": "289",
    "problem_submissions": {
        "E": [
            3459146,
            3463369,
            3460609,
            3460604,
            3462555,
            3461006,
            3461728,
            3461588,
            3461307,
            3460025,
            3462334,
            3462779,
            3463498,
            3460536,
            3463551,
            3464172,
            3462631,
            3462960
        ],
        "C": [
            3456054,
            3456066,
            3455021,
            3459797,
            3456042,
            3453824,
            3456655,
            3457204,
            3455279,
            3456988,
            3457381,
            3458050,
            3457221,
            3457801,
            3454599,
            3456362,
            3455735,
            3456889
        ],
        "D": [
            3455963,
            3460496,
            3459068,
            3458621,
            3459481,
            3457268,
            3459857,
            3459925,
            3458097,
            3462947,
            3458331,
            3459472,
            3461935,
            3462472,
            3461241,
            3459422,
            3461116,
            3460679
        ],
        "B": [
            3455203,
            3455368,
            3453821,
            3457116,
            3455086,
            3458732,
            3455817,
            3455593,
            3459615,
            3455651,
            3454891,
            3455252,
            3455908,
            3456410,
            3456449,
            3455178,
            3457543,
            3454105
        ],
        "A": [
            3453433,
            3454495,
            3453333,
            3454660,
            3453910,
            3459883,
            3453757,
            3454123,
            3463162,
            3453754,
            3453562,
            3453866,
            3458954,
            3453377,
            3453432,
            3456188,
            3456399
        ]
    },
    "name": "B. Polo the Penguin and Matrix",
    "statement": "Little penguin Polo has an matrix, consisting of integers. Let’s index\r\nthe matrix rows from 1 to from top to bottom and let’s index the columns\r\nfrom 1 to from left to right. Let’s represent the matrix element on the\r\nintersection of row and column as .In one move the penguin can add or\r\nsubtract number from some matrix element. Find the minimum number of\r\nmoves needed to make all matrix elements equal. If the described plan is\r\nimpossible to carry out, say so.\r\n",
    "solutions": [
        "#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define N 110\nint n,m,d,a[N*N],b[N*N],c[N*N],ma,mi;\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&d);\n    for (int i=0;i<n*m;i++) scanf(\"%d\",a+i);\n    for (int i=0;i<n*m;i++) \n        if ((a[i]-a[0])%d)\n            return puts(\"-1\"),0;\n    sort(a,a+n*m);\n    for (int i=1;i<n*m;i++)\n        b[i]=(a[i]!=a[i-1])?b[i-1]+(a[i]-a[i-1])/d*i:b[i-1];\n    for (int i=n*m-2;i>=0;i--)\n        c[i]=(a[i]!=a[i+1])?c[i+1]+(a[i+1]-a[i])/d*(n*m-i-1):c[i+1];\n    int ans=0x7fffffff;\n    for (int i=0;i<n*m;i++)\n        ans=min(ans,b[i]+c[i]);\n    printf(\"%d\\n\",ans);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dp",
        "implementation",
        "sortings",
        "ternary search"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Polo the Penguin and Matrix.json",
    "editorial_link": "https://codeforces.com//blog/entry/7241",
    "editorial": "Solution. First of all, we need to know when the answer is -1. For that you should notice that after any operation on number z, value  doesn't change. Indeed, . This means that there is not answer if there are two different points for which  is diffrent.\n\nNow we can transform our problem a bit. We can just write down all integers from matrix n?×?m to one array b of size k?=?n?×?m and sort them all in non-decreasing order. It is not hard to notice that in some of the optimal solutions, all number are at the end equal to one of the number for starting array. But also, it is optimal to make all number equal to  (median element). Why to median? Suppose that we make all numbers equal to non-median element with index x. Then if |x?-?(k?-?x)|?>?1 (i. e. from one side there are more elements than from another + 1). So, by moving out element more to median, we can make result better.\n\nAfter we know, to which number we should bring all, the answer is just , divided by d.",
    "hint": []
}