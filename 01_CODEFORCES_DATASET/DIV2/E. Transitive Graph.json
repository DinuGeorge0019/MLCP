{"link": "https://codeforces.com//contest/1900/problem/E", "problemId": "2348162", "problem_idx": "E", "shortId": "1900E", "contest_number": "1900", "problem_submissions": {"E": [234456838, 234455027, 234457931, 234455766, 234456771, 234460502, 234461970, 234463093, 234461258, 234461626, 235437599, 234459471, 234465112, 234465941, 234463278, 234463477, 234464668, 234464310, 234465647, 234465136], "D": [234442999, 234445532, 234447119, 234444027, 234448662, 234449846, 234450821, 234448590, 234544232, 234544122, 234453539, 234456816, 234449461, 234446745, 234447346, 234455068, 234451202, 234455283, 234455174, 234452017, 234447175], "C": [234433856, 234437020, 234438208, 234438984, 234436746, 234440214, 234440440, 234440880, 234441500, 234437974, 234441984, 234439314, 234438351, 234441349, 234441838, 234441318, 234441667, 234442122, 234444120], "B": [234430889, 234432938, 234432800, 234433842, 234432820, 234435211, 234434789, 234436751, 234434039, 234432505, 234436824, 234433963, 234433725, 234434390, 234437612, 234436752, 234436425, 234432619, 234438330], "A": [234429140, 234429060, 234429292, 234429383, 234429959, 234434373, 234428876, 234431698, 234428932, 234429000, 234431129, 234431009, 234429251, 234429090, 234434493, 234430325, 234429412, 234429176, 234429387], "F": [234821914, 234821787]}, "name": "E. Transitive Graph", "statement": "You are given a graph G with n vertices and m edges between\r\nthem.Initially, graph H is the same as graph G. Then you decided to\r\nperform the following actions: If there exists a triple of vertices a,\r\nb, c of H, such that there is an edge from a to b and an edge from b to\r\nc, but there is no edge from a to c, add an edge from a to c. Repeat the\r\nprevious step as long as there are such triples. Note that the number of\r\nedges in H can be up to n^2 after performing the actions.You also wrote\r\nsome values on vertices of graph H. More precisely, vertex i has the\r\nvalue of a_i written on it.Consider a simple path consisting of k\r\nvertices with indexes v_1, v_2,\r\nldots, v_k. The length of such a path is k. The value of that path is\r\ndefined as\r\nsum_{i = 1}^k a_{v_i}.A simple path is considered the longest if there\r\nis no other simple path in the graph with greater length.Among all the\r\nlongest simple paths in H, find the one with the smallest value.\r\n", "solutions": ["#include <bits/stdc++.h>\n/*\nstruct Fenwick{\n\tint C[100005];\n\tinline int lowbit(int x){\n\t\treturn x & -x;\n\t}\n\tinline int ask(int x);\n\tinline void update(int x, int y);\n};\n*/\n\n//Fenwick tree above\n\n/*\nconst int mod = 998244353, g = 3, gi = 332748118;\ninline int mul(int x, int y){\n\treturn (int)(1ll * x * y % (1ll * mod));\n}\ninline int add(int x, int y){\n\treturn x + y >= mod ? x + y - mod : x + y;\n}\ninline int minus(int x, int y){\n\treturn x < y ? x - y + mod : x - y;\n}\ninline int Qpow(int x, int y){\n\tint r = 1;\n\twhile(y){\n\t\tif(y & 1) r = mul(r, x);\n\t\tx = mul(x, x);\n\t\ty >>= 1;\n\t}\n\treturn r;\n}\nvoid ntt(int *A, int limit, int on){\n\tint rev[limit];\n\tmemset(rev, 0, sizeof(int) * limit);\n\tfor(int i = 1; i < limit; ++i)\n\t\trev[i] = (rev[i >> 1] >> 1) + (i & 1) * (limit >> 1);\n\tfor(int i = 0; i < limit; ++i)\n\t\tif(i < rev[i]) std::swap(A[i], A[rev[i]]);\n\tfor(int i = 2; i <= limit; i <<= 1){\n\t\tint t;\n\t\tif(on == 1) t = Qpow(g, (mod - 1) / i);\n\t\telse t = Qpow(gi, (mod - 1) / i);\n\t\tfor(int j = 0; j < limit; j += i){\n\t\t\tint r = 1;\n\t\t\tfor(int k = j; k < j + i / 2; ++k, r = mul(r, t)){\n\t\t\t\tint u = A[k], v = mul(A[k + i / 2], r);\n\t\t\t\tA[k] = add(u, v);\n\t\t\t\tA[k + i / 2] = minus(u, v);\n\t\t\t}\n\t\t}\n\t}\n\tif(on == -1){\n\t\tint uu = Qpow(limit, mod - 2);\n\t\tfor(int i = 0; i < limit; ++i) A[i] = mul(A[i], uu);\n\t}\n\treturn ;\n}\n*/\n\n//mod int above\ninline int read(){\n\tchar c = getchar();\n\tint x = 0;\n\twhile(c < '0' || c > '9') c = getchar();\n\twhile(c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n\treturn x;\n}\nint n, m, a[200005], tot, cd[200005];\nstd::vector <int> ver[200005], nv[200005], vn[200005];\nint a1; long long a2;\nint dfn[200005], ds, low[200005], vis[200005], tp, st[200005], bel[200005];\nint c1[200005], c2[200005]; long long d1[200005], d2[200005];\nvoid tarjan(int x){\n\tdfn[x] = low[x] = ++ds;\n\tst[++tp] = x; vis[x] = 1;\n\tfor(auto v : ver[x]){\n\t\tif(!dfn[v]) tarjan(v), low[x] = std::min(low[x], low[v]);\n\t\telse if(vis[v]) low[x] = std::min(low[x], dfn[v]);\n\t}\n\tif(low[x] == dfn[x]){\n\t\ttot++;\n\t\twhile(st[tp] != x){\n\t\t\tvis[st[tp]] = 0;\n\t\t\tbel[st[tp]] = tot;\n\t\t\t--tp;\n\t\t}\n\t\tvis[x] = 0;\n\t\tbel[x] = tot;\n\t\t--tp;\n\t}\n\treturn ;\n}\nvoid solve(){\n\tscanf(\"%d%d\", &n, &m); a1 = 0, a2 = 1e18;\n\tfor(int i = 1; i <= n; ++i){\n\t\ta[i] = read(); ver[i].clear();\n\t\tdfn[i] = low[i] = vis[i] = bel[i] = 0;\n\t}\n\tds = tp = tot = 0;\n\tfor(int i = 1; i <= m; ++i){\n\t\tint x = read(), y = read();\n\t\tver[x].push_back(y);\n\t}\n\tfor(int i = 1; i <= n; ++i) if(!dfn[i]) tarjan(i);\n\tfor(int i = 1; i <= tot; ++i) vn[i].clear(), nv[i].clear(), c1[i] = c2[i] = d1[i] = d2[i] = 0;\n\tfor(int i = 1; i <= n; ++i) c1[bel[i]]++, d1[bel[i]] += 1ll * a[i];\n\tfor(int i = 1; i <= tot; ++i) cd[i] = 0;\n\tfor(int i = 1; i <= n; ++i) for(auto v : ver[i]){\n\t\t if(bel[i] == bel[v]) continue;\n\t\t nv[bel[i]].push_back(bel[v]), ++cd[bel[i]];\n\t\t vn[bel[v]].push_back(bel[i]);\n\t}\n\tstd::queue <int> q;\n\tfor(int i = 1; i <= tot; ++i) if(!cd[i]) q.push(i);\n\twhile(q.size()){\n\t\tint u = q.front(); q.pop();\n\t\tif(!nv[u].size()){\n\t\t\tc2[u] = c1[u];\n\t\t\td2[u] = d1[u];\n\t\t\tfor(auto v : vn[u]){\n\t\t\t\t--cd[v];\n\t\t\t\tif(cd[v] == 0) q.push(v);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tfor(auto v : nv[u]){\n\t\t\tif(c1[u] + c2[v] > c2[u]){\n\t\t\t\tc2[u] = c1[u] + c2[v];\n\t\t\t\td2[u] = d1[u] + d2[v];\n\t\t\t}\n\t\t\telse if(c1[u] + c2[v] == c2[u]) d2[u] = std::min(d2[u], d1[u] + d2[v]);\n\t\t}\n\t\tfor(auto v :vn[u]){\n\t\t\t--cd[v];\n\t\t\tif(cd[v] == 0) q.push(v);\n\t\t}\n\t}\n\tfor(int i = 1; i <= tot; ++i)\n\t\tif(c2[i] > a1){\n\t\t\ta1 = c2[i];\n\t\t\ta2 = d2[i];\n\t\t}\n\t\telse if(c2[i] == a1) a2 = std::min(a2, d2[i]);\n\tprintf(\"%d %lld\\n\", a1, a2);\n\treturn ;\n}\nint main(){\n\tint T = 1;\n\tscanf(\"%d\", &T);\n\twhile(T--) solve();\n\treturn 0;\n}\n\n\n\n"], "input": "", "output": "", "tags": ["dfs and similar", "dp", "dsu", "graphs", "implementation"], "dificulty": "2100", "interactive": false}