{"link": "https://codeforces.com//contest/1440/problem/E", "problemId": "798725", "problem_idx": "E", "shortId": "1440E", "contest_number": "1440", "problem_submissions": {"E": [98728391, 98730128, 98724308, 98735269, 98730903, 98733313, 98735079, 98720072, 98721791, 98776063, 98776025], "B": [98718215, 98690348, 98694152, 98694066, 98717379, 98694490, 98698050, 98691119, 98694372, 98737100, 98701238, 98693027, 98692019, 98693130, 98694602, 98691874, 98694997, 98690784], "D": [98713473, 98716992, 98721114, 98895168, 98737070], "C1": [98700917, 98704185, 98727324, 98710881, 98711510, 98720805, 98703327, 98773521, 98732444, 98719724, 98704756, 98707436, 98707143, 98709098, 98710542, 98704302, 98708466], "C2": [98700859, 98709321, 98775076, 98710936, 98720737, 98774165, 98704870, 98707384, 98707212, 98709164, 98710454, 98714510, 98708395], "A": [98687569, 98688718, 98687545, 98693499, 98688756, 98688775, 98687763, 98689068, 98687766, 98699186, 98688328, 98687540, 98687537, 98688127, 98688428, 98687491, 98687961]}, "name": "E. Greedy Shopping", "statement": "You are given an array a_1, a_2,\r\nldots, a_n of integers. This array is .Let\u2019s consider a line with n\r\nshops. The shops are numbered with integers from 1 to n from left to\r\nright. The cost of a meal in the i-th shop is equal to a_i.You should\r\nprocess q queries of two types: : for each shop 1\r\nleq i\r\nleq x set a_{i} = max(a_{i}, y). : let\u2019s consider a hungry man with y\r\nmoney. He visits the shops from x-th shop to n-th and if he can buy a\r\nmeal in the current shop he buys one item of it. Find how many meals he\r\nwill purchase. The man can buy a meal in the shop i if he has at least\r\na_i money, and after it his money decreases by a_i.\r\n", "solutions": ["#ifdef DEBUG\n#define _GLIBCXX_DEBUG\n#endif\n//#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long double ld;\ntypedef long long ll;\nconst int maxN = 2e5 + 10;\nint n, q;\nint a[maxN];\nll t[4 * maxN];\nint mn[4 * maxN];\nint cnt[4 * maxN];\nint lazy[4 * maxN];\nint mx[4 * maxN];\nvoid merge(int v) {\n    mn[v] = min(mn[2 * v], mn[2 * v + 1]);\n    mx[v] = max(mx[2 * v], mx[2 * v + 1]);\n    t[v] = t[2 * v] + t[2 * v + 1];\n}\nvoid apply(int v, int x) {\n    lazy[v] = x;\n    mn[v] = x;\n    mx[v] = x;\n    t[v] = 1LL * cnt[v] * x;\n}\nvoid push(int v, int tl, int tr) {\n    if (tl != tr && lazy[v] != 0) {\n        apply(2 * v, lazy[v]);\n        apply(2 * v + 1, lazy[v]);\n    }\n    lazy[v] = 0;\n}\nvoid build(int v, int tl, int tr) {\n    if (tl == tr) {\n        mn[v] = a[tl];\n        mx[v] = a[tl];\n        t[v] = a[tl];\n        cnt[v] = 1;\n        return;\n    }\n    int tm = (tl + tr) / 2;\n    build(2 * v, tl, tm);\n    build(2 * v + 1, tm + 1, tr);\n    cnt[v] = tr - tl + 1;\n    merge(v);\n}\nvoid do_max(int v, int tl, int tr, int l, int r, int x) {\n    if (tr < l || r < tl) return;\n    if (mn[v] >= x) return;\n    if (l <= tl && tr <= r && mx[v] < x) {\n        apply(v, x);\n        return;\n    }\n    push(v, tl, tr);\n    int tm = (tl + tr) / 2;\n    do_max(2 * v, tl, tm, l, r, x);\n    do_max(2 * v + 1, tm + 1, tr, l, r, x);\n    merge(v);\n}\nint go(int v, int tl, int tr, int l, int r, int& y) {\n    push(v, tl, tr);\n    if (tl == l && tr == r) {\n        if (y >= t[v]) {\n            y -= t[v];\n            return cnt[v];\n        }\n        if (mn[v] > y) {\n            return 0;\n        }\n        int tm = (tl + tr) / 2;\n        int d1 = go(2 * v, tl, tm, l, tm, y);\n        int d2 = go(2 * v + 1, tm + 1, tr, tm + 1, r, y);\n        return d1 + d2;\n    }\n    int tm = (tl + tr) / 2;\n    if (r <= tm) {\n        return go(2 * v, tl, tm, l, r, y);\n    }\n    else if (l > tm) {\n        return go(2 * v + 1, tm + 1, tr, l, r, y);\n    }\n    else {\n        int d1 = go(2 * v, tl, tm, l, tm, y);\n        int d2 = go(2 * v + 1, tm + 1, tr, tm + 1, r, y);\n        return d1 + d2;\n    }\n}\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n//    freopen(\"input.txt\", \"r\", stdin);\n    cin >> n >> q;\n    for (int i = 1; i <= n; i++) {\n        cin >> a[i];\n    }\n    build(1, 1, n);\n    while (q--) {\n        int tp, x, y;\n        cin >> tp >> x >> y;\n        if (tp == 1) {\n            do_max(1, 1, n, 1, x, y);\n        }\n        else {\n            cout << go(1, 1, n, x, n, y) << '\\n';\n        }\n    }\n    return 0;\n}"], "input": "", "output": "", "tags": ["binary search", "data structures", "greedy"], "dificulty": "2600", "interactive": false}