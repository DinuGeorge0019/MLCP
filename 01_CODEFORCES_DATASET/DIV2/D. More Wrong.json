{
    "link": "https://codeforces.com//contest/1856/problem/D",
    "problemId": "2145355",
    "problem_idx": "D",
    "shortId": "1856D",
    "contest_number": "1856",
    "problem_submissions": {
        "E2": [
            217327108,
            217341724,
            217337731,
            217337437,
            217412216,
            217338400,
            217336393,
            217345459,
            217391033,
            217321012,
            217492472,
            217488570,
            217325278,
            217439292,
            217437989,
            217363475,
            217446369,
            217445127,
            217406790
        ],
        "D": [
            217299783,
            217294842,
            217318244,
            217319013,
            217306383,
            217302272,
            217316304,
            217332681,
            217344634,
            217306374,
            217314009,
            217314765,
            217312837,
            217302425,
            217303810,
            217314415,
            217312870,
            217318456,
            217300443,
            217400494,
            217316669
        ],
        "E1": [
            217289515,
            217306137,
            217300615,
            217308752,
            217314014,
            217319703,
            217297854,
            217321288,
            217321307,
            217290094,
            217290570,
            217296889,
            217296429,
            217312238,
            217311348,
            217286339,
            217297816,
            217298120,
            217312665,
            217400516,
            217300470
        ],
        "C": [
            217279950,
            217281231,
            217291934,
            217287003,
            217296034,
            217283292,
            217292390,
            217290232,
            217308894,
            217275596,
            217275048,
            217281202,
            217279491,
            217289317,
            217288630,
            217298170,
            217285184,
            217287913,
            217284586,
            217400474,
            217290893
        ],
        "B": [
            217269320,
            217271397,
            217269501,
            217272164,
            217281399,
            217274759,
            217266730,
            217267264,
            217269590,
            217284481,
            217268556,
            217268444,
            217267764,
            217270460,
            217268264,
            217272318,
            217272448,
            217269161,
            217271865,
            217400507,
            217272774
        ],
        "A": [
            217264730,
            217266241,
            217264910,
            217266955,
            217265330,
            217267424,
            217264736,
            217264718,
            217265900,
            217267758,
            217264795,
            217265478,
            217264842,
            217265458,
            217264741,
            217264735,
            217265053,
            217264661,
            217265267,
            217400456,
            217266136
        ]
    },
    "name": "D. More Wrong",
    "statement": "The jury has hidden a permutation^\r\ndagger p of length n.In one query, you can pick two integers l and r (1\r\nle l < r\r\nle n) by paying (r - l)^2 coins. In return, you will be given the number\r\nof inversions^\r\nddagger in the subarray [p_l, p_{l + 1},\r\nldots p_r].Find the index of the maximum element in p by spending at\r\nmost 5\r\ncdot n^2 coins.: the permutation is fixed before any queries are made.^\r\ndagger A permutation of length n is an array consisting of n distinct\r\nintegers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a\r\npermutation, but [1,2,2] is not a permutation (2 appears twice in the\r\narray), and [1,3,4] is also not a permutation (n=3 but there is 4 in the\r\narray).^\r\nddagger The number of inversions in an array is the number of pairs of\r\nindices (i,j) such that i < j and a_i > a_j. For example, the array\r\n[10,2,6,3] contains 4 inversions. The inversions are (1,2),(1,3),(1,4),\r\nand (3,4).\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define ld long double\n#define ll long long int\n#define st first\n#define nd second\n#define pb push_back\n#define pii pair<int,int>\n#define mp make_pair\n\nusing namespace std;\n\nint ask(int l, int r){\n    cout << \"? \" << l << \" \" << r << endl;\n    fflush(stdout);\n    int ans; cin >> ans;\n    return ans;\n}\n\nint wrap(int l, int r){\n    if(l == r) return 0;\n    return ask(l, r);\n}\n\nint n;\n\nint go(int from, int to){\n    if(from == to) return from;\n    int mid = (from + to) / 2;\n    int L = go(from, mid);\n    int R = go(mid + 1, to);\n    int iv1 = wrap(L + 1, R);\n    int iv2 = wrap(L, R);\n    if(iv2 - iv1 == (R - (L + 1) + 1)) return L;\n    return R;\n}\n\nvoid solve(){\n    cin >> n;\n    int id = go(1, n);\n    cout << \"! \" << id << endl;\n    fflush(stdout);\n}\n\nint main(){\n    ios_base::sync_with_stdio(0); cin.tie(0);\n\n    int tt = 1;\n    cin >> tt;\n    while(tt--) solve();\n\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "divide and conquer",
        "interactive"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. More Wrong.json",
    "editorial_link": "https://codeforces.com//blog/entry/119058",
    "editorial": "Let be be the number of inversions in the subarray . If , we have ,\r\notherwise, is equal to the result of the query .Let calculate the index\r\nof the maximum value in . If , we have .Suppose . Let and , where .\r\nLet\u00e2\u0080\u0099s compare and . If they are equal, is greater than all the elements\r\nin the subarray , so .If , is not greater that all the elements in the\r\nsubarray , and thus, the maximum on the whole subarray is , so .Note\r\nthat the case is impossible, since all inversions in the subarray remain\r\nas inversions for the subarray . To find the values of and , we will use\r\ncoins.Let be the number of coins needed to find the maximum on a\r\nsubarray of length . We will prove by induction that for all natural\r\n.Base case: , .Induction step: let . From the statements above, we have:\r\nThus, to calculate , the answer to our problem, we will use coins, which\r\ncomfortably fits into the problem\u00e2\u0080\u0099s coin limit.Complexity:\r\n"
}