{"link": "https://codeforces.com//contest/362/problem/D", "problemId": "3972", "problem_idx": "D", "shortId": "362D", "contest_number": "362", "problem_submissions": {"D": [5106574, 5109805, 5108707, 5110095, 5109823, 5107984, 5114349, 5146913], "C": [5103024, 5102004, 5102280, 5104232, 5104539, 5104677, 5106034, 5103492, 5106177, 5103173, 5110444, 5105776, 5106214, 5105579, 5106217, 5104642], "A": [5100714, 5100012, 5099653, 5099996, 5099930, 5099251, 5099198, 5105643, 5100062, 5106330, 5099189, 5101295, 5100008, 5100185, 5101540, 5101308], "B": [5099807, 5109634, 5098724, 5099026, 5100692, 5100418, 5100315, 5100379, 5098852, 5099011, 5103916, 5100105, 5100650, 5101467, 5105783, 5102571, 5102169], "E": [5106815, 5107748, 5110196]}, "name": "D. Fools and Foolproof Roads", "statement": "You must have heard all about the Foolland on your Geography lessons.\r\nSpecifically, you must know that federal structure of this country has\r\nbeen the same for many centuries. The country consists of cities, some\r\npairs of cities are connected by bidirectional roads, each road is\r\ndescribed by its length .The fools lived in their land joyfully, but a\r\nrecent revolution changed the king. Now the king is Vasily the Bear.\r\nVasily divided the country cities into regions, so that any two cities\r\nof the same region have a path along the roads between them and any two\r\ncities of different regions don\u2019t have such path. Then Vasily decided to\r\nupgrade the road network and construct exactly new roads in the country.\r\nConstructing a road goes like this: We choose a pair of cities , that\r\nwill be connected by a new road (at that, it is possible that there\r\nalready is a road between these cities). We define the length of the new\r\nroad: if cities , belong to distinct regions, then the length is\r\ncalculated as ( the total length of all roads that exist in the linked\r\nregions), otherwise we assume that the length equals . We build a road\r\nof the specified length between the chosen cities. If the new road\r\nconnects two distinct regions, after construction of the road these\r\nregions are combined into one new region. Vasily wants the road\r\nconstructing process to result in the country that consists exactly of\r\nregions. Your task is to come up with such road constructing plan for\r\nVasily that it meets the requirement and minimizes the total length of\r\nthe built roads.\r\n", "solutions": ["#include <cstdio>\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <stack>\n#include <queue>\n#include <list>\n#include <map>\n#include <set>\n#include <stdlib.h>\n#include <sstream>\n#include <assert.h>\n#include <complex>\n\n#include <time.h>\n#pragma comment(linker, \"/STACK:20000000\")\n\n#define fr(i,a,b) for(int i=(int)(a);i<=(int)(b);i++)\n#define fd(i,a,b) for(int i=(int)(a);i>=(int)(b);i--)\n#define mp make_pair\n#define pb push_back\n#define ll long long\n\nusing namespace std;\n\nint ri(){int x;scanf(\"%d\",&x);return x;}\nll rll(){ll x;scanf(\"%lld\",&x);return x;}\n\nint parent[100500];\n#define rank ldksfksda\nint rank[100500];\nll len[100500];\n\nint get_parent(int v)\n{\n\tif (v == parent[v])\n\t\treturn v;\n\treturn parent[v] = get_parent(parent[v]);\n}\n\nbool uni(int a,int b)\n{\n\ta = get_parent(a);\n\tb = get_parent(b);\n\tif (a != b)\n\t{\n\t\tif (rank[a] > rank[b])\n\t\t\trank[a] += rank[b],len[a] += len[b],parent[b] = a;\n\t\telse\n\t\t\trank[b] += rank[a],len[b] += len[a],parent[a] = b;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nvector<vector<pair<int,ll> > > graph;\n\nbool used[100500];\nll nowlen = 0;\nint ot = 0;\n\nvoid go(int v)\n{\n\tused[v] = true;\n\tuni(ot,v);\n\tfor(int i = 0;i < graph[v].size();i++)\n\t{\n\t\tint to = graph[v][i].first;\n\t\tll w = graph[v][i].second;\n\t\tnowlen += w;\n\t\tif (!used[to])\n\t\t\tgo(to);\n\t}\n}\n\nvoid solve()\n{\n\tint n = ri(),m = ri(),p = ri(),q = ri();\n\tgraph.resize(n + 1);\n\tfr(i,1,n)\n\t\tparent[i] = i,rank[i] = 1,len[i] = 0;\n\tfr(i,1,m)\n\t{\n\t\tint a = ri(),b = ri(),l = ri();\n\t\tgraph[a].pb(mp(b,l));\n\t\tgraph[b].pb(mp(a,l));\n\t}\n\tset<pair<ll,int> > st;\n\tfr(i,1,n)\n\t\tif (!used[i])\n\t\t{\n\t\t\tot = i;\n\t\t\tnowlen = 0;\n\t\t\tgo(i);\n\t\t\tnowlen /= 2LL;\n\t\t\tlen[get_parent(i)] = nowlen;\n\t\t\tst.insert(mp(nowlen,ot));\n\t\t}\n\tif (st.size() < q)\n\t{\n\t\tcout << \"NO\" << endl;\n\t\treturn;\n\t}\n\tif (st.size() == q && n == 1 && p)\n\t{\n\t\tcout << \"NO\" << endl;\n\t\treturn;\n\t}\n\tvector<pair<int,int> > path;\n\twhile(st.size() > q)\n\t{\n\t\tp--;\n\t\tint a = st.begin()->second;\n\t\tll lena = st.begin()->first;\n\t\tst.erase(st.begin());\n\t\tint b = st.begin()->second;\n\t\tll lenb = st.begin()->first;\n\t\tst.erase(st.begin());\n\t\tll temp = min(1000000000LL,lena + lenb + 1);\n\t\tuni(a,b);\n\t\tpath.pb(mp(a,b));\n\t\ta = get_parent(a);\n\t\tlen[a] += temp;\n\t\tst.insert(mp(len[a],a));\n\t}\n\tif (p < 0)\n\t{\n\t\tcout << \"NO\" << endl;\n\t\treturn;\n\t}\n\tif (p && q == n)\n\t{\n\t\tcout << \"NO\" << endl;\n\t\treturn;\n\t}\n\tfr(i,1,n)\n\t{\n\t\tint v = get_parent(i);\n\t\tif (i != v)\n\t\t{\n\t\t\twhile(p)\n\t\t\t\tpath.pb(mp(i,v)),p--;\n\t\t\tbreak;\n\t\t}\n\t}\n\tcout << \"YES\" << endl;\n\tfr(i,0,(int)path.size() - 1)\n\t\tcout << path[i].first << ' ' << path[i].second << endl;\n\n}\n\nint main()\n{\n\t#ifndef ONLINE_JUDGE\n\t\tfreopen(\"C:/Users/CleRIC/Desktop/\u0423\u043d\u0438\u0432\u0435\u0440/acm.timus.ru/input.txt\",\"rt\",stdin);\n\t\tfreopen(\"C:/Users/CleRIC/Desktop/\u0423\u043d\u0438\u0432\u0435\u0440/acm.timus.ru/output.txt\",\"wt\",stdout);\n\t#else\n\t\t//freopen(\"cubroot.in\",\"rt\",stdin);\n\t\t//freopen(\"cubroot.out\",\"wt\",stdout);\n\t#endif\n\n\tsolve();\n\n\t#ifndef ONLINE_JUDGE\n\t\tprintf(\"\\n\\ntime-%.3lf\",clock()*1e-3);\n\t#endif\n\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["data structures", "dfs and similar", "dsu", "graphs", "greedy"], "dificulty": "2100", "interactive": false}