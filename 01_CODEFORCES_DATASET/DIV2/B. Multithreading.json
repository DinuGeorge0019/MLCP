{
    "link": "https://codeforces.com//contest/270/problem/B",
    "problemId": "2573",
    "problem_idx": "B",
    "shortId": "270B",
    "contest_number": "270",
    "problem_submissions": {
        "E": [
            3056054,
            3058059,
            3068984,
            3080996
        ],
        "D": [
            3050127,
            3055561,
            3050397,
            3049548,
            3052822,
            3053009,
            3054445,
            3053861,
            3054191,
            3055863,
            3055631,
            3055839,
            3055560,
            3054894,
            3056305,
            3055011,
            3055694,
            3057529
        ],
        "B": [
            3048641,
            3045871,
            3045836,
            3047541,
            3048502,
            3048657,
            3047926,
            3048630,
            3048541,
            3047300,
            3048508,
            3046687,
            3050138,
            3050574,
            3048964,
            3050600,
            3048557,
            3052052
        ],
        "C": [
            3047282,
            3051469,
            3048138,
            3054706,
            3050612,
            3051213,
            3050203,
            3052136,
            3050827,
            3049962,
            3053006,
            3051668,
            3051745,
            3053806,
            3052573,
            3052416,
            3053557,
            3053872,
            3049732
        ],
        "A": [
            3045411,
            3045427,
            3045431,
            3045729,
            3045456,
            3045883,
            3045584,
            3046227,
            3045772,
            3045573,
            3046141,
            3045605,
            3046597,
            3045891,
            3046067,
            3045859,
            3045602,
            3045847
        ]
    },
    "name": "B. Multithreading",
    "statement": "Emuskald is addicted to Codeforces, and keeps refreshing the main page\r\nnot to miss any changes in the \"recent actions\" list. He likes to read\r\nthread conversations where each thread consists of multiple\r\nmessages.Recent actions shows a list of different threads ordered by the\r\ntime of the latest message in the thread. When a new message is posted\r\nin a thread that thread jumps on the top of the list. No two messages of\r\ndifferent threads are ever posted at the same time.Emuskald has just\r\nfinished reading all his opened threads and refreshes the main page for\r\nsome more messages to feed his addiction. He notices that no new threads\r\nhave appeared in the list and at the -th place in the list there is a\r\nthread that was at the -th place before the refresh. He doesn\u2019t want to\r\nwaste any time reading old messages so he wants to open only threads\r\nwith new messages.Help Emuskald find out the number of threads that have\r\nnew messages. A thread surely has a new message if there is no such\r\nsequence of thread updates (posting messages) that both conditions hold:\r\nthread is not updated (it has no new messages); the list order 1, 2,\r\n..., changes to , , ..., .\r\n",
    "solutions": [
        "#include<stdio.h>\n#include<iostream>\n#include<string.h>\n#include<stdlib.h>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n#define fr(i,n) for(int i=0;i<n;i++)\n#define fo(i,n) for(int i=1;i<=n;i++)\n#define fe(i,n) for(__typeof(n.begin()) i=n.begin();i!=n.end();i++)\nint n,z;\nint a[100020];\nint main()\n{\n\tcin>>n;\n\tfor(int i=0;i<n;i++)\n\t\tcin>>a[i];\n\tint t=n;\n\tfor(int i=n;i--;)\n\t{\n\t\tif(a[i]>t)\n\t\t{\n\t\t\tprintf(\"%d\",i+1);\n\t\t\treturn 0;\n\t\t}\n\t\telse\n\t\t\tt=a[i];\n\t}\n\tputs(\"0\");\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "data structures",
        "greedy",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Multithreading.json",
    "editorial_link": "https://codeforces.com//blog/entry/6596",
    "editorial": "Problem\nIn this problem we are asked to find the number of n-permutation elements that definitely have been moved after performing any sequence of move-to-front element operations. Equally, we should find the maximum possible number of elements that could have not been moved.\n\nSolution\nIf some ai is greater than ai?+?1, it is clear that ai definitely contains a new message because the order of these two elements has changed. Let the last such element be ak. Then all of the elements ak?+?1, ak?+?2, ..., an can contain no new messages, since their order has not changed. The answer to the problem is n?-?k. If there is no such ak the order hasn\u0092t changed at all and there may be no new messages."
}