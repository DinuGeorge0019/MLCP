{
    "link": "https://codeforces.com//contest/937/problem/C",
    "problemId": "159983",
    "problem_idx": "C",
    "shortId": "937C",
    "contest_number": "937",
    "problem_submissions": {
        "B": [
            35696794,
            35702864,
            35692823,
            35690729,
            35694513,
            35690544,
            35690257,
            35698410,
            35691221,
            35690892,
            35691375,
            35702558,
            35696021,
            35691603,
            35692248,
            35693511,
            35689627,
            35691074
        ],
        "D": [
            35692697,
            35713147,
            35697020,
            35698388,
            35700044,
            35703123,
            35701138,
            35701740,
            35699988,
            35703153,
            35699440,
            35715758,
            35702654,
            35703145,
            35702583,
            35705096,
            35704134,
            35704747
        ],
        "C": [
            35687317,
            35691596,
            35689373,
            35694359,
            35690896,
            35693744,
            35693408,
            35694406,
            35694106,
            35697537,
            35696111,
            35691520,
            35694573,
            35696303,
            35696728,
            35696658,
            35694289,
            35696468,
            35696813
        ],
        "A": [
            35686618,
            35687353,
            35687073,
            35686895,
            35689698,
            35687175,
            35687230,
            35687897,
            35688429,
            35688503,
            35687868,
            35688027,
            35686930,
            35689664,
            35687167,
            35686480,
            35686539
        ],
        "E": [
            35699925,
            35705854,
            35766833,
            35707300,
            35705001,
            35707037,
            35726109,
            35750977,
            35707021
        ]
    },
    "name": "C. Save Energy ",
    "statement": "Julia is going to cook a chicken in the kitchen of her dormitory. To\r\nsave energy, the stove in the kitchen automatically turns off after\r\nminutes after turning on.During cooking, Julia goes to the kitchen every\r\nminutes and turns on the stove if it is turned off. While the cooker is\r\nturned off, it stays warm. The stove switches on and off instantly.It is\r\nknown that the chicken needs minutes to be cooked on the stove, if it is\r\nturned on, and minutes, if it is turned off. You need to find out, how\r\nmuch time will Julia have to cook the chicken, if it is considered that\r\nthe chicken is cooked evenly, with constant speed when the stove is\r\nturned on and at a constant speed when it is turned off.\r\n",
    "solutions": [
        "//\n \n#include <iostream>\n#include <string>\n#include <cmath>\n#include <vector>\n#include <algorithm>\n#include <iterator>\n#include <map>\n#include <unordered_map>\n#include <unordered_set>\n#include <set>\n#include <queue>\n#include <deque>\n#include <stack>\n#include <list>\n#include <iomanip>\n#include <fstream>\n \nusing namespace std;\n \ntypedef pair <int, int> pii;\ntypedef pair <long long, long long> pll;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\n \n#define endl \"\\n\"\n#define mp make_pair\n \nconst int mod = 1000000007;\nconst int INF = 1000000000;\n \nstruct Item {\n    int unique, endItem, endCount;\n    Item *next[26];\n \n    Item() {\n        unique = 1;\n        endItem = endCount = 0;\n \n        for (int i = 0; i < 26; i++)\n            next[i] = nullptr;\n    }\n};\n \nll k, d, t, res, stp;\nld result;\n \nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(NULL);\n \n    cin >> k >> d >> t;\n \n    t <<= 1;\n    stp = (ll)sqrt((ld)t);\n    //cout << stp << endl;\n    result += (t / ((k << 1) + (d - k % d) % d)) * (k + (d - k % d) % d);\n    t = t % ((k << 1) + (d - k % d) % d);\n \n \tif (t > (k << 1))\n \t\tresult += t - k;\n \telse\n \t\tresult += (ld)t * 0.5;\n \n    cout.precision(9);\n \n    cout << fixed << result << endl;\n \n    return 0;\n}\n "
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "1700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Save Energy .json",
    "editorial_link": "https://codeforces.com//blog/entry/58056",
    "editorial": "There are repeated segments in the cooking process, that are between two consecutive moments, when Julia turns the stove on. Let's call such segment a period. Consider two cases:\n\nIf k???d, when Julia comes, the stove is always off, that means period?=?d.\nIn other case Julia comes to the kitchen p times between two turnings on, when the stove is still on, and does nothing. In this case p is a number such that p·d?<?k  the stove is on, (p?+?1)·d???k  the stove is off. Then the period is (p?+?1)·d and p is equal to ? k?/?d??-?1. So period?=?? k?/?d?·d.\nLet's say the chicken consists of 2t independent parts. On the working stove two parts of the chicken are prepared per minute. If the stove is off, one part is prepared. Let's find the number of prepared parts during one period: cooking?=?2k?+?(period?-?k)?=?k?+?period and we need num?=?? 2t?/?cooking? whole periods. After that we still have carry?=?2t?-?num·cooking parts left to cook.\nIf carry?>?2k, chicken will be prepared after carry?-?k minutes: k minutes the stove will be on and carry?-?2k it will be off. Thus the answer is num·period?+?carry?-?k\nOtherwise carry parts become ready after carry?/?2 minutes and answer is num·period?+?carry?/?2.",
    "hint": []
}