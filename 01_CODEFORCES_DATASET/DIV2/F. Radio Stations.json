{
    "link": "https://codeforces.com//contest/1215/problem/F",
    "problemId": "412396",
    "problem_idx": "F",
    "shortId": "1215F",
    "contest_number": "1215",
    "problem_submissions": {
        "F": [
            60620224,
            60633144,
            60628796,
            62102987,
            60657759
        ],
        "E": [
            60614830,
            60620100,
            60624259,
            60618193,
            60620939,
            60619722,
            60618555,
            60619211,
            60623129,
            60624049,
            60623962,
            60621062,
            60625235,
            60625015,
            60623138,
            60622255,
            60623519,
            60627768,
            60628419,
            60622708
        ],
        "D": [
            60613485,
            60617335,
            60619535,
            60616864,
            60615351,
            60616017,
            60622796,
            60619079,
            60617400,
            60616935,
            60621165,
            60617806,
            60616391,
            60616135,
            60618699,
            60620021,
            60619257,
            60623666,
            60614165,
            60618490
        ],
        "C": [
            60611883,
            60614880,
            60616986,
            60613872,
            60612356,
            60613808,
            60613237,
            60615096,
            60615058,
            60613116,
            60615948,
            60615995,
            60614183,
            60613610,
            60614082,
            60612548,
            60614439,
            60618385,
            60611650,
            60615653
        ],
        "B": [
            60609609,
            60611892,
            60614411,
            60610320,
            60609887,
            60611712,
            60610288,
            60610941,
            60611470,
            60610159,
            60611942,
            60611586,
            60611453,
            60611164,
            60611443,
            60609621,
            60611512,
            60611710,
            60609773,
            60612774
        ],
        "A": [
            60609389,
            60610541,
            60610424,
            60609620,
            60609428,
            60610648,
            60609442,
            60611977,
            60609576,
            60609429,
            60610464,
            60609932,
            60609744,
            60609643,
            60609965,
            60616895,
            60610358,
            60609768,
            60609404,
            60611551
        ]
    },
    "name": "F. Radio Stations",
    "statement": "In addition to complaints about lighting, a lot of complaints about\r\ninsufficient radio signal covering has been received by Bertown city\r\nhall recently. n complaints were sent to the mayor, all of which are\r\nsuspiciosly similar to each other: in the i-th complaint, one of the\r\nradio fans has mentioned that the signals of two radio stations x_i and\r\ny_i are not covering some parts of the city, and demanded that the\r\nsignal of of these stations can be received in the whole city.Of cousre,\r\nthe mayor of Bertown is currently working to satisfy these complaints. A\r\nnew radio tower has been installed in Bertown, it can transmit a signal\r\nwith any integer power from 1 to M (let’s denote the signal power as f).\r\nThe mayor has decided that he will choose a set of radio stations and\r\nestablish a contract with every chosen station. To establish a contract\r\nwith the i-th station, the following conditions should be met: the\r\nsignal power f should be not less than l_i, otherwise the signal of the\r\ni-th station won’t cover the whole city; the signal power f should be\r\nnot greater than r_i, otherwise the signal will be received by the\r\nresidents of other towns which haven’t established a contract with the\r\ni-th station. All this information was already enough for the mayor to\r\nrealise that choosing the stations is hard. But after consulting with\r\nspecialists, he learned that some stations the signals of some stations\r\nmay interfere with each other: there are m pairs of stations (u_i, v_i)\r\nthat use the same signal frequencies, and for each such pair it is\r\nimpossible to establish contracts with both stations. .The mayor finds\r\nit really hard to analyze this situation, so he hired you to help him.\r\nYou have to choose signal power f and a set of stations to establish\r\ncontracts with such that: all complaints are satisfied (formally, for\r\nevery i\r\nin [1, n] the city establishes a contract either with station x_i, or\r\nwith station y_i); no two chosen stations interfere with each other\r\n(formally, for every i\r\nin [1, m] the city establish a contract either with station u_i, or with\r\nstation v_i); for each chosen station, the conditions on signal power\r\nare met (formally, for each chosen station i the condition l_i\r\nle f\r\nle r_i is met).\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define ll long long\n#define uint unsigned\n#define ull unsigned ll\n#define pii pair<int,int>\n#define pll pair<ll,ll>\n#define PB push_back\n#define fi first\n#define se second\n#define For(i,j,k) for (int i=(int)(j);i<=(int)(k);i++)\n#define Rep(i,j,k) for (int i=(int)(j);i>=(int)(k);i--)\n#define CLR(a,v) memset(a,v,sizeof(a))\n#define CPY(a,b) memcpy(a,b,sizeof(a))\nusing namespace std;\nconst int N=2000005;\nint n,p,M,m,nd;\nstruct edge{\n\tint to,next;\n}e[N*2];\nint head[N],tot,T,top;\nint dfn[N],low[N],sta[N];\nint be[N],vis[N],blk;\nint L[N],R[N],q[N];\nvector<int> veci[N],vecQ[N];\nvoid add(int x,int y){\n\te[++tot]=(edge){y,head[x]};\n\thead[x]=tot;\n}\nvoid tarjan(int x){\n\tlow[x]=dfn[x]=++T;\n\tvis[x]=1; sta[++top]=x;\n\tfor (int i=head[x];i;i=e[i].next)\n\t\tif (!dfn[e[i].to]){\n\t\t\ttarjan(e[i].to);\n\t\t\tlow[x]=min(low[x],low[e[i].to]);\n\t\t}\n\t\telse if (vis[e[i].to])\n\t\t\tlow[x]=min(low[x],dfn[e[i].to]);\n\tif (low[x]==dfn[x]){\n\t\tblk++;\n\t\tint y=19260817;\n\t\tfor (;y!=x;){\n\t\t\ty=sta[top--];\n\t\t\tvis[y]=0; be[y]=blk;\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d%d%d\",&n,&p,&M,&m);\n\tFor(i,1,n){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x+p,y); add(y+p,x);\n\t}\n\tFor(i,1,p){\n\t\tscanf(\"%d%d\",&L[i],&R[i]);\n\t\tveci[R[i]].PB(i);\n\t\tvecQ[L[i]].PB(i);\n\t}\n\tFor(i,1,m){\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd(x,y+p); add(y,x+p);\n\t}\n\tnd=p*2;\n\tint now1=++nd;\n\tint now2=++nd;\n\tFor(i,1,M){\n\t\tFor(j,0,vecQ[i].size()-1){\n\t\t\tadd(vecQ[i][j],now1);\n\t\t\tadd(now2,vecQ[i][j]+p);\n\t\t}\n\t\tFor(j,0,veci[i].size()-1){\n\t\t\t++nd;\n\t\t\tadd(nd,now1);\n\t\t\tadd(nd,veci[i][j]+p);\n\t\t\tnow1=nd;\n\t\t\t++nd;\n\t\t\tadd(now2,nd);\n\t\t\tadd(veci[i][j],nd);\n\t\t\tnow2=nd;\n\t\t}\n\t}\n\tFor(i,1,2*p)\n\t\tif (!dfn[i])\n\t\t\ttarjan(i);\n\tFor(i,1,p)\n\t\tif (be[i]==be[i+p])\n\t\t\treturn puts(\"-1\"),0;\n\tint l=1,r=M;\n\tFor(i,1,p)\n\t\tif (be[i]<be[i+p]){\n\t\t\tq[++*q]=i;\n\t\t\tl=max(l,L[i]);\n\t\t\tr=min(r,R[i]);\n\t\t}\n\tprintf(\"%d %d\\n\",*q,l);\n\tFor(i,1,*q) printf(\"%d \",q[i]);\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "2-sat"
    ],
    "dificulty": "2700",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Radio Stations.json",
    "editorial_link": "https://codeforces.com//blog/entry/69815",
    "editorial": "Letâs try to solve the problem without any constraints on (we just need\r\nto choose a set of stations that satisfies all the complaints and\r\ncontains no forbidden pair). We can see that this is an instance of\r\n2-SAT: we can convert it into a logical expression that is a conjunction\r\nof some clauses, and each clause contains exactly two variables (maybe\r\nnegated), we have to assign some values to all variables so that this\r\nexpression is true. The -th variable if we include the -th station in\r\nour answer, or otherwise. We can solve this problem in linear time by\r\nbuilding an implication graph and finding strongly connected components\r\nin it.If the constraints were lower, we could iterate on and initially\r\nset all variables corresponding to stations we canât use with fixed to .\r\nBut this solution is quadratic, so we have to include into our original\r\n2-SAT problem.Letâs introduce additional variables, the -th of them\r\ncorresponding to the fact \"\". Add clause of the form \" OR NOT \" into our\r\nconjunction. The prefix of additional variables which are equal to can\r\nbe transformed into the value or we should use, and vice versa. If we\r\nintroduce these variables, the constraints on that are implied by some\r\nstation can be modeled with two additiona clauses: \" OR station is not\r\nused\" and \"NOT OR station is not used\". So we get a linear solution\r\n(though with a noticeable constant factor).\r\n",
    "hint": []
}