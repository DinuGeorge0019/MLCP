{
    "link": "https://codeforces.com//contest/1642/problem/B",
    "problemId": "1306239",
    "problem_idx": "B",
    "shortId": "1642B",
    "contest_number": "1642",
    "problem_submissions": {
        "E": [
            147461190,
            147448894,
            147463582,
            147629005,
            147463721,
            147465007,
            147464536,
            147464772,
            154238571,
            147442248,
            147468697,
            147546721,
            147530401
        ],
        "D": [
            147438364,
            147485650,
            147449537,
            147450562,
            147452894,
            147455461,
            147452625,
            147459786,
            147436803,
            147442745,
            147526042,
            147444306,
            147445760,
            147446955,
            147445886,
            147445039,
            147443394,
            147443106,
            147445514,
            147441961
        ],
        "B": [
            147422743,
            147420129,
            147417727,
            147418273,
            147417851,
            147419235,
            147432654,
            147420007,
            147417444,
            147417393,
            147418769,
            147419164,
            147418158,
            147418261,
            147419265,
            147416406,
            147420612,
            147425669,
            147421032,
            147423752
        ],
        "C": [
            147419008,
            147423535,
            147421085,
            147425938,
            147438330,
            147422534,
            147436627,
            147425010,
            147420010,
            147419556,
            147423431,
            147424779,
            147424498,
            147421790,
            147424573,
            147422658,
            147423818,
            147428109,
            147426206,
            147427103
        ],
        "A": [
            147415594,
            147416949,
            147415861,
            147433429,
            147415090,
            147426989,
            147415984,
            147416265,
            147415834,
            147415031,
            147415872,
            147416127,
            147415441,
            147414768,
            147415249,
            147414961,
            147417533,
            147420604,
            147417311,
            147415231
        ],
        "F": [
            147464749,
            147653708,
            147464855,
            147521397
        ]
    },
    "name": "B. Power Walking",
    "statement": "Sam is a kindergartener, and there are n children in his group. He\r\ndecided to create a team with some of his children to play \"brawl:go\r\n2\".Sam has n power-ups, the i-th has type a_i. A child\u2019s strength is\r\nequal to the number of types among power-ups he has.For a team of size\r\nk, Sam will distribute all n power-ups to k children in such a way that\r\neach of the k children receives at least one power-up, and each power-up\r\nis given to someone.For each integer k from 1 to n, find the sum of\r\nstrengths of a team of k children Sam can get.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\nusing namespace std;\n#define inline __attribute((always_inline))\n\n#define cmax(x,y) x=max(x,y)\n#define cmin(x,y) x=min(x,y)\n#define eb emplace_back\n#define MP make_pair\n#define fi first\n#define se second\n\ntypedef long long ll;\ntypedef pair<int,int> Pair;\n\ninline ll read(){\n\tll x=0,c; bool f=0;\n\tfor (;(c=getchar())<'0'||c>'9';f|=c=='-');\n\tfor (;c>='0'&&c<='9';c=getchar()) x=x*10+c-48;\n\treturn f?-x:x;\n}\n\n#define N 300005\n\nint n;\nint a[N];\n\nvoid init(){\n\tn=read();\n\tfor (int i=1;i<=n;i++) a[i]=read();\n}\n\nvoid solve(){\n\tsort(a+1,a+1+n);\n\tint ans=0;\n\tfor (int i=1;i<=n;i++) if (a[i]!=a[i-1]) ans++;\n\tfor (int i=1;i<=ans;i++) printf(\"%d \",ans);\n\tfor (int i=ans+1;i<=n;i++) printf(\"%d \",i);\n\tputs(\"\");\n}\n\nint main(){\n\t//freopen(\"1.in\",\"r\",stdin);\n\t//freopen(\"1.out\",\"w\",stdout);\n\tint cas=read();\n\tfor (;cas--;){\n\t\t//printf(\"Case #%d: \",v);\n\t\tinit();\n\t\tsolve();\n\t}\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Power Walking.json",
    "editorial_link": "https://codeforces.com//blog/entry/100249",
    "editorial": "It is quite easy to understand that every multiset\u00e2\u0080\u0099s power is at\r\nleast 1. The final answer is at east the number of distict integers in\r\nthe multiset. It is possible to proof that the answer to the problem for\r\nis equal to , where is the number of distinct integers.If the number of\r\ndistinct interest is equal to , is is obvious that we can create\r\nmultisets, -th multiset Will only contain integers which are equal to .\r\nWe can create multisets of size 1. The answer in this case is equal to\r\n.If the number of distinct integers is at least , we can divide the\r\nintegers into groups in such way that for each all occurrences of are\r\nlocated in the same multiset. The answer in this case is equal to .In\r\nthe first case the answer is , in the second case . Thus, the answer is\r\nequal to .\r\n"
}