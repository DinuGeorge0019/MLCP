{
    "link": "https://codeforces.com//contest/389/problem/E",
    "problemId": "6404",
    "problem_idx": "E",
    "shortId": "389E",
    "contest_number": "389",
    "problem_submissions": {
        "E": [
            5882910,
            5882969,
            5882623,
            5886206,
            5886237,
            5881359,
            5883942,
            5881790,
            5884306,
            5884558,
            5884891,
            5884833,
            5884246,
            5880945,
            5884605,
            5886580,
            5885214
        ],
        "D": [
            5882237,
            5881458,
            5884902,
            5885057,
            5884493,
            5888919,
            5897772,
            5897726,
            49394197,
            5884093
        ],
        "C": [
            5876164,
            5877416,
            5877602,
            5880188,
            5879512,
            5878436,
            5876090,
            5875802,
            5879892,
            5879347,
            5879938,
            5880138,
            5877698,
            5882032,
            5878167,
            5879899,
            5881858,
            5880866,
            5879314
        ],
        "B": [
            5874987,
            5875378,
            5875703,
            5877586,
            5879904,
            5875848,
            5877618,
            5882807,
            5877301,
            5876662,
            5877573,
            5877789,
            5875543,
            5877904,
            5887635,
            5878765,
            5877214,
            5882962
        ],
        "A": [
            5874673,
            5874703,
            5875132,
            5876405,
            5874775,
            5878441,
            5882215,
            5875954,
            5875157,
            5875352,
            5876029,
            5874692,
            5875210,
            5881846,
            5875551,
            5874698,
            5879937
        ]
    },
    "name": "E. Fox and Card Game",
    "statement": "Fox Ciel is playing a card game with her friend Fox Jiro. There are\r\npiles of cards on the table. And there is a positive integer on each\r\ncard.The players take turns and Ciel takes the first turn. In Ciel’s\r\nturn she takes a card from the top of any non-empty pile, and in Jiro’s\r\nturn he takes a card from the bottom of any non-empty pile. Each player\r\nwants to maximize the total sum of the cards he took. The game ends when\r\nall piles become empty.Suppose Ciel and Jiro play optimally, what is the\r\nscore of the game?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\n#define FOR(i,a,b) for(int i=(a),_b=(b); i<=_b; i++)\n#define FORD(i,a,b) for(int i=(a),_b=(b); i>=_b; i--)\n#define REP(i,a) for(int i=0,_a=(a); i<_a; i++)\n\n#define DEBUG(x) { cout << #x << \" = \"; cout << x << endl; }\n#define PR(a,n) { cout << #a << \" = \"; FOR(_,1,n) cout << a[_] << ' '; cout << endl; }\n#define PR0(a,n) { cout << #a << \" = \"; REP(_,n) cout << a[_] << ' '; cout << endl; }\nusing namespace std;\n\nint n, s[111], a[111][111], z[111], nz;\n\nint main() {\n    ios :: sync_with_stdio(false);\n    while (cin >> n) {\n        int left = 0, right = 0;\n        nz = 0;\n        FOR(i,1,n) {\n            cin >> s[i];\n            FOR(j,1,s[i]) cin >> a[i][j];\n\n            for(int u = 1, v = s[i]; u < v; ++u, --v) {\n                left += a[i][u];\n                right += a[i][v];\n            }\n            if (s[i] % 2 == 1) {\n                z[++nz] = a[i][s[i]/2 + 1];\n            }\n        }\n        sort(z+1, z+nz+1);\n        int turn = 1;\n        FORD(i,nz,1) {\n            if (turn % 2 == 1) left += z[i];\n            else right += z[i];\n\n            ++turn;\n        }\n        cout << left << ' ' << right << endl;\n    }\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "implementation"
    ],
    "dificulty": "2000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Fox and Card Game.json",
    "editorial_link": "https://codeforces.com//blog/entry/10629",
    "editorial": "First letâs consider the case which all piles have even size. In this\r\ncase, we can prove: in the optimal play, Ciel will gets all top most\r\nhalf cards of each pile, and Jiro gets the remain cards. We can prove by\r\nthese facts: Ciel have a strategy to ensure she can get this outcome and\r\nJiro also have a strategy to ensure this outcome. (For Jiro this\r\nstrategy is easy: just pick the card from pile that Ciel have just\r\npicked. For Ciel itâs a little bit harder.) Why we can conclude they are\r\nboth the optimal strategy? Ciel just canât win more, because if she\r\nplayed with Jiro with above strategy, Jiro will get the bottom half of\r\neach pile. Then we come back with cases that contain odd size piles. The\r\nresult is: for odd size pile, Ciel will get the top (s-1)/2 cards and\r\nJiro will get the bottom (s-1)/2 cards. Then what about the middle one?\r\nLetâs denote S is all such middle cards. Then we define a reduced game:\r\nIn each turn, they pick one card from S. The optimal play for this game\r\nis easy: Ciel gets the max one, and Jiro gets the 2nd largest one, and\r\nCiel gets the 3rd largest one and so on. We can prove Ciel have a\r\nstrategy to get: all top half parts + cards she will get in the optimal\r\nplay in the reduced game. And Jiro also have a strategy to get: all\r\nbottom half parts + cards he will get in the optimal play in the reduced\r\ngame. And these strategy are optimal.\r\n",
    "hint": []
}