{"link": "https://codeforces.com//contest/474/problem/F", "problemId": "14850", "problem_idx": "F", "shortId": "474F", "contest_number": "474", "problem_submissions": {"F": [8116116, 8111347, 8114247, 8117109, 8119759, 8119274, 8115617, 8117848, 8117464, 8117692, 8128068, 8128022, 8117327, 8118237, 8119671, 8142598, 8120637, 8119403, 8120748, 8142553, 8142542, 8142530, 8124718], "E": [8115184, 8114217, 8112389, 8114867, 8116240, 8115244, 8120717, 8120099, 8115954, 8123772, 8128154, 8128134, 8116067, 8117086, 8119886, 8115878, 8118972, 8118469, 8118934, 8119664, 8118899, 8119466], "C": [8112567, 8114486, 8117872, 8117009, 8121035, 8124320, 8113338, 8116442, 8121988, 8120682, 8122009, 8128422, 8130552, 8113770, 8117339, 8116750], "D": [8110246, 8110989, 8115114, 8112497, 8111050, 8112447, 8109737, 8115431, 8111354, 8111585, 8113528, 8114235, 8114084, 8108822, 8113696, 8116276, 8114733, 8114795, 8112957, 8112642], "B": [8108782, 8109337, 8115774, 8108967, 8110289, 8109920, 8110734, 8108738, 8109834, 8112357, 8109436, 8112150, 8112245, 8109821, 8112135, 8108859, 8109140, 8108856, 8110418, 8108483], "A": [8107723, 8108745, 8116336, 8108373, 8107695, 8108517, 8107682, 8107784, 8107553, 8108585, 8107565, 8112928, 8110053, 8110849, 8110377, 8107596, 8107999, 8107713, 8108893, 8107595]}, "name": "F. Ant colony", "statement": "Mole is hungry again. He found one ant colony, consisting of ants,\r\nordered in a row. Each ant () has a strength .In order to make his\r\ndinner more interesting, Mole organizes a version of Hunger Games for\r\nthe ants. He chooses two numbers and () and each pair of ants with\r\nindices between and (inclusively) will fight. When two ants and fight,\r\nant gets one battle point only if divides (also, ant gets one battle\r\npoint only if divides ). After all fights have been finished, Mole makes\r\nthe ranking. An ant , with battle points obtained, is going to be freed\r\nonly if , or in other words only if it took a point in every fight it\r\nparticipated. After that, Mole eats the rest of the ants. Note that\r\nthere can be many ants freed or even none.In order to choose the best\r\nsequence, Mole gives you segments and asks for each of them how many\r\nants is he going to eat if those ants fight.\r\n", "solutions": ["#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n\nusing namespace std;\n\nconst int kMaxN = 100000;\nconst int kInf = 0x3f3f3f3f;\nint n, seq[kMaxN];\n\nstruct Info {\n    int g, m, c;\n    Info() {}\n    Info(int _g, int _m, int _c) : g(_g), m(_m), c(_c) {}\n};\n\nint gcd(int a, int b) {\n    return (b ? gcd(b, a % b) : a);\n}\n\nInfo operator+(const Info &a, const Info &b) {\n    Info c;\n    c.g = gcd(a.g, b.g);\n    if (a.m != b.m) {\n        if (a.m < b.m) {\n            c.m = a.m;\n            c.c = a.c;\n        } else {\n            c.m = b.m;\n            c.c = b.c;\n        }\n    } else {\n        c.m = a.m;\n        c.c = a.c + b.c;\n    }\n    return c;\n}\n\nstruct Node {\n    Info acc;\n    Node *son[2];\n    void update() {\n        acc = son[0]->acc + son[1]->acc;\n    }\n} nodes[kMaxN * 2 - 1], *nodeIdx = nodes, *root = NULL;\n\nNode *build(int l, int r) {\n    Node *res = nodeIdx ++;\n    if (l + 1 == r) {\n        res->acc = Info(seq[l], seq[l], 1);\n    } else {\n        int mid = (l + r) >> 1;\n        res->son[0] = build(l, mid);\n        res->son[1] = build(mid, r);\n        res->update();\n    }\n    return res;\n}\n\nInfo askOnRange(int l, int r, Node *pos, int pL, int pR) {\n    if (l >= pR || r <= pL) {\n        return Info(0, kInf, 1);\n    } else if (l <= pL && r >= pR) {\n        return pos->acc;\n    } else {\n        int mid = (pL + pR) >> 1;\n        return askOnRange(l, r, pos->son[0], pL, mid) + askOnRange(l, r, pos->son[1], mid, pR);\n    }\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 0; i < n; ++ i) scanf(\"%d\", &seq[i]);\n    root = build(0, n);\n    int m;\n    scanf(\"%d\", &m);\n    for (int l, r; m --; ) {\n        scanf(\"%d%d\", &l, &r);\n        -- l;\n        Info acc = askOnRange(l, r, root, 0, n);\n        if (acc.g == acc.m) {\n            printf(\"%d\\n\", r - l - acc.c);\n        } else {\n            printf(\"%d\\n\", r - l);\n        }\n    }\n    return 0;\n}\n"], "input": "", "output": "", "tags": ["data structures", "math", "number theory"], "dificulty": "2100", "interactive": false}