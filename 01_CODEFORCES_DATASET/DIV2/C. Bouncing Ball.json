{
    "link": "https://codeforces.com//contest/1457/problem/C",
    "problemId": "814143",
    "problem_idx": "C",
    "shortId": "1457C",
    "contest_number": "1457",
    "problem_submissions": {
        "E": [
            99868612,
            99868820,
            99868894,
            99871379,
            99876241,
            99873210,
            99873073,
            99877427,
            99875242,
            99874362,
            99880934,
            99878599,
            99880282,
            99880267,
            99880129,
            99881010,
            99881186,
            99878842,
            99883433,
            99887042
        ],
        "D": [
            99860413,
            99858501,
            99859224,
            99855503,
            99852261,
            99861676,
            99862738,
            99863057,
            99864198,
            99864361,
            99855111,
            99866971,
            99857047,
            99869259,
            99872023,
            99871057,
            99871185,
            99871389,
            99870989,
            99870957
        ],
        "C": [
            99848523,
            99846546,
            99854121,
            99849522,
            99849975,
            99852554,
            99857957,
            99855488,
            99850137,
            99854183,
            99851123,
            99848085,
            99862644,
            99857309,
            99851618,
            99858097,
            99853416,
            99850485,
            99861161,
            99863907
        ],
        "B": [
            99842172,
            99842416,
            99847160,
            99843642,
            99841920,
            99843802,
            99852704,
            99845703,
            99844331,
            99847361,
            99846671,
            99841358,
            99851090,
            99848157,
            99844121,
            99845368,
            99843677,
            99857603,
            99853155,
            99848846
        ],
        "A": [
            99839848,
            99840102,
            99841257,
            99839720,
            99841011,
            99840218,
            99839732,
            99841278,
            99840508,
            99841843,
            99839833,
            99839677,
            99846294,
            99845677,
            99840019,
            99840219,
            99840262,
            99842567,
            99843366,
            99841538
        ]
    },
    "name": "C. Bouncing Ball",
    "statement": "You\u2019re creating a game level for some mobile game. The level should\r\ncontain some number of cells aligned in a row from left to right and\r\nnumbered with consecutive integers starting from 1, and in each cell you\r\ncan either put a platform or leave it empty.In order to pass a level, a\r\nplayer must throw a ball from the left so that it first lands on a\r\nplatform in the cell p, then bounces off it, then bounces off a platform\r\nin the cell (p + k), then a platform in the cell (p + 2k), and so on\r\nevery k-th platform until it goes farther than the last cell. If any of\r\nthese cells has no platform, you can\u2019t pass the level with these p and\r\nk.You already have some level pattern a_1, a_2, a_3, ..., a_n, where a_i\r\n= 0 means there is no platform in the cell i, and a_i = 1 means there is\r\none. You want to modify it so that the level can be passed with given p\r\nand k. In x seconds you can add a platform in some empty cell. In y\r\nseconds you can remove the first cell completely, reducing the number of\r\ncells by one, and renumerating the other cells keeping their order. You\r\ncan\u2019t do any other operation. You reduce the number of cells to less\r\nthan p. What is the minimum number of seconds you need to make this\r\nlevel passable with given p and k?\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define pre(i,a,b) for(int i=a;i>=b;i--)\n#define N 100005\nusing namespace std;\nint n,k,p,f[N];char s[N];\nvoid solve(){\n\tscanf(\"%d%d%d\",&n,&p,&k);\n\tscanf(\"%s\",s+1);\n\trep(i,1,n)f[i]=s[i]=='0';\n\tpre(i,n,1)f[i]+=i+k>n?0:f[i+k];\n\tlong long ans=0x7fffffffffffffffLL;int x,y;\n\tscanf(\"%d%d\",&x,&y);\n\trep(i,p,n)ans=min(ans,1LL*(i-p)*y+1LL*f[i]*x);\n\tprintf(\"%lld\\n\",ans);\n}\nint main(){\n\tint T;scanf(\"%d\",&T);\n\twhile(T--)solve();\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "implementation"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Bouncing Ball.json",
    "editorial_link": "https://codeforces.com//blog/entry/85118",
    "editorial": "Note that instead of deletion of the first cell we can increase the value of p\n by one, these operations are equivalent. Now let's loop through the possible final values of p\n, let it be q\n (p?q?n\n). Then we need to add missing platforms in cells q\n, (q+k)\n, (q+2k)\n, and so on.\n\nLet's compute the array ci\n \u0097 the number of cells without a platform among cells i\n, (i+k)\n, (i+2k)\n, an so on. It can be computed using the method of dynamic programming, going from large i\n to small: ci=ci+k+(1?ai)\n.\n\nNow the time required to add the platforms for a given value of q\n is cq?x\n, while the time needed to increase p\n to q\n is (q?p)?y\n. The total time equals cq?x+(q?p)?y\n. We only have to choose minimum among all possible values of q\n."
}