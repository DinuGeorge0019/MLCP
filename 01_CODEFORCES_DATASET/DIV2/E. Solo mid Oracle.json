{
    "link": "https://codeforces.com//contest/1435/problem/E",
    "problemId": "773407",
    "problem_idx": "E",
    "shortId": "1435E",
    "contest_number": "1435",
    "problem_submissions": {
        "E": [
            96673338,
            96681148,
            96682797,
            96685288,
            96847098,
            96685903,
            96675878,
            96687224,
            96687243,
            96686976,
            96689725,
            96692435,
            96691487,
            96692658,
            96691299,
            96690805,
            96693692,
            96679915,
            96692643,
            96687850
        ],
        "D": [
            96666232,
            96664904,
            96669284,
            96672253,
            96669314,
            96662222,
            96670668,
            96669409,
            96677310,
            96678148,
            96672549,
            96673104,
            96674256,
            96678523,
            96677726,
            96675716,
            96674961,
            96679765,
            96674688
        ],
        "C": [
            96659129,
            96657575,
            96664731,
            96660163,
            96661902,
            96686570,
            96658550,
            96663667,
            96669546,
            96664295,
            96666298,
            96669749,
            96666819,
            96667412,
            96671053,
            96669495,
            96685954,
            96666507,
            96668496,
            96674329
        ],
        "B": [
            96653882,
            96659883,
            96653749,
            96652475,
            96653199,
            96659428,
            96653053,
            96655781,
            96654431,
            96655376,
            96655587,
            96653268,
            96655657,
            96658338,
            96657193,
            96656576,
            96657563,
            96655601,
            96656271
        ],
        "A": [
            96648730,
            96649969,
            96649216,
            96648637,
            96648957,
            96653721,
            96648796,
            96663309,
            96649948,
            96651571,
            96648683,
            96648672,
            96658175,
            96649723,
            96648927,
            96651329,
            96649879,
            96649976,
            96675513
        ]
    },
    "name": "E. Solo mid Oracle",
    "statement": "Meka-Naruto plays a computer game. His character has the following\r\nability: given an enemy hero, deal a instant damage to him, and then\r\nheal that enemy b health points at the end of every second, for exactly\r\nc seconds, starting one second after the ability is used. That means\r\nthat if the ability is used at time t, the enemy\u2019s health decreases by a\r\nat time t, and then increases by b at time points t + 1, t + 2, ..., t +\r\nc due to this ability.The ability has a cooldown of d seconds, i. e. if\r\nMeka-Naruto uses it at time moment t, next time he can use it is the\r\ntime t + d. Please note that he can only use the ability at integer\r\npoints in time, so all changes to the enemy\u2019s health also occur at\r\ninteger times only.The effects from different uses of the ability may\r\nstack with each other; that is, the enemy which is currently under k\r\nspells gets k\r\ncdot b amount of heal this time. Also, if several health changes occur\r\nat the same moment, they are all counted at once.Now Meka-Naruto wonders\r\nif he can kill the enemy by just using the ability each time he can\r\n(that is, every d seconds). The enemy is killed if their health points\r\nbecome 0 or less. Assume that the enemy\u2019s health is not affected in any\r\nway other than by Meka-Naruto\u2019s character ability. What is the maximal\r\nnumber of health points the enemy can have so that Meka-Naruto is able\r\nto kill them?\r\n",
    "solutions": [
        "#include <iostream>\n#include <algorithm>\n#include <string>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <queue>\n#include <stack>\n#include <iomanip>\n#include <cassert>\n#include <cstring>\n#include <sstream>\n#include <numeric>\n#include <cstdio>\n#include <bitset>\n\n#define int ll\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair <int, int> pii;\n\n#define pb push_back\n#define F first\n#define S second\n#define _sz(x) ((int)x.size())\n\nint T;\nint a, b, c, d;\n\nint32_t main()\n{\n    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n\n    cin >> T;\n\n    while (T--) {\n        cin >> a >> b >> c >> d;\n\n        if (a > b * c) {\n            cout << \"-1\\n\";\n            continue;\n        }\n\n        int tt = a / (d * b);\n\n        int res = (tt + 1) * a;\n        res -= tt * (tt + 1) / 2 * d * b;\n\n        cout << res << '\\n';\n    }\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "greedy",
        "math",
        "number theory",
        "ternary search"
    ],
    "dificulty": "2100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Solo mid Oracle.json",
    "editorial_link": "https://codeforces.com//blog/entry/84056",
    "editorial": "It will be easier to explain using illustrations. We will use timelines, where each cast spell instance will occupy a separate row; and each second will be represented as a column.\n\nFirst of all, if a>b?c\n then the answer is ?1\n. Indeed, after time t\n the total amount of damage dealt is (a?bc)\n for each spell which has expired completely plus some damage from spells which have not expired. The first summand can be as great as we want it to, and the second one is bounded by, say, ?bc2\n as there are at most c\n spells which have not yet expired, and each of them healed the enemy by at most b\n units each second, for at most c\n seconds. Therefore, the damage may be arbitrarily huge.\n\nOn the other hand, if a?bc\n, then the answer always exists, and here is why. First of all, let's only look at the moments divisible by d\n \u0097 that is, the moments when damage was dealt. It is obvious that for every other moment t\n the enemy had less (or the same amount of) health at time t?1\n. Second, if t?c\n, then the enemy had no more health than now at the moment t?d\n. Indeed, the difference between damages then and now is exactly one full-lasted spell, which is non-negative, as we know. For clarity take a look at the pictures below:\n\n\nSo now we know that we may consider only t<c\n, and it follows in particular that the answer exists. Also, when in general should we subtract d\n from t\n to obtain a more damaged enemy? One can see that if t<c\n then the damage we subtract is a?tb\n, and since t=dk\n for some integer nonnegative k\n, then we subtract a?bdk\n damage. It makes sense to do this while a?bdk<0\n:\n\n\nIn other words, we have reduced the task to the following: find the greatest k\n so that a?bdk\n, and cast the spell (k+1)\n time. The enemy will have the least amount of health just after we cast the spell for the (k+1)\n-st time. The answer is thus a(k+1)?k(k+1)2bd\n. The time complexity of this solution is O(1)\n per test.\n\nOne could also find out that the enemy's health is convex over time and use ternary search to find the minimum. It requires O(logmaxanswer)\n per test, which is still ok."
}