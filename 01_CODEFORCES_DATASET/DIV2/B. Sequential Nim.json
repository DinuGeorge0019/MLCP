{
    "link": "https://codeforces.com//contest/1382/problem/B",
    "problemId": "672678",
    "problem_idx": "B",
    "shortId": "1382B",
    "contest_number": "1382",
    "problem_submissions": {
        "E": [
            87580740,
            87589411,
            87581646,
            87592012,
            87582927,
            87692528,
            87775376,
            87717136
        ],
        "D": [
            87555489,
            87548847,
            87561646,
            87566268,
            87542684,
            87550389,
            87559938,
            87557650,
            87551427,
            87566193,
            87564529,
            87561452,
            87563995,
            87564259,
            87570645,
            87563751,
            87565987,
            87569150,
            87571590
        ],
        "C2": [
            87546116,
            87555702,
            87548714,
            87552069,
            87538337,
            87550493,
            87568748,
            87548658,
            87549905,
            87553287,
            87550271,
            87552175,
            87546582,
            87555140,
            87546998,
            87548618,
            87546324
        ],
        "C1": [
            87545885,
            87534226,
            87549038,
            87551870,
            87577593,
            87538735,
            87550728,
            87547738,
            87548907,
            87549506,
            87553050,
            87549957,
            87552439,
            87547080,
            87548161,
            87546830,
            87544742,
            87546462
        ],
        "B": [
            87532814,
            87538666,
            87535698,
            87538451,
            87544080,
            87530844,
            87530725,
            87531828,
            87532147,
            87535077,
            87537243,
            87537711,
            87538752,
            87530008,
            87533230,
            87538244,
            87535683,
            87533610
        ],
        "A": [
            87524660,
            87526155,
            87619468,
            87524613,
            87533175,
            87523893,
            87526148,
            87532501,
            87524134,
            87525800,
            87526012,
            87524222,
            87523259,
            87523315,
            87524086,
            87524062,
            87526273,
            87523705
        ]
    },
    "name": "B. Sequential Nim",
    "statement": "There are n piles of stones, where the i-th pile has a_i stones. Two\r\npeople play a game, where they take alternating turns removing stones.In\r\na move, a player may remove a positive number of stones from the (the\r\npile with the minimal index, that has at least one stone). The first\r\nplayer who cannot make a move (because all piles are empty) loses the\r\ngame. If both players play optimally, determine the winner of the game.\r\n",
    "solutions": [
        "#pragma comment(linker, \"/STACK:10000000000\")\n#pragma GCC optimize(\"O3\")\n#define _CRT_SECURE_NO_WARNINGS\n#include <stdlib.h>\n#include <stdio.h>\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <math.h>\n#include <map>\n#include <chrono>\n#include <set>\n#include <stack>\n#include <vector>\n#include <time.h>\n#include <random>\n#include <algorithm>\n#include <string>\n#include <string.h>\n#include <queue>\n#include <deque>\n#include <functional>\n#include <cctype>\n#include <list>\n#include <unordered_set>\n#include <unordered_map>\n#include <bitset>\n#include <complex>\n#define rt return\n#define mp make_pair\n#define endl '\\n'\n#define sqr(x) ((x) * (x))\n#define all(x) (x).begin(), (x).end()\n#define rep(x) for (int rep_iter = 0; rep_iter < x; ++rep_iter)\n#define fnd(x, y) (x.find(y) != x.end())\n#define fndv(x, y) (find(all(x), y) != end(x))\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef pair<db, db> pdd;\ntypedef unsigned char bt;\ntypedef unsigned int uint;\nconst int MOD = 1000000007;\nconst int INF = 1000000007LL;\nconst ll INF2 = 1LL << 62LL;\nconst long double EPS = 1e-9;\n#ifdef _DEBUG\nconst int SIZE = 120;\n#endif\n#ifndef _DEBUG\nconst int SIZE = 200010; //200010\n#endif\nmt19937 rng(time(0));\nuniform_int_distribution<int> uid(-1000000000, 1000000000);\n\nint flag, u[SIZE], d[SIZE], a[SIZE], n;\n\nint rec(int i) {\n\tif (i == n - 1)\n\t\trt 1;\n\tif (u[i] == flag)\n\t\trt d[i];\n\tu[i] = flag;\n\tif (a[i] == 1) {\n\t\trt d[i] = !rec(i + 1);\n\t}\n\trt d[i] = 1;\n}\n\n\nint main() {\n#ifdef _DEBUG\n\tfreopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\n#endif\n\tios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n\n\tint tt;\n\tcin >> tt;\n\trep(tt) {\n\t\tcin >> n;\n\t\t++flag;\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tcin >> a[i];\n\t\t\ta[i] = min(2, a[i]);\n\t\t}\n\t\tif (rec(0))\n\t\t\tcout << \"First\";\n\t\telse\n\t\t\tcout << \"Second\";\n\t\tcout << endl;\n\t}\n\n\n\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "games"
    ],
    "dificulty": "1100",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Sequential Nim.json",
    "editorial_link": "https://codeforces.com//blog/entry/80427",
    "editorial": "Suppose . If removing the entire first pile is winning, player 1 will do\r\nthat. Otherwise, player 1 can leave exactly one stone in the first pile,\r\nforcing player 2 to remove it, leaving player 1 in the winning position.\r\nOtherwise, if , then it is forced to remove the first pile.So, whichever\r\nplayer gets the first pile with more than one stone wins. That is, let\r\nbe the maximum number such that . If is even, the first player will win.\r\nOtherwise, the second player will win. The only exception is when all\r\npiles have exactly stone. In that case, the first player wins when is\r\nodd.Complexity is .\r\n"
}