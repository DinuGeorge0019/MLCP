{"link": "https://codeforces.com//contest/621/problem/B", "problemId": "46902", "problem_idx": "B", "shortId": "621B", "contest_number": "621", "problem_submissions": {"D": [15706922, 15708912, 15712199, 15709835, 15713077, 15712357, 15708942, 15766873, 15747435, 15733699, 15715880, 15719896], "E": [15703295, 15703499, 15705519, 15707664, 15708122, 15707325, 15713941, 15705601, 15704286, 15701891, 15705027, 15705042, 15706397, 15704658, 15704205, 15709743, 15706195, 15705463, 15707137, 15707198], "C": [15701639, 15705315, 15700957, 15701370, 15700184, 15704278, 15705563, 15700217, 15702029, 15701828, 15699715, 15700597, 15699825, 15700179, 15700557, 15702745, 15701142, 15700489, 15700527, 15701490], "B": [15698894, 15699840, 15698446, 15697286, 15697213, 15701158, 15703631, 15696667, 15698191, 15697920, 15698162, 15700575, 15697836, 15697601, 15699162, 15697389, 15699466, 15700819, 15698045, 15698470], "A": [15697249, 15709534, 15696296, 15695622, 15695621, 15696700, 15695629, 15695597, 15695557, 15695777, 15695703, 15696779, 15695814, 15695801, 15700242, 15695837, 15695799, 15696854, 15696011, 15696156]}, "name": "B. Wet Shark and Bishops", "statement": "Today, Wet Shark is given bishops on a by grid. Both rows and columns of\r\nthe grid are numbered from to . Rows are numbered from top to bottom,\r\nwhile columns are numbered from left to right.Wet Shark thinks that two\r\nbishops attack each other if they share the same diagonal. Note, that\r\nthis is the only criteria, so two bishops may attack each other\r\n(according to Wet Shark) even if there is another bishop located between\r\nthem. Now Wet Shark wants to count the number of pairs of bishops that\r\nattack each other.\r\n", "solutions": ["#include <algorithm>\n#include <bitset>\n#include <cassert>\n#include <cctype>\n#include <cmath>\n#include <complex>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <string>\n#include <utility>\n#include <vector>\nusing namespace std;\n\n#define fi first\n#define se second\n#define pb push_back\n#define all(x) (x).begin(), (x).end()\n#define sz(x) (int((x).size()))\n#define bit(x) (1 << (x))\n#define cnt1(x) (__builtin_popcount(x))\n\ntemplate<class T, class U>\ninline void chkmax(T& x, U y) {\n\tif (x < y) x = y;\n}\n\ntemplate<class T, class U>\ninline void chkmin(T& x, U y) {\n\tif (y < x) x = y;\n}\n\ntypedef long long LL;\ntypedef double DB;\ntypedef pair<int, int> PII;\ntypedef vector<int> VI;\n\nconst int MX = 2005;\nLL cnt[MX], cnt1[MX];\nint main() {\n//\tfreopen(\"in.txt\", \"r\", stdin);\n//\tfreopen(\"out.txt\", \"w\", stdout);\n\t\n\tint n, x, y;\n\tscanf(\"%d\", &n);\n\tfor (int i = 1; i <= n; i++) {\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tcnt[x + y]++;\n\t\tcnt1[x - y + 1000]++;\n\t}\n\t\n\tLL ans = 0;\n\tfor (int i = 0; i <= 2000; i++) {\n\t\tans += cnt[i] * (cnt[i] - 1) / 2;\n\t\tans += cnt1[i] * (cnt1[i] - 1) / 2;\n\t}\n\tprintf(\"%lld\\n\", ans);\n\t\t\n\treturn 0;\n}"], "input": "", "output": "", "tags": ["combinatorics", "implementation"], "dificulty": "1300", "interactive": false}