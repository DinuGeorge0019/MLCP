{
    "link": "https://codeforces.com//contest/1195/problem/A",
    "problemId": "373876",
    "problem_idx": "A",
    "shortId": "1195A",
    "contest_number": "1195",
    "problem_submissions": {
        "F": [
            57231940,
            57228583,
            57230665,
            57230760,
            57233707,
            57236452,
            57231972,
            57234436,
            57234600,
            57238063,
            57234775,
            57310298,
            57228874,
            57290272,
            57225125
        ],
        "E": [
            57221608,
            57223793,
            57222513,
            57225684,
            57222906,
            57215919,
            57226202,
            57226594,
            57228678,
            57225929,
            57227306,
            57224920,
            57217658,
            57221326,
            57221813,
            57226168,
            57222930,
            57258569,
            57224143
        ],
        "D1": [
            57217173,
            57217670,
            57213566,
            57216495,
            57217668,
            57218460,
            57220879,
            57217890,
            57215569,
            57210215,
            57222516,
            57213030,
            57213769,
            57209778,
            57215844,
            57218863,
            57212403,
            57215924,
            57215516,
            57217529
        ],
        "D2": [
            57216895,
            57217496,
            57213368,
            57216364,
            57217535,
            57229402,
            57220576,
            57217862,
            57215401,
            57216742,
            57222653,
            57217606,
            57213863,
            57214793,
            57215958,
            57218634,
            57215884,
            57216070,
            57229811,
            57216866
        ],
        "C": [
            57208411,
            57206363,
            57208350,
            57208286,
            57212089,
            57204975,
            57209742,
            57209624,
            57207426,
            57206667,
            57209966,
            57209554,
            57208702,
            57205876,
            57208547,
            57209651,
            57208031,
            57210123,
            57210767,
            57209324
        ],
        "B": [
            57206484,
            57204728,
            57206113,
            57205986,
            57206681,
            57203895,
            57206510,
            57205624,
            57205603,
            57204561,
            57207235,
            57206451,
            57206143,
            57204517,
            57206504,
            57207159,
            57205738,
            57206747,
            57207265
        ],
        "A": [
            57203812,
            57203699,
            57205723,
            57203885,
            57204288,
            57203645,
            57204262,
            57204010,
            57204256,
            57203704,
            57203968,
            57204725,
            57203853,
            57203719,
            57204238,
            57204466,
            57203857,
            57203680,
            57204939,
            57203939
        ]
    },
    "name": "A. Drinks Choosing",
    "statement": "Old timers of Summer Informatics School can remember previous camps in\r\nwhich each student was given a drink of his choice on the vechorka\r\n(late-evening meal). Or may be the story was more complicated?There are\r\nn students living in a building, and for each of them the favorite drink\r\na_i is known. So you know n integers a_1, a_2,\r\ndots, a_n, where a_i (1\r\nle a_i\r\nle k) is the type of the favorite drink of the i-th student. The drink\r\ntypes are numbered from 1 to k.There are infinite number of drink sets.\r\nEach set consists of portions of the same drink. In other words, there\r\nare k types of drink sets, the j-th type contains two portions of the\r\ndrink j. The available number of sets of each of the k types is\r\ninfinite.You know that students will receive the minimum possible number\r\nof sets to give all students exactly one drink. Obviously, the number of\r\nsets will be exactly\r\nlceil\r\nfrac{n}{2}\r\nrceil, where\r\nlceil x\r\nrceil is x rounded up.After students receive the sets, they will\r\ndistribute their portions by their choice: each student will get exactly\r\none portion. Note, that if n is odd then one portion will remain unused\r\nand the students\u2019 teacher will drink it.What is the maximum number of\r\nstudents that can get their favorite drink if\r\nlceil\r\nfrac{n}{2}\r\nrceil sets will be chosen optimally and students will distribute\r\nportions between themselves optimally?\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint cnt[1005];\n\nint main() {\n    int n, k;\n    cin >> n >> k;\n    for (int i = 0; i < n; i++) {\n        int a;\n        cin >> a;\n        cnt[a]++;\n    }\n    int d = 0;\n    for (int i = 1; i <= k; i++) {\n        d += cnt[i] % 2;\n    }\n    cout << n - d/2 << endl;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Drinks Choosing.json",
    "editorial_link": "https://codeforces.com/blog/entry/68471",
    "editorial": "Let\u00e2\u0080\u0099s take a look on a students. If two students have the same favorite\r\ndrink, let\u00e2\u0080\u0099s take one set with this drink. Let the number of such\r\nstudents (which we can satisfy as pairs) be . Because the number of sets\r\nis we always can do it. So there are students which are the only with\r\ntheir favorite drinks remain. It is obvious that if we take one set we\r\ncan satisfy at most one student (and one of the others will gain not his\r\nfavorite drink). Let the number of such students (which remain after\r\nsatisfying pairs of students) be . Then the answer is .\r\n"
}