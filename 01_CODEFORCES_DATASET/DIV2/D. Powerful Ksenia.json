{
    "link": "https://codeforces.com//contest/1438/problem/D",
    "problemId": "793475",
    "problem_idx": "D",
    "shortId": "1438D",
    "contest_number": "1438",
    "problem_submissions": {
        "F": [
            98319461
        ],
        "E": [
            98311897,
            98314215,
            98306470,
            98317401,
            98315562,
            98322785,
            98318720,
            99208201,
            99208187,
            99208130,
            98328285,
            98328073,
            98322490,
            98320922,
            98318257,
            98322974,
            98321581
        ],
        "D": [
            98297867,
            98301844,
            98300240,
            98304054,
            98318299,
            98309651,
            98315030,
            98308693,
            98315767,
            98313297,
            98316364,
            98315158,
            98303678,
            98304345,
            98304632,
            98306346,
            98305264,
            98305346,
            98303552,
            98306335
        ],
        "C": [
            98289953,
            98289036,
            98308314,
            98293256,
            98292637,
            98297135,
            98292890,
            98294300,
            98300290,
            98319932,
            98304074,
            98317336,
            98290569,
            98289827,
            98289903,
            98288415,
            98294636,
            98293103,
            98292335,
            98295796
        ],
        "B": [
            98286960,
            98285186,
            98298192,
            98293037,
            98287297,
            98288613,
            98287215,
            98290416,
            98288546,
            98286932,
            98293844,
            98285378,
            98286885,
            98286961,
            98287702,
            98285226,
            98286945,
            98289425,
            98287421,
            98290261
        ],
        "A": [
            98283268,
            98281489,
            98282933,
            98292930,
            98282693,
            98281140,
            98281789,
            98285668,
            98284421,
            98282468,
            98283785,
            98281307,
            98281791,
            98283429,
            98281766,
            98282741,
            98281310,
            98282372,
            98281634,
            98285176
        ]
    },
    "name": "D. Powerful Ksenia",
    "statement": "Ksenia has an array a consisting of n positive integers a_1, a_2,\r\nldots, a_n. In one operation she can do the following: choose three\r\ndistinct indices i, j, k, and then change all of a_i, a_j, a_k to a_i\r\noplus a_j\r\noplus a_k simultaneously, where\r\noplus denotes the bitwise XOR operation. She wants to make all a_i equal\r\n, or to determine that it is impossible to do so. She wouldnâ€™t ask for\r\nyour help, but please, help her!\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\nconst int N = 1e5 + 3;\n\nvector<array<int, 3>> ans;\nint a[N];\n\nvoid solve(int n){\n    for(int i = 1; i <= n - 2; i += 2)\n        ans.push_back({i, i + 1, i + 2});\n    for(int i = n - 4; i >= 1; i -= 2)\n        ans.push_back({i, i + 1, i + 2});\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(NULL);\n\n    int n;\n    cin >> n;\n\n    for(int i = 0; i < n; ++i)\n        cin >> a[i];\n\n    if(n % 2 == 0){\n        int x = 0;\n        for(int i = 0; i < n; ++i)\n            x ^= a[i];\n        if(x){\n            cout << \"NO\\n\";\n            return 0;\n        }\n            \n        solve(n - 1);\n    }\n    else solve(n);\n\n    cout << \"YES\\n\";\n    cout << ans.size() << \"\\n\";\n    for(int i = 0; i < ans.size(); ++i)\n        cout << ans[i][0] << \" \" << ans[i][1] << \" \" << ans[i][2] << \"\\n\";\n\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "constructive algorithms",
        "math"
    ],
    "dificulty": "2200",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Powerful Ksenia.json",
    "editorial_link": "https://codeforces.com//blog/entry/84589",
    "editorial": "We will first solve the problem for odd , and then extend the solution\r\nto even . Note that applying the operation to makes all of them equal to\r\n. Thus, we can try making pairs of equal elements. This is easy for odd\r\n: While at least unpaired elements exist, apply the operation on any .\r\nPair any two of them and repeat. Finally, we will have just one unpaired\r\nelement left, using which we can make all elements equal as described at\r\nthe start. The number of operations used is exactly . Let us denote as\r\nthe xor of all elements in the original array. To solve for even , we\r\nnote that applying the given operation does not change . Since the xor\r\nof an even number of same elements is , the answer is impossible for\r\narrays with . To solve for even and , we can just solve the problem for\r\nthe first using the odd approach and the last element will magically be\r\nequal to the first .\r\n",
    "hint": []
}