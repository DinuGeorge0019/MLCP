{
    "link": "https://codeforces.com//contest/371/problem/B",
    "problemId": "4152",
    "problem_idx": "B",
    "shortId": "371B",
    "contest_number": "371",
    "problem_submissions": {
        "E": [
            5386691,
            5385652,
            5387391,
            5387322,
            5390985,
            5387784,
            5383050,
            5388200,
            5387733,
            5386214,
            5386292,
            5388053,
            5385063,
            5389504,
            5394788,
            5402945
        ],
        "D": [
            5385132,
            5387024,
            5385113,
            5383557,
            5389960,
            5384908,
            5386335,
            5385491,
            5385734,
            5387644,
            5385157,
            5390842,
            5385613,
            5388772,
            5383171,
            5383787,
            5383978,
            5383957
        ],
        "C": [
            5383277,
            5383807,
            5383992,
            5381888,
            5382446,
            5383936,
            5383664,
            5385279,
            5384741,
            5383042,
            5382860,
            5382943,
            5382483,
            5383152,
            5382630,
            5382839
        ],
        "B": [
            5381953,
            5382093,
            5382443,
            5385168,
            5381736,
            5388764,
            5382596,
            5382957,
            5382638,
            5388559,
            5381967,
            5382051,
            5381711,
            5381795,
            5381475,
            5381931
        ],
        "A": [
            5381375,
            5381309,
            5381281,
            5382547,
            5381148,
            5381302,
            5382094,
            5382203,
            5381364,
            5381179,
            5388604,
            5381203,
            5381211,
            5381180,
            5381177,
            5381327
        ]
    },
    "name": "B. Fox Dividing Cheese",
    "statement": "Two little greedy bears have found two pieces of cheese in the forest of\r\nweight and grams, correspondingly. The bears are so greedy that they are\r\nready to fight for the larger piece. That’s where the fox comes in and\r\nstarts the dialog: \"Little bears, wait a little, I want to make your\r\npieces equal\" \"Come off it fox, how are you going to do that?\", the\r\ncurious bears asked. \"It’s easy\", said the fox. \"If the mass of a\r\ncertain piece is divisible by two, then I can eat exactly a half of the\r\npiece. If the mass of a certain piece is divisible by three, then I can\r\neat exactly two-thirds, and if the mass is divisible by five, then I can\r\neat four-fifths. I’ll eat a little here and there and make the pieces\r\nequal\". The little bears realize that the fox’s proposal contains a\r\ncatch. But at the same time they realize that they can not make the two\r\npieces equal themselves. So they agreed to her proposal, but on one\r\ncondition: the fox should make the pieces equal as quickly as possible.\r\nFind the minimum number of operations the fox needs to make pieces\r\nequal.\r\n",
    "solutions": [
        "#include <iostream>\n#include <fstream>\n#include <cstdio>\n#include <cassert>\n#include <cmath>\n#include <queue>\n#include <map>\n#include <stack>\n#include <set>\n#include <string>\n#include <utility>\n#include <cstdlib>\n#include <algorithm>\n#include <cstring>\n#include <ctime>\n#include <vector>                              \nusing namespace std;\n#define fname \"\"\n#define ull unsigned long long\n#define ll long long\n#define INF 1000*1000*1000\n#define f first\n#define s second\n#define mp make_pair\n#define pb push_back\n#define sz size()\nint a, b, ans = INF;\n\nvoid _try(int x) {\n\tif (a % x != 0 || b % x != 0) return;\n\tint n1 = a / x, n2 = b / x;\n\tint kol = 0;\n\twhile (n1 % 2 == 0) n1 /= 2, ++kol;\n\twhile (n1 % 3 == 0) n1 /= 3, ++kol;\n\twhile (n1 % 5 == 0) n1 /= 5, ++kol;\n\twhile (n2 % 2 == 0) n2 /= 2, ++kol;\n\twhile (n2 % 3 == 0) n2 /= 3, ++kol;\n\twhile (n2 % 5 == 0) n2 /= 5, ++kol;\n\tif (n1 > 1 || n2 > 1) return;\n\tans = min(ans, kol);\n}\n\nint main ()\n{\t\n\t#ifndef ONLINE_JUDGE\n\tfreopen (fname\"in\",\"r\",stdin);\n\tfreopen (fname\"out\",\"w\",stdout);\n\t#endif\n\n\tcin >> a >> b;\n\n\tfor (int i = 1; i * i <= a; i ++ ) {\n\t\tif (a % i == 0) {\n\t\t\t_try(i);\n\t\t\t_try(a / i);\n\t\t}\n\t}\n\n\tfor (int i = 1; i * i <= b; i ++ ) {\n\t\tif (b % i == 0) {\n\t\t\t_try(i);\n\t\t\t_try(b / i);\n\t\t}\n\t}\n\t\n\tif (ans == INF) cout << -1;\n\telse cout << ans;\n\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math",
        "number theory"
    ],
    "dificulty": "1300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\B. Fox Dividing Cheese.json",
    "editorial_link": "https://codeforces.com//blog/entry/9876",
    "editorial": "It is easy to see that the fox can do three type of operations: divide\r\nby 2, divide by 3 and divide by 5. Let s write both given numbers in\r\nform Unable to parse markup [type=CF_TEX] Unable to parse markup\r\n[type=CF_TEX] Unable to parse markup [type=CF_TEX] Unable to parse\r\nmarkup [type=CF_TEX] Unable to parse markup [type=CF_TEX] Unable to\r\nparse markup [type=CF_TEX]\r\n",
    "hint": []
}