{
    "link": "https://codeforces.com//contest/1020/problem/A",
    "problemId": "207008",
    "problem_idx": "A",
    "shortId": "1020A",
    "contest_number": "1020",
    "problem_submissions": {
        "D": [
            41489189,
            41489089,
            41486423,
            41490197,
            41489917,
            41487075,
            41490349,
            41489723,
            41491006,
            41484021,
            41492712,
            41493543,
            41493068,
            41492267,
            41492744,
            41493565,
            41533654,
            41492210,
            41493418,
            41496467
        ],
        "C": [
            41482847,
            41481559,
            41490429,
            41483828,
            41484432,
            41483284,
            41481342,
            41482980,
            41482276,
            41494412,
            41483383,
            41483904,
            41482436,
            41484813,
            41483954,
            41484715,
            41485204,
            41486868,
            41484572
        ],
        "B": [
            41472124,
            41472495,
            41472169,
            41471832,
            41473647,
            41472819,
            41474467,
            41474217,
            41476517,
            41474465,
            41477984,
            41542441,
            41472876,
            41475507,
            41474290,
            41474434,
            41473754,
            41480874,
            41476912,
            41474412
        ],
        "A": [
            41471287,
            41471470,
            41471174,
            41471276,
            41471647,
            41482521,
            41482998,
            41483546,
            41473507,
            41472376,
            41472014,
            41542424,
            41471633,
            41471835,
            41472031,
            41471489,
            41471801,
            41474026,
            41472191,
            41471736
        ],
        "E": [
            41565578
        ]
    },
    "name": "A. New Building for SIS",
    "statement": "You are looking at the floor plan of the Summer Informatics School\u2019s new\r\nbuilding. You were tasked with SIS logistics, so you really care about\r\ntravel time between different locations: it is important to know how\r\nlong it would take to get from the lecture room to the canteen, or from\r\nthe gym to the server room.The building consists of towers, floors each,\r\nwhere the towers are labeled from to , the floors are labeled from to .\r\nThere is a passage between any two adjacent towers (two towers and for\r\nall : ) on every floor , where . It takes exactly one minute to walk\r\nbetween any two adjacent floors of a tower, as well as between any two\r\nadjacent towers, provided that there is a passage on that floor. It is\r\nnot permitted to leave the building. You have given pairs of locations ,\r\n: floor of tower and floor of tower . For each pair you need to\r\ndetermine the minimum walking time between these locations.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\n#define sz(x) ((int)x.size())\n#define all(x) (x).begin(), (x).end()\nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\nint n, h, a, b, Q;\nint main() {\n\tscanf(\"%d%d%d%d%d\",&n,&h,&a,&b,&Q);\n\twhile(Q--) {\n\t\tint x1,y1,x2,y2;\n\t\tscanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2);\n\t\tif(x1 == x2) printf(\"%d\\n\",abs(y1-y2));\n\t\telse {\n\t\t\tint d1;\n\t\t\tif(a<=y1 && y1<=b) d1 = y1;\n\t\t\telse if(y1 > b) d1 = b;\n\t\t\telse d1 = a;\n\t\t\tprintf(\"%d\\n\",abs(d1-y1)+abs(x1-x2)+abs(d1-y2));\n\t\t}\n\t}\n\treturn 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "math"
    ],
    "dificulty": "1000",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. New Building for SIS.json",
    "editorial_link": "https://codeforces.com//blog/entry/61161",
    "editorial": "In this problem you need to find a shortest path between some locations\r\nin a building. You need to look at some cases to solve this problem.\r\nFirst, if locations are in the same tower (), you don\u00e2\u0080\u0099t need to use a\r\npassages between two towers at all, and answer is . In other case, you\r\nhave to use some passage between towers. Obviously, you need to use only\r\npassage on one floor. The easiest way to do this is to write down floors\r\nin array the floor where you start, the floor where you end your path,\r\nfirst and last floors with passages. After that you can choose floor\r\nwhere you will use a passage, check if there is a passage at this floor\r\n(), and update answer with an expression like .Another method is to\r\nchoose a floor where you use a passage by case handling. If you start on\r\nthe floor , and there is a passage, you can just use this passage.\r\nOtherwise, you choose between floors and , whichever is closer to the\r\nstart.\r\n"
}