{
    "link": "https://codeforces.com//contest/1291/problem/A",
    "problemId": "529283",
    "problem_idx": "A",
    "shortId": "1291A",
    "contest_number": "1291",
    "problem_submissions": {
        "C": [
            70078816,
            70050816,
            70042724,
            70053069,
            70052206,
            70072135,
            70047080,
            70047671,
            70049982,
            70049792,
            70044975,
            70045731,
            70049590,
            70046807,
            70050141,
            70048797,
            70051840,
            70043410,
            70051189
        ],
        "A": [
            70076588,
            70035649,
            70051615,
            70038788,
            71191554,
            70042526,
            70040855,
            70040409,
            70037322,
            70324047,
            70036128,
            70035755,
            70036486,
            70036001,
            70040165,
            70037128,
            70036301,
            70037522,
            70037345,
            70036992,
            70038646
        ],
        "B": [
            70075656,
            70037850,
            70048322,
            70046041,
            71191579,
            70045451,
            70044084,
            70040507,
            70041207,
            70039061,
            70042662,
            70039800,
            70040502,
            70042950,
            70040497,
            70040646,
            70041566,
            70042682,
            70047909,
            70043816
        ],
        "D": [
            70074507,
            70056625,
            70066825,
            70066273,
            70065758,
            70080888,
            70054873,
            70061627,
            70061405,
            70061792,
            70060518,
            70061003,
            70060842,
            70058946,
            70066151,
            70062202,
            70062779,
            70063466,
            70066431
        ],
        "E": [
            70059567,
            70078936,
            70081396,
            70066368,
            70109259,
            144418642,
            70793684
        ],
        "F": [
            70045991,
            70079097,
            70083257,
            150010321,
            70714928
        ]
    },
    "name": "A. Even But Not Even",
    "statement": "Let\u2019s define a number if and only if its sum of digits is divisible by 2\r\nbut the number itself is not divisible by 2. For example, 13, 1227,\r\n185217 are numbers, while 12, 2, 177013, 265918 are not. If you\u2019re still\r\nunsure what numbers are, you can look at the sample notes for more\r\nclarification.You are given a non-negative integer s, consisting of n\r\ndigits. You can delete some digits (they are necessary\r\nconsecutive/successive) to make the given number . You cannot change the\r\norder of the digits, that is, after deleting the digits the remaining\r\ndigits collapse. The resulting number shouldn\u2019t contain leading zeros.\r\nYou can delete any number of digits between 0 (do not delete any digits\r\nat all) and n-1.For example, if you are given s= then one of possible\r\nways to make it is:\r\nrightarrow . The sum of digits of is equal to 70 and is divisible by 2,\r\nbut number itself is not divisible by 2: it means that the resulting\r\nnumber is .Find resulting number that is . If it\u2019s impossible to create\r\nan number from the given number report about it.\r\n",
    "solutions": [
        "/*\nIZ*ONE\n\nLa vie en Rose\n2018.10.29\n\nVioleta\n2019.04.01\n\nFiesta\n2020.02.17\n*/\n\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <ctime>\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\nusing namespace std;\n\nint n;\nchar p[3010];\n\nvoid Process() {\n\tint i;\n\tscanf(\"%d\", &n);\n\tscanf(\"%s\", p);\n\tvector<int>V;\n\tfor (i = 0; p[i]; i++) {\n\t\tif ((p[i] - '0') % 2 == 1)V.push_back(p[i] - '0');\n\t}\n\tif (V.size() < 2)puts(\"-1\");\n\telse printf(\"%d%d\\n\", V[0], V[1]);\n}\n\nint main() {\n\tint Tcase;\n\tscanf(\"%d\", &Tcase);\n\twhile (Tcase--) {\n\t\tProcess();\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "greedy",
        "math",
        "strings"
    ],
    "dificulty": "900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\A. Even But Not Even.json",
    "editorial_link": "https://codeforces.com//blog/entry/73563",
    "editorial": "If the number of odd digits is smaller than or equal to , it is\r\nimpossible to create an number.Otherwise, we can output any 2 odd digits\r\nof the number (in correct order of course).\r\n"
}