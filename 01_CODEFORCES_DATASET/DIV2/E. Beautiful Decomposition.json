{
    "link": "https://codeforces.com//contest/279/problem/E",
    "problemId": "2705",
    "problem_idx": "E",
    "shortId": "279E",
    "contest_number": "279",
    "problem_submissions": {
        "D": [
            3249313,
            3247594,
            3244905,
            3249853,
            3249691,
            3249081,
            3250467,
            3250451,
            3250359,
            3474157
        ],
        "E": [
            3244979,
            3247752,
            3238796,
            3241502,
            3241802,
            3249970,
            3248144,
            3243573,
            3243340,
            3243108,
            3244030,
            3244923,
            3240469,
            3247041,
            3244724,
            3242537,
            3242804,
            3247622
        ],
        "C": [
            3242350,
            3240214,
            3241436,
            3243563,
            3243315,
            3242680,
            3242006,
            3239324,
            3241143,
            3241800,
            3242584,
            3244958,
            3240145,
            3241851,
            3245710,
            3247069,
            3242483
        ],
        "A": [
            3240766,
            3242016,
            3239749,
            3239283,
            3250054,
            3239155,
            3241094,
            3244109,
            3239779,
            3240700,
            3243000,
            3238846,
            3246020,
            3239320,
            3239919,
            3240334
        ],
        "B": [
            3238919,
            3240626,
            3239249,
            3238903,
            3240194,
            3239523,
            3239885,
            3242187,
            3239867,
            3240726,
            3239001,
            3243481,
            3239120,
            3239326,
            3240278,
            3240808,
            3239300
        ]
    },
    "name": "E. Beautiful Decomposition",
    "statement": "Valera considers a number , if it equals or - for some integer .\r\nRecently, the math teacher asked Valera to represent number as the sum\r\nof beautiful numbers. As Valera is really greedy, he wants to complete\r\nthe task using as few beautiful numbers as possible. Help Valera and\r\nfind, how many numbers he is going to need. In other words, if you look\r\nat all decompositions of the number into beautiful summands, you need to\r\nfind the size of the decomposition which has the fewest summands.\r\n",
    "solutions": [
        "#pragma comment(linker, \"/STACK:256000000\")\n#include <iostream>\n#include <string>\n#include <string.h>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <ctime>\n#include <cmath>\n#include <stdio.h>\n#include <set>\n#include <map>\n#include <stack>\n#include <fstream>\n#include <deque>\n#include <list>\n#include <ctime>\n\n#define SZ(a) (int(a.size()))\n#define MEM(a, val) memset(a, val, sizeof(a))\n#define MP(a, b) make_pair(a, b)\n#define PB(a) push_back(a)\n#define ALL(a) a.begin(), a.end()\n#define REP(i, n) for(int (i) = 0; (i) < (n); ++(i))\n#define FOR(i, a, b) for(int (i) = (a); (i) <= (b); ++(i))\n#define SQR(a) ((a) * (a))\n\nusing namespace std;\n\ntypedef unsigned long long ULL;\ntypedef long long LL;\ntypedef long double dbl;\ntypedef pair<int, int> pii ;\ntypedef vector<int> vint;\ntypedef vector<LL> vLL;\n\nconst int nmax = 1000009;\n\nchar s[nmax];\nchar s2[nmax];\nint dp[2][nmax];\n\nint main()\n{\n#ifdef _DEBUG\n    freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\n#else\n    //freopen(\"input.txt\", \"r\", stdin);freopen(\"output.txt\", \"w\", stdout);\n#endif\n    scanf(\"%s\", &s[1]);\n    int n = strlen(s + 1);\n    reverse(s + 1, s + 1 + n);\n    ++n;\n    s[n] = '0';\n    for (int i = 1; i <= n; ++i) {\n        s[i] -= '0';\n        s2[i] = 1 - s[i];\n    }\n    int k = 1;\n    while (s2[k] == 1)\n        s2[k] = 0, ++k;\n    s2[k] = 1;\n\n    for (int i = 1; i <= n; ++i) {\n        dp[0][i] = s[i] + dp[0][i - 1];\n        dp[1][i] = s2[i] + dp[1][i - 1];\n        bool fl = 1;\n        while (fl) {\n            fl = 0;\n            if (dp[0][i] > 1 + dp[1][i]) {\n                fl = 1;\n                dp[0][i] = 1 + dp[1][i];\n            }\n            if (dp[1][i] > 1 + dp[0][i]) {\n                fl = 1;\n                dp[1][i] = 1 + dp[0][i];\n            }\n        }\n        //cout << i << \" = \" << int(s[i]) << \" \" << int(s2[i]) << \" \" << dp[0][i] << \" \" << dp[1][i] << endl;\n    }\n    cout << min(dp[0][n], dp[1][n]) << endl;\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "dp",
        "games",
        "greedy",
        "number theory"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\E. Beautiful Decomposition.json",
    "editorial_link": "https://codeforces.com//blog/entry/95148",
    "editorial": "First of all itâs easy to notice that we will use each power of at most\r\nonce. Letâs look at the highest bit in the current number, suppose itâs\r\n. Since the sum of all powers of below is less than , we will have to\r\nadd at least one power of two with . One can see that adding is not\r\noptimal, since then we will have to subtract at least and can be\r\nreplaced with . So the only choices are or . If we add , we have to\r\nsolve a problem for remaining number, which is a suffix or our current\r\nbinary string. Otherwise, is larger than our current number, so we just\r\nneed the answer for . Letâs call such a complement for a number (notice\r\nthat we donât need in the definition because is defined as largest bit\r\nin ) Now letâs look at . To calculate it, we have to flip all bits in\r\nand add to the result. Now itâs easy to see that if is a complement for\r\n, then for any suffix of (in binary form), the corresponding suffix of\r\nis a complement for it. Also, is a complement for . So during our\r\ncalculations we will only deal with , , suffixes of and suffixes of .\r\nAnd this leads to a following dp solution: let , . Then is the smallest\r\nanswer for a binary number represented by a suffix of number starting\r\nfrom index . We can calculate this starting from and the answer will be\r\n. Code\r\n",
    "hint": []
}