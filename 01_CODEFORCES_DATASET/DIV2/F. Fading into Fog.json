{"link": "https://codeforces.com//contest/1826/problem/F", "problemId": "1909270", "problem_idx": "F", "shortId": "1826F", "contest_number": "1826", "problem_submissions": {"E": [204602017, 204700967, 204596765, 204613109, 204610329, 204611748, 204612296, 204613897, 204618004, 204612275, 204613205, 204624231, 204661971, 204617315, 204616794, 204621809, 204612737, 204608182, 204614402, 204623261, 204628297, 204657040, 204656984, 204620172], "D": [204582402, 204585260, 204585742, 204589825, 204587542, 204586441, 204588591, 204588717, 204601344, 204595957, 204585944, 204587666, 204590835, 204583319, 204595885, 204598399, 204596824, 204590840, 204586792, 204595240], "C": [204575229, 204577835, 204576798, 204582977, 204581863, 204581888, 204584053, 204580950, 204583799, 204579525, 204580707, 204583107, 204584404, 204580743, 204585996, 204593307, 204588423, 204580589, 204579635, 204588957], "B": [204572809, 204580324, 204572676, 204573618, 204574774, 204576010, 204578782, 204574513, 204577548, 204573291, 204574259, 204574305, 204578256, 204586331, 204580048, 204581387, 204580847, 204576280, 204573990, 204577086], "A": [204572057, 204576972, 204571963, 204571901, 204572576, 204573728, 204575534, 204572534, 204574691, 204572015, 204572728, 204572787, 204573859, 204573619, 204575569, 204576295, 204576573, 204576421, 204572686, 204573646], "F": [204650095, 204649588, 204792576, 204790910, 204785582, 204784675, 204782497, 204779284, 205142563]}, "name": "F. Fading into Fog", "statement": "There are n distinct hidden points with real coordinates on a\r\ntwo-dimensional Euclidean plane. In one query, you can ask some line\r\nax + by + c = 0 and get the projections of all n points to this line in\r\nsome order. The given projections are not exact, please read the\r\ninteraction section for more clarity.Using the minimum number of\r\nqueries, guess all n points and output them in some order. Here\r\nminimality means the minimum number of queries required to solve any\r\npossible test case with n points.The hidden points are fixed in advance\r\nand do not change throughout the interaction. In other words, the\r\ninteractor is not adaptive.A projection of point A to line ax + by + c =\r\n0 is the point on the line closest to A.\r\n", "solutions": ["#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxN = 33;\ndouble x[maxN], y[maxN], nx[maxN], ny[maxN];\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0); cout.tie(0);\t\n\tint T;\n\tfor (cin >> T; T; T--) {\n\t\tint n; cin >> n;\n\t\tdouble c;\n\t\tcout << \"? 0 1 0\" << endl;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tcin >> x[i] >> c;\n\t\tcout << \"? 1 0 0\" << endl;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tcin >> c >> y[i];\n\t\tsort(x, x + n);\n\t\tsort(y, y + n);\n\t\tdouble a = 0.18312, b = 99.336;\n\t\tcout << \"? \" << a << ' ' << b << ' ' << 0 << endl;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tcin >> nx[i] >> ny[i];\n\t\tvector<pair<double, double>> v;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tdouble x1 = b * (b * x[i] - a * y[j]) / (a * a + b * b);\n\t\t\t\tdouble y1 = a * (a * y[j] - b * x[i]) / (a * a + b * b);\n\t\t\t\tfor (int k = 0; k < n; k++)\n\t\t\t\t\tif (pow(x1 - nx[k], 2) + pow(y1 - ny[k], 2) < 5e-7) {\n\t\t\t\t\t\tv.push_back({x[i], y[j]});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t}\n\t\tcout << \"!\";\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tcout << fixed << ' ' << setprecision(8) << v[i].first << ' ' << v[i].second;\n\t\tcout << endl;\n\t}\n}"], "input": "", "output": "", "tags": ["geometry", "interactive", "math", "probabilities"], "dificulty": "2800", "interactive": false}