{
    "link": "https://codeforces.com//contest/1362/problem/C",
    "problemId": "640964",
    "problem_idx": "C",
    "shortId": "1362C",
    "contest_number": "1362",
    "problem_submissions": {
        "E": [
            82533242,
            82534444,
            82537740,
            82514250,
            82533930,
            82533069,
            82537596,
            82539990,
            82540242,
            82538471,
            82539682,
            82530965,
            82542614,
            82539643,
            82539283,
            82546202,
            82528337,
            82546467
        ],
        "D": [
            82510668,
            82507788,
            82509488,
            82531898,
            82514757,
            82515389,
            82522345,
            82516278,
            82518522,
            82519426,
            82519224,
            82768835,
            82595629,
            82522253,
            82524305,
            82523832,
            82521456,
            82543796,
            82520171
        ],
        "C": [
            82499455,
            82498958,
            82501198,
            82493857,
            82499687,
            82506922,
            82499891,
            82507219,
            82505247,
            82500067,
            82504471,
            82506074,
            82507172,
            82504835,
            82510757,
            82507288,
            82510259
        ],
        "B": [
            82495744,
            82495722,
            82497194,
            82492324,
            82495262,
            82500116,
            82495247,
            82495676,
            82498396,
            82494894,
            82501982,
            82494238,
            82501685,
            82493927,
            82498961,
            82504636,
            82504999
        ],
        "A": [
            82492673,
            82492696,
            82492707,
            82492807,
            82492452,
            82496773,
            82492476,
            82492710,
            82493556,
            82492430,
            82494321,
            82492417,
            82493444,
            82492319,
            82493342,
            82492942,
            82498191
        ],
        "F": [
            99790549,
            99789950,
            99789855,
            99786615,
            99786490,
            99783918,
            99783396,
            99783108,
            99779312,
            99779011,
            99778620,
            99777308,
            99776727,
            99776430,
            99776080,
            99775979,
            99775398,
            99023034,
            99020809,
            99014011,
            99012603,
            82568961,
            82562279,
            82589807
        ]
    },
    "name": "C. Johnny and Another Rating Drop",
    "statement": "The last contest held on Johnny’s favorite competitive programming\r\nplatform has been received rather positively. However, Johnny’s rating\r\nhas dropped again! He thinks that the presented tasks are lovely, but\r\ndon’t show the truth about competitors’ skills.The boy is now looking at\r\nthe ratings of consecutive participants written in a binary system. He\r\nthinks that the more such ratings differ, the more unfair is that such\r\npeople are next to each other. He defines the difference between two\r\nnumbers as the number of bit positions, where one number has zero, and\r\nanother has one (we suppose that numbers are padded with leading zeros\r\nto the same length). For example, the difference of 5 = 101_2 and 14 =\r\n1110_2 equals to 3, since 0101 and 1110 differ in 3 positions. Johnny\r\ndefines the unfairness of the contest as the sum of such differences\r\ncounted for neighboring participants.Johnny has just sent you the rating\r\nsequence and wants you to find the unfairness of the competition. You\r\nhave noticed that you’ve got a sequence of integers from 0 to n. That’s\r\nstrange, but the boy stubbornly says that everything is right. So help\r\nhim and find the desired unfairness for received numbers.\r\n",
    "solutions": [
        "#include <iostream>\n#include <string>\n#include <map>\n#include <set>\n#include <cstring>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\ntypedef long long ll;\n\nint main() {\n\tios::sync_with_stdio(0);\n\tcin.tie(0), cout.tie(0);\n\n\tint t; cin >> t;\n\n\twhile (t--) {\n\t\tll n; cin >> n;\n\t\tll res = 0;\n\t\twhile (n) {\n\t\t\tres += n;\n\t\t\tn /= 2;\n\t\t}\n\t\tcout << res << endl;\n\t}\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "greedy",
        "math"
    ],
    "dificulty": "1400",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Johnny and Another Rating Drop.json",
    "editorial_link": "https://codeforces.com//blog/entry/78355",
    "editorial": "Let us start by calculating the result for . It can be quickly done by\r\ncalculating the results for each bit separately and summing these up.\r\nFor -th bit, the result is equal to as this bit is different in and iff\r\nis a multiple of . Summing these up we get that the result for is equal\r\nto .How to compute the answer for arbitrary ? Let us denote as set bits\r\nin the binary representation of . I claim that the answer is equal to\r\nthe sum of answers for . Why?We can compute results for intervals . We\r\ncan notice that the result for interval , where is a multiple of , is\r\nequal to the answer for so we can just compute the results for intervals\r\n!This allows us to compute the answer for arbitrary in just iterate over\r\nall bits and add if is set. Equivalently we can just write down as the\r\nanswer.Final complexity is .\r\n",
    "hint": []
}