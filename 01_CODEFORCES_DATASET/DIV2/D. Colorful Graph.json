{
    "link": "https://codeforces.com//contest/246/problem/D",
    "problemId": "2238",
    "problem_idx": "D",
    "shortId": "246D",
    "contest_number": "246",
    "problem_submissions": {
        "E": [
            2618309,
            2625699,
            2625672,
            2625616
        ],
        "D": [
            2614880,
            2615580,
            2616212,
            2614968,
            2614320,
            2614660,
            2616653,
            2616273,
            2613212,
            2614960,
            2617901,
            2614696,
            2616035,
            2614578,
            2615857,
            2616416,
            2616305,
            2614469,
            2615989,
            2614634
        ],
        "C": [
            2614006,
            2613802,
            2615098,
            2617187,
            2615874,
            2612559,
            2614266,
            2614575,
            2614275,
            2616756,
            2615418,
            2616320,
            2614220,
            2615862,
            2614590,
            2615086,
            2614032,
            2615573,
            2614720,
            2616902
        ],
        "B": [
            2612557,
            2612051,
            2612469,
            2612350,
            2611530,
            2613518,
            2611821,
            2612876,
            2615385,
            2612183,
            2613369,
            2612732,
            2612231,
            2612645,
            2611735,
            2612717,
            2612424,
            2613466,
            2613427,
            2613236
        ],
        "A": [
            2611340,
            2611588,
            2611575,
            2611688,
            2611152,
            2611180,
            2612517,
            2612042,
            2615112,
            2611515,
            2611961,
            2611233,
            2611703,
            2611227,
            2611218,
            2611222,
            2611497,
            2611116,
            2612114,
            2612186
        ]
    },
    "name": "D. Colorful Graph",
    "statement": "You\u2019ve got an undirected graph, consisting of vertices and edges. We\r\nwill consider the graph\u2019s vertices numbered with integers from 1 to .\r\nEach vertex of the graph has a color. The color of the -th vertex is an\r\ninteger .Let\u2019s consider all vertices of the graph, that are painted some\r\ncolor . Let\u2019s denote a set of such as . Let\u2019s denote the value of the\r\nfor color as the cardinality of the set and there is vertex belonging to\r\nset such that nodes and are connected by an edge of the graph.Your task\r\nis to find such color , which makes the cardinality of set maximum. In\r\nother words, you want to find the color that has the most diverse\r\nneighbours. Please note, that you want to find such color , that the\r\ngraph has at least one vertex with such color.\r\n",
    "solutions": [
        "#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <string.h>\n#include <set>\nusing namespace std;\n\nint n, m, x[1005*100];\nset<int> c[1005*100];\nint main()\n{\n    scanf(\"%d %d\", &n, &m);\n    for (int i=0; i<n; i++) scanf(\"%d\", &x[i]);\n    for (int i=0; i<m; i++)\n    {\n        int u, v;\n        scanf(\"%d %d\", &u, &v);\n        u--; v--;\n        int cu=x[u], cv=x[v];\n        if (cu==cv) continue;\n        c[cu].insert(cv);\n        c[cv].insert(cu);\n    }\n    int mx=0, mc=*min_element(x, x+n);\n    for (int i=0; i<1005*100; i++)\n        if (c[i].size()>mx)\n        {\n            mc=i;\n            mx=c[i].size();\n        }\n    printf(\"%d\\n\", mc);\n    return 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "brute force",
        "dfs and similar",
        "graphs"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Colorful Graph.json",
    "editorial_link": "https://codeforces.com//blog/entry/5934",
    "editorial": "This problem could be solved in this way: create new graph where\r\nvertices are the colors of the given graph. The edge between vertices\r\nand belongs this new graph if there are two vertices and in the given\r\ngraph such that and . So, the answer is such color with minimum number,\r\nthat the degree of the vertex in the new graph is maximum (without\r\nmultiple edges). Such solution could be written using time.\r\n"
}