{
    "link": "https://codeforces.com//contest/2028/problem/C",
    "problemId": "3015767",
    "problem_idx": "C",
    "shortId": "2028C",
    "contest_number": "2028",
    "problem_submissions": {
        "F": [
            290935691,
            290949712,
            290955148,
            290955187,
            290957184,
            292391424
        ],
        "E": [
            290922245,
            290922480,
            290920424,
            290927233,
            290924245,
            290933073,
            290931752,
            290929839,
            290930222,
            290933477,
            290938776,
            290925205,
            290935230,
            290939685,
            290935948,
            290940043,
            290940956,
            290939742,
            290941596
        ],
        "D": [
            290914114,
            290910753,
            290911155,
            290918762,
            290914432,
            290916818,
            290919264,
            290917594,
            290919639,
            290918811,
            290925900,
            290936103,
            290915690,
            290926820,
            290971789,
            290922189,
            290916679,
            290927684,
            290928018,
            290925322
        ],
        "C": [
            290904384,
            290896368,
            290900564,
            290905625,
            290896283,
            290906809,
            290893283,
            290905680,
            290908077,
            290905220,
            290900117,
            290902591,
            290910230,
            290901329,
            290904962,
            290902731,
            290903557,
            290906063,
            290905134
        ],
        "B": [
            290895606,
            290891907,
            290894947,
            290900151,
            290892659,
            290894607,
            290903522,
            290896362,
            290901510,
            290898064,
            290894885,
            290895319,
            290897887,
            290896070,
            290896548,
            290895196,
            290898108,
            290896215
        ],
        "A": [
            290889080,
            290888110,
            290888845,
            290888449,
            290888344,
            290888834,
            290895010,
            290888416,
            290888296,
            290888948,
            290888415,
            290888738,
            290892035,
            290889212,
            290888467,
            290903576,
            290888326,
            290888321,
            290889167
        ]
    },
    "editorial_link": "https://codeforces.com//blog/entry/136096",
    "editorial": "Alice\u00e2\u0080\u0099s piece of cake will be some subsegment . For a fixed , how large\r\ncan be? To determine this, let be the maximum number of creatures that\r\ncan be fed on and the maximum number of creatures on . Then, for a given\r\n, the maximum possible is exactly the largest such that . If we compute\r\nthe and arrays, we can then compute these largest for all with two\r\npointers in (or with binary search in , since is monotonically\r\nnon-increasing).To compute , we can use prefix sums and binary search to\r\nfind the maximum such that : then . We can compute similarly by\r\nreversing . This takes time (it is also possible to do this with two\r\npointers in , which you can see in the model solution).Expected\r\ncomplexity: or .\r\n",
    "name": "C. Alice s Adventures in Cutting Cake",
    "statement": "Alice is at the Mad Hatter\u2019s tea party! There is a long sheet cake made\r\nup of n sections with tastiness values a_1, a_2,\r\nldots, a_n. There are m creatures at the tea party, excluding Alice.\r\nAlice will cut the cake into m + 1 pieces. Formally, she will partition\r\nthe cake into m + 1 subarrays, where each subarray consists of some\r\nnumber of adjacent sections. The tastiness of a piece is the sum of\r\ntastiness of its sections. Afterwards, she will divvy these m + 1 pieces\r\nup among the m creatures and herself (her piece can be empty). However,\r\neach of the m creatures will only be happy when the tastiness of its\r\npiece is v or more.Alice wants to make sure every creature is happy.\r\nLimited by this condition, she also wants to maximize the tastiness of\r\nher own piece. Can you help Alice find the maximum tastiness her piece\r\ncan have? If there is no way to make sure every creature is happy,\r\noutput -1.\r\n",
    "solutions": [
        "#include<bits/stdc++.h>//#pragma GCC optimize(\"Ofast,no-stack-protector,unroll-loops,fast-math\")//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,tune=native\")#define ll long long#define ull unsigned long long#define lll __int128#define pc __builtin_popcount#define pr pair<int,int>#define pb push_back#define mp make_pair#define x first#define y second#define lb(x) x&-xusing namespace std;mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());ll rint(ll l,ll r){return uniform_int_distribution<ll>(l,r)(rnd);}const int maxn=2e5+10;void read(ll &X){\tX=0;\tchar cr=getchar();\twhile(cr<'0'||cr>'9') cr=getchar();\twhile(cr>='0'&&cr<='9') X=(X<<3)+(X<<1)+(cr^48),cr=getchar();}ll T,n,m,v,s[maxn],f[maxn],g[maxn],ans;int main(){//\tfreopen(\".in\",\"r\",stdin);//\tfreopen(\".out\",\"w\",stdout);\tread(T);\twhile(T--)\t{\t\tread(n),read(m),read(v),ans=0;\t\tfor(int i=1;i<=n;i++) read(s[i]),s[i]+=s[i-1],f[i]=g[i]=0;\t\tint loc=0,cnt=0;\t\tfor(int i=1;i<=n;i++) if(s[i]-s[loc]>=v) loc=i,cnt++,f[i]=cnt;\t\tfor(int i=1;i<=n;i++) f[i]=max(f[i],f[i-1]);\t\tif(cnt<m)\t\t{\t\t\tprintf(\"-1\\n\");\t\t\tcontinue;\t\t}\t\tloc=n,cnt=0,g[n+1]=0;\t\tfor(int i=n;i>=1;i--) if(s[loc]-s[i-1]>=v) loc=i-1,cnt++,g[i]=cnt;\t\tfor(int i=n;i>=1;i--) g[i]=max(g[i],g[i+1]);//\t\tfor(int i=1;i<=n;i++) cerr<<f[i]<<\",\"<<g[i]<<endl;\t\tloc=1;\t\tfor(int i=0;i<=n;i++)\t\t{\t\t\twhile(loc<=n&&f[i]+g[loc+1]>=m) loc++;\t\t\tif(loc>i) ans=max(ans,s[loc-1]-s[i]);\t\t}\t\tprintf(\"%lld\\n\",ans);\t}\treturn 0;}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "binary search",
        "dp",
        "greedy",
        "two pointers"
    ],
    "dificulty": "1600",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\C. Alice s Adventures in Cutting Cake.json"
}