{
    "link": "https://codeforces.com//contest/959/problem/D",
    "problemId": "170881",
    "problem_idx": "D",
    "shortId": "959D",
    "contest_number": "959",
    "problem_submissions": {
        "F": [
            36922958,
            36921545,
            36916491,
            36923329,
            36927067,
            36929072,
            36922529,
            36949027,
            36923867
        ],
        "D": [
            36916641,
            36918902,
            36913950,
            36921936,
            36920649,
            36922086,
            36938795,
            36921202,
            36919547,
            36921230,
            36920592,
            36944605,
            36921671,
            36921791,
            36916069,
            36920555,
            36925905,
            36924207,
            36923247
        ],
        "E": [
            36914501,
            36913015,
            36925858,
            36917118,
            36923111,
            36917652,
            36920424,
            36917502,
            36915031,
            36915660,
            36915376,
            36919671,
            36917632,
            36917697,
            36920779,
            36924711,
            36918716,
            36918302,
            36918515
        ],
        "C": [
            36911904,
            36911030,
            36920972,
            36913089,
            36913595,
            36913140,
            36914345,
            36913057,
            36911886,
            36913682,
            36913398,
            36917432,
            36913393,
            36914727,
            36913492,
            36914481,
            36914594,
            36913357,
            36914333
        ],
        "B": [
            36910571,
            36909536,
            36910083,
            36911621,
            36910450,
            36910777,
            36911891,
            36911461,
            36909624,
            36911118,
            36910588,
            36915553,
            36910516,
            36911975,
            36910706,
            36910209,
            36911346,
            36910873,
            36911805
        ],
        "A": [
            36909207,
            36907273,
            36907351,
            36907609,
            36907481,
            36907506,
            36907642,
            36908528,
            36907595,
            36907279,
            36907604,
            36911260,
            36907582,
            36908413,
            36907465,
            36907398,
            36907769,
            36907688,
            36907674
        ]
    },
    "name": "D. Mahmoud and Ehab and another array construction task",
    "statement": "Mahmoud has an array consisting of integers. He asked Ehab to find\r\nanother array such that: is lexicographically greater than or equal to .\r\n. is pairwise coprime: for every , and are coprime, i. e. , where is the\r\ngreatest common divisor of and . Ehab wants to choose a special array so\r\nhe wants the lexicographically minimal array between all the variants.\r\nCan you find it?An array is lexicographically greater than an array if\r\nthere exists an index such than and for all . An array is equal to an\r\narray if for all .\r\n",
    "solutions": [
        "#include<bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\n#define F first\n#define S second\n\nconst int MAXN = 3e6 + 10;\n\nint p[MAXN];\nint n, a[MAXN];\nbool mark[MAXN];\n\nbool ok(int cur){\n\twhile (cur > 1) {\n\t\tif (mark[p[cur]]) return false;\n\t\tcur /= p[cur];\n\t}\n\treturn true;\n}\n\nvoid go(int cur){\n\twhile (cur > 1){\n\t\tmark[p[cur]] = true;\n\t\tcur /= p[cur];\n\t}\n}\n\nint main(){\n\tios::sync_with_stdio(false);\n\tcin.tie(0);\n\tmemset(p, -1, sizeof(p));\n\tfor (int i = 2; i < MAXN; i++)\n\t\tif (p[i] == -1)\n\t\t\tfor (int j = i; j < MAXN; j += i)\n\t\t\t\tp[j] = i;\n\n\tcin >> n;\n\tfor (int i = 0; i < n; i++) cin >> a[i];\n\tint i;\n\tfor (i = 0; i < n; i++){\n\t\tif (!ok(a[i])){\n\t\t\tint cur = a[i]+1;\n\t\t\twhile (!ok(cur)) cur++;\n\t\t\tgo(cur);\n\t\t\tcout << cur << \" \";\n\t\t\ti++;\n\t\t\tbreak;\n\t\t}\n\n\t\tcout << a[i] << \" \";\n\t\tgo(a[i]);\n\t}\n\n\tint cur = 2;\n\twhile (i < n){\n\t\twhile (!ok(cur)) cur++;\n\t\tcout << cur << \" \";\n\t\tgo(cur);\n\t\ti++;\n\t}\n\tcout << \"\\n\";\n\treturn 0;\n}\n"
    ],
    "input": "",
    "output": "",
    "tags": [
        "constructive algorithms",
        "greedy",
        "math",
        "number theory"
    ],
    "dificulty": "1900",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\D. Mahmoud and Ehab and another array construction task.json",
    "editorial_link": "https://codeforces.com//blog/entry/58712",
    "editorial": "Common things : Let\u00e2\u0080\u0099s call a number \"ok\" if it could be inserted to\r\narray , as a new element, without breaking any of the conditions (i.e it\r\nshould be coprime with all the previously inserted elements). Let\u00e2\u0080\u0099s call\r\nthe maximum number that could be inserted in the worst case . For each\r\ninteger from 2 to , we\u00e2\u0080\u0099ll precompute its prime divisors with sieve.\r\n"
}