{
    "link": "https://codeforces.com//contest/1780/problem/F",
    "problemId": "1751020",
    "problem_idx": "F",
    "shortId": "1780F",
    "contest_number": "1780",
    "problem_submissions": {
        "B": [
            190535258,
            190498086,
            190497202,
            190504885,
            190496777,
            190498615,
            190498275,
            190497689,
            190505348,
            190506760,
            190497685,
            190497528,
            190501759,
            190525276,
            190496999,
            190500082,
            190500545,
            190502064,
            190519356,
            190503567
        ],
        "D": [
            190533820,
            190533379,
            190523919,
            190522645,
            190511882,
            190524576,
            190524419,
            190528918,
            190542496,
            190522478,
            190522893,
            190531155,
            190529105,
            190551665,
            190525303,
            190533171,
            190519573,
            190527940,
            190532781
        ],
        "A": [
            190529026,
            190496355,
            190496107,
            190513521,
            190496187,
            190496359,
            190496570,
            190496143,
            190505208,
            190497564,
            190496513,
            190499602,
            190498096,
            190517182,
            190496208,
            190496566,
            190497285,
            190498375,
            190517649,
            190499548
        ],
        "E": [
            190527049,
            190548713,
            190543230,
            190508008,
            190529273,
            190540087,
            190536127,
            190560235,
            190552095,
            190550324,
            190520594,
            190570059,
            190569996,
            190559193,
            190547102,
            190544599,
            190538906,
            190514425,
            190551048
        ],
        "F": [
            190517191,
            190517201,
            190529995,
            190532767,
            190538925,
            190546993,
            190547096,
            190541658,
            190557282,
            190555255,
            190536356,
            190536733,
            190551167,
            190514623,
            190538687,
            190557956,
            191454311,
            190563201,
            190556137,
            190561572
        ],
        "G": [
            190503495,
            190523768,
            190518506,
            190545041,
            190560974,
            190562076,
            190559215,
            190552122,
            190532760,
            190564681,
            190527891,
            190541029,
            190559585,
            190602710,
            190635446,
            190533062
        ]
    },
    "name": "F. Three Chairs",
    "statement": "One day Kira found n friends from Morioh and decided to gather them\r\naround a table to have a peaceful conversation. The height of friend i\r\nis equal to a_i. It so happened that the height of each of the friends\r\n.Unfortunately, there were only 3 chairs in Kira’s house, and obviously,\r\nit will not be possible to seat all friends! So, Kira has to invite only\r\n3 of his friends.But everything is not so simple! If the heights of the\r\nlowest and the tallest of the invited friends are not coprime, then the\r\nfriends will play tricks on each other, which will greatly anger\r\nKira.Kira became interested, how many ways are there to choose 3 of his\r\nfriends so that they don’t play tricks? Two ways are considered\r\ndifferent if there is a friend invited in one way, but not in the\r\nother.Formally, if Kira invites friends i, j, and k, then the following\r\nshould be true:\r\ngcd(\r\nmin(a_i, a_j, a_k),\r\nmax(a_i, a_j, a_k)) = 1, where\r\ngcd(x, y) denotes the greatest common divisor (GCD) of the numbers x and\r\ny.Kira is not very strong in computer science, so he asks you to count\r\nthe number of ways to invide friends.\r\n",
    "solutions": [
        "#include <bits/stdc++.h>\nusing namespace std;\n\ntemplate <class T> struct fenwick_tree {\n    int n;\n    vector<T> a;\n    fenwick_tree(int n = 0) : n(n), a(n + 1) {}\n\n    void add(int p, T v) {\n        for (int i = p + 1; i <= n; i += i & -i) a[i] += v;\n    }\n    T sum(int l, int r) { // [l, r)\n        return sum(r) - sum(l);\n    }\n\n  private:\n    T sum(int p) {\n        T ans = 0;\n        for (int i = p; i > 0; i -= i & -i) ans += a[i];\n        return ans;\n    }\n};\n\nusing ll = long long;\nconstexpr int N = 3e5 + 5;\nint num[N];\n\nint main() {\n    ios::sync_with_stdio(0), cin.tie(0);\n    int n;\n    cin >> n;\n    vector<int> a(n), pos(N, -1);\n    for (int i = 0; i < n; i++) {\n        cin >> a[i];\n        num[a[i]]++;\n        pos[a[i]] = i;\n    }\n    partial_sum(num, num + N, num);\n    vector<ll> ways(N);\n    fenwick_tree<int> bit1(N);\n    fenwick_tree<ll> bit2(N);\n    for (int d = 1; d < N; d++) {\n        for (int i = d; i < N; i += d) {\n            if (pos[i] == -1) continue;\n            ways[d] += (ll)(num[i] - 1) * bit1.sum(0, i);\n            ways[d] -= bit2.sum(0, i);\n            bit1.add(i, 1);\n            bit2.add(i, num[i]);\n        }\n        for (int i = d; i < N; i += d) {\n            if (pos[i] == -1) continue;\n            bit1.add(i, -1);\n            bit2.add(i, -num[i]);\n        }\n    }\n    for (int i = N - 1; i >= 1; i--) {\n        for (int j = i + i; j < N; j += i) {\n            ways[i] -= ways[j];\n        }\n    }\n    cout << ways[1] << \"\\n\";\n    return 0;\n}"
    ],
    "input": "",
    "output": "",
    "tags": [
        "bitmasks",
        "brute force",
        "combinatorics",
        "data structures",
        "dp",
        "number theory",
        "sortings"
    ],
    "dificulty": "2300",
    "interactive": false,
    "file_name": "D:\\scoala\\RESEARCH\\MLCP\\01_CODEFORCES_DATASET\\DIV2\\F. Three Chairs.json",
    "editorial_link": "https://codeforces.com//blog/entry/111841",
    "editorial": "TutorialLetâs sort the array and process the triples , assuming that and\r\n. Now if , then the number of ways to take the index is .We will\r\nconsider the answer to the problem for each from to , assuming that is\r\nthe maximum number in the triple. Now let be the number of numbers that\r\nare mutually prime with on the prefix from to , and is the sum of their\r\nindices. Then you need to add to the answer.It remains to find out the\r\nnumber of numbers that are mutually prime with and the sum of their\r\nindices. This can be done using the inclusion and exclusion method. Let\r\nbe the number of numbers that are divisible by , be the sum of the\r\nindices of numbers that are divisible by . Letâs look at the prime\r\nnumbers included in the factorization of the number .Then let initially\r\nbe equal to the number of numbers on the prefix, and to the sum of the\r\nindices on the prefix. Note that then we took into account the extra\r\nelements numbers that are divisible by , since they will not be mutually\r\nsimple with , we subtract them from and . But having done this, we again\r\ntook into account the extra elements that are multiples of the numbers\r\nof the form , where , add them back, etc. So we can iterate over the\r\nmask of the primes . And depending on the parity of the bits in the\r\nmask, we will subtract or add elements that are multiples of , where is\r\nthe product of the primes included in . Having received and , we can\r\nrecalculate the answer for the position .To move from position to\r\nposition , update the values of and by adding the element by iterating\r\nover the mask of the simple element .\r\n",
    "hint": []
}